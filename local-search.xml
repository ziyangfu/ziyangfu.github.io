<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>可执行文件SCP传输时，可能导致库丢失原因探讨</title>
    <link href="/2023/04/13/%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6SCP%E4%BC%A0%E8%BE%93%E6%97%B6%EF%BC%8C%E5%8F%AF%E8%83%BD%E5%AF%BC%E8%87%B4%E5%BA%93%E4%B8%A2%E5%A4%B1%E5%8E%9F%E5%9B%A0%E6%8E%A2%E8%AE%A8/"/>
    <url>/2023/04/13/%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6SCP%E4%BC%A0%E8%BE%93%E6%97%B6%EF%BC%8C%E5%8F%AF%E8%83%BD%E5%AF%BC%E8%87%B4%E5%BA%93%E4%B8%A2%E5%A4%B1%E5%8E%9F%E5%9B%A0%E6%8E%A2%E8%AE%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="可执行文件SCP传输时，可能导致库丢失原因探讨"><a href="#可执行文件SCP传输时，可能导致库丢失原因探讨" class="headerlink" title="可执行文件SCP传输时，可能导致库丢失原因探讨"></a>可执行文件SCP传输时，可能导致库丢失原因探讨</h3><hr><h4 id="0-问题分析"><a href="#0-问题分析" class="headerlink" title="0. 问题分析"></a>0. 问题分析</h4><p>从PC传输文件到嵌入式平台有以下集中方式，当使用SSH传输文件时，发现传输可执行文件压缩包时程序解压都可以正确执行，而直接传输可执行文件后，会出现<strong>程序链接库丢失</strong>问题。</p><img src="/2023/04/13/%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6SCP%E4%BC%A0%E8%BE%93%E6%97%B6%EF%BC%8C%E5%8F%AF%E8%83%BD%E5%AF%BC%E8%87%B4%E5%BA%93%E4%B8%A2%E5%A4%B1%E5%8E%9F%E5%9B%A0%E6%8E%A2%E8%AE%A8/image-20230413170145453.png" alt="image-20230413170145453" style="zoom:50%;"><h4 id="1-简述"><a href="#1-简述" class="headerlink" title="1. 简述"></a>1. 简述</h4><p>通过压缩包与直接传输方式，传输可执行文件 tree，比较他们的异同，压缩包方式为 A，直传为 B</p><h4 id="2-file指令查看基本信息"><a href="#2-file指令查看基本信息" class="headerlink" title="2. file指令查看基本信息"></a>2. file指令查看基本信息</h4><p>注意，此时<code>dynamically linked</code>转变为<code>statically linked</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># A</span><br>ELF 64-bit LSB executable, ARM aarch64, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux-aarch64.so.1, BuildID[sha1]=0c126f1b17601d33513b52c02a5e63358d912512, <span class="hljs-keyword">for</span> GNU/Linux 3.14.0, with debug_info, not stripped<br><br><span class="hljs-comment"># B</span><br>ELF 64-bit LSB executable, ARM aarch64, version 1 (SYSV), statically linked, interpreter *empty*, stripped<br></code></pre></td></tr></table></figure><h4 id="3-ldd指令查看动态链接库连接情况"><a href="#3-ldd指令查看动态链接库连接情况" class="headerlink" title="3. ldd指令查看动态链接库连接情况"></a>3. ldd指令查看动态链接库连接情况</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># A</span><br>linux-vdso.so.1 (0x0000ffff8a54f000)<br>libc.so.6 =&gt; /lib/libc.so.6 (0x0000ffff8a3b7000)<br>/lib/ld-linux-aarch64.so.1 (0x0000ffff8a521000)<br><span class="hljs-comment"># B</span><br>not a dynamic executable<br></code></pre></td></tr></table></figure><h4 id="4-nm指令查看符号信息"><a href="#4-nm指令查看符号信息" class="headerlink" title="4. nm指令查看符号信息"></a>4. nm指令查看符号信息</h4><blockquote><p>nm可以列出二进制可执行文件，动态库，静态库中的符号信息，包括符号的类型，符号名称，比如函数名，全局变量等。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># A</span><br>000000000424b24 B Dflag<br>0000000000424b0c B Fflag<br>0000000000406d04 T Ftype<br>0000000000424b38 B Hflag<br>0000000000424b28 B Jflag<br>0000000000424af4 B Level<br>0000000000424b5c B Nflag<br>0000000000424b30 B Qflag<br>0000000000424af8 B Rflag<br>0000000000424b74 B Xflag<br>0000000000423e08 d _DYNAMIC<br>0000000000423fd8 d _GLOBAL_OFFSET_TABLE_<br>000000000040fcb0 R _IO_stdin_used<br>0000000000413d7c r __FRAME_END__<br>00000000004132f8 r __GNU_EH_FRAME_HDR<br>0000000000424890 D __TMC_END__<br>0000000000426508 B __bss_end__<br>0000000000424890 B __bss_start<br><span class="hljs-comment"># B</span><br>nm: warning: ./tree001 has a corrupt section with a size (6d616e656c696674) larger than the file size<br></code></pre></td></tr></table></figure><h4 id="5-readelf指令分析可执行文件结构"><a href="#5-readelf指令分析可执行文件结构" class="headerlink" title="5. readelf指令分析可执行文件结构"></a>5. readelf指令分析可执行文件结构</h4><p>如果二进制文件是ELF格式的，通过<code>file</code>文件可以查看文件格式.使用<code>readelf</code>指令可以方便分析ELF文件的结构，比如节信息，elf头文件信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># A</span><br>ELF Header:<br>Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 <br>  Class:                             ELF64<br>  Data:                              2<span class="hljs-string">&#x27;s complement, little endian</span><br><span class="hljs-string">  Version:                           1 (current)</span><br><span class="hljs-string">  OS/ABI:                            UNIX - System V</span><br><span class="hljs-string">  ABI Version:                       0</span><br><span class="hljs-string">  Type:                              EXEC (Executable file)</span><br><span class="hljs-string">  Machine:                           AArch64</span><br><span class="hljs-string">  Version:                           0x1</span><br><span class="hljs-string">  Entry point address:               0x401410</span><br><span class="hljs-string">  Start of program headers:          64 (bytes into file)</span><br><span class="hljs-string">  Start of section headers:          174024 (bytes into file)</span><br><span class="hljs-string">  Flags:                             0x0</span><br><span class="hljs-string">  Size of this header:               64 (bytes)</span><br><span class="hljs-string">  Size of program headers:           56 (bytes)</span><br><span class="hljs-string">  Number of program headers:         9</span><br><span class="hljs-string">  Size of section headers:           64 (bytes)</span><br><span class="hljs-string">  Number of section headers:         36</span><br><span class="hljs-string">  Section header string table index: 35</span><br><span class="hljs-string"> </span><br><span class="hljs-string"> # B</span><br><span class="hljs-string">  ELF Header:</span><br><span class="hljs-string">  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 </span><br><span class="hljs-string">  Class:                             ELF64</span><br><span class="hljs-string">  Data:                              2&#x27;</span>s complement, little endian<br>  Version:                           1 (current)<br>  OS/ABI:                            UNIX - System V<br>  ABI Version:                       0<br>  Type:                              EXEC (Executable file)<br>  Machine:                           AArch64<br>  Version:                           0x1<br>  Entry point address:               0x401410<br>  Start of program headers:          64 (bytes into file)<br>  Start of section headers:          174024 (bytes into file)<br>  Flags:                             0x0<br>  Size of this header:               64 (bytes)<br>  Size of program headers:           56 (bytes)<br>  Number of program headers:         9<br>  Size of section headers:           64 (bytes)<br>  Number of section headers:         36<br>  Section header string table index: 35<br>readelf: Warning: Section 0 has an out of range sh_link value of 1282605157<br>readelf: Warning: Section 0 has an out of range sh_info value of 1818588773<br>readelf: Warning: Section 1 has an out of range sh_link value of 1702064737<br></code></pre></td></tr></table></figure><h4 id="6-结论"><a href="#6-结论" class="headerlink" title="6.结论"></a>6.结论</h4><p>传输可执行文件时，将文件压缩后再传输。</p>]]></content>
    
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux网络子系统性能观测研究报告</title>
    <link href="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/"/>
    <url>/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<h2 id="网络子系统性能观测研究报告"><a href="#网络子系统性能观测研究报告" class="headerlink" title="网络子系统性能观测研究报告"></a>网络子系统性能观测研究报告</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h3><p>随着智能网联汽车的发展，对车辆内、外通信的需求越来越高，也推动汽车网络技术的发展。车内应用进行网络通信，离不开内核的网络协议栈以及相应驱动程序的支持，所以观测网络性能， 就需要从内核中提取相关数据进行分析处理。</p><h3 id="2-网络子系统背景介绍"><a href="#2-网络子系统背景介绍" class="headerlink" title="2.网络子系统背景介绍"></a>2.网络子系统背景介绍</h3><h4 id="2-1-协议栈"><a href="#2-1-协议栈" class="headerlink" title="2.1 协议栈"></a>2.1 协议栈</h4><p>Linux内核网络协议栈由多种协议分层组成，如图1所示， 协议栈中每一层都有自己的职责。例如，IP协议允许通过多个路由器和网络发送数据报，可以重新组合数据包，但不能保证某些数据丢失时的可靠性，这需要在更高一层的如TCP协议中实现。</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/1.png" alt="图1"><p>用户态应用程序通过socket接口与内核网络协议栈进行交互，协议栈又通过网卡驱动程序与网卡硬件进行交互，从而实现网络通信。</p><h4 id="2-2-关键数据结构"><a href="#2-2-关键数据结构" class="headerlink" title="2.2 关键数据结构"></a>2.2 关键数据结构</h4><p>纵观整个网络子系统，有几个关键的数据结构贯彻其中，如<code>sk_buff</code>、<code>net_device</code>、<code>socket</code>、<code>sock</code>等，他们之间的关系如图2所示。</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/2.png" alt="img"><h5 id="2-2-1-struct-sk-buff"><a href="#2-2-1-struct-sk-buff" class="headerlink" title="2.2.1 struct sk_buff"></a>2.2.1 struct sk_buff</h5><p>所有网络分层都会使用<code>sk_buff</code>结构来储存其报头、有关用户数据的信息，以及协调其工作的其他内部信息。从第二层到第四层都会使用这个数据结构。</p><p>内核使用一个双向链表来维护<code>sk_buff</code>结构，<code>next</code>指针指向下一个<code>sk_buff</code>结构，如图3所示。</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/skb_none_line_mode3.png" alt="sk_buff insight – WHYFI" style="zoom:50%;"><p><code>sk_buff</code>结构体中重要字段描述：</p><table><thead><tr><th align="left">字段</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">head</td><td align="left">The start of the packet</td></tr><tr><td align="left">data</td><td align="left">The start of the packet payload</td></tr><tr><td align="left">tail</td><td align="left">The end of the packet payload</td></tr><tr><td align="left">end</td><td align="left">The end of the packet</td></tr><tr><td align="left">len</td><td align="left">The amount of data of the packet</td></tr></tbody></table><p>指针指向区域描述：</p><table><thead><tr><th>区域名称</th><th>描述</th></tr></thead><tbody><tr><td>head room</td><td>位于head至data之间的空间，用于存储protocol header，如：TCP header, IP header, Ethernet header .etc</td></tr><tr><td>user data</td><td>位于data至tail之间的空间，用于存储应用层数据，一般系统调用时会使用到。</td></tr><tr><td>tail room</td><td>位于tail至end之间的空间，用于填充用户数据未使用完的空间。</td></tr><tr><td>skb_shared_info</td><td>位于end之后，用于存储特殊数据结构skb_shared_info，该结构用于描述分片信息。</td></tr></tbody></table><h5 id="2-2-2-struct-net-device"><a href="#2-2-2-struct-net-device" class="headerlink" title="2.2.2 struct net_device"></a>2.2.2 struct net_device</h5><p>在内核中，网络设备被抽象为<code>struct net_device</code>结构，它是网络设备硬件与上层协议之间联系的接口，该结构包括网卡硬件类信息、统计类信息、上层协议处理接口、流控接口等。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">net_device</span> &#123;</span><br>    <span class="hljs-type">int</span>         irq;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span>    <span class="hljs-title">ptype_all</span>;</span>   <span class="hljs-comment">//监听此设备上所有报文的处理函数链表</span><br>    <span class="hljs-type">int</span>         ifindex;             <span class="hljs-comment">//接口索引值</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">net_device_stats</span> <span class="hljs-title">stats</span>;</span>   <span class="hljs-comment">//收发报文的统计信息</span><br>    <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">net_device_ops</span> *<span class="hljs-title">netdev_ops</span>;</span><br>    <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ethtool_ops</span> *<span class="hljs-title">ethtool_ops</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">in_device</span> __<span class="hljs-title">rcu</span>  *<span class="hljs-title">ip_ptr</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inet6_dev</span> __<span class="hljs-title">rcu</span>  *<span class="hljs-title">ip6_ptr</span>;</span><br>    <span class="hljs-type">rx_handler_func_t</span> __rcu *rx_handler;<br>    <span class="hljs-type">void</span> __rcu      *rx_handler_data; <br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">netdev_queue</span> __<span class="hljs-title">rcu</span> *<span class="hljs-title">ingress_queue</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Qdisc</span>        *<span class="hljs-title">qdisc</span>;</span>  <span class="hljs-comment">//流控</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>2.2.3 struct sock</p><p>内核中网络相关的很多函数，参数往往都是<code>struct sock</code>，函数内部依照不同的逻辑，将<code>struct sock</code>转换为不同的结构。<code>struct sock *sk</code>是贯穿并连接于L2～L5各层之间的纽带，也是网络中最核心的结构体。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* include/net/sock.h */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sock</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sock_common</span>__<span class="hljs-title">sk_common</span>;</span> <span class="hljs-comment">// sock通用结构体</span><br>    <br>    <span class="hljs-type">socket_lock_t</span>sk_lock; <span class="hljs-comment">// 套接字同步锁</span><br><span class="hljs-type">atomic_t</span>sk_drops; <span class="hljs-comment">// IP/UDP包丢包统计</span><br><span class="hljs-type">int</span>    sk_rcvlowat; <span class="hljs-comment">// SO_SO_RCVLOSO_RCVLOWAT标记位</span><br>    <br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sk_buff_head</span><span class="hljs-title">sk_error_queue</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sk_buff</span>*<span class="hljs-title">sk_rx_skb_cache</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sk_buff_head</span><span class="hljs-title">sk_receive_queue</span>;</span> <span class="hljs-comment">//接收数据包队列</span><br>    <br>    <span class="hljs-type">int</span> sk_forward_alloc;<br>    <span class="hljs-type">int</span> sk_rcvbuf; <span class="hljs-comment">//接收缓存大小</span><br>    <span class="hljs-type">int</span> sk_sndbuf; <span class="hljs-comment">//发送缓存大小</span><br><br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">socket_wq</span> __<span class="hljs-title">rcu</span>*<span class="hljs-title">sk_wq</span>;</span> <span class="hljs-comment">// 等待队列</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">socket_wq</span>*<span class="hljs-title">sk_wq_raw</span>;</span><br>&#125;;<br><br>    <span class="hljs-comment">/* ===== cache line for TX ===== */</span><br><span class="hljs-type">int</span>sk_wmem_queued; <span class="hljs-comment">//传输队列大小</span><br><span class="hljs-type">refcount_t</span> sk_wmem_alloc; <span class="hljs-comment">//已确认的传输字节数</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> sk_tsq_flags; <span class="hljs-comment">//TCP Small Queue标记位</span><br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sk_buff</span>*<span class="hljs-title">sk_send_head</span>;</span> <span class="hljs-comment">//发送队列队首</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_root</span><span class="hljs-title">tcp_rtx_queue</span>;</span><br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sk_buff_head</span><span class="hljs-title">sk_write_queue</span>;</span> <span class="hljs-comment">//发送队列</span><br>    <br>u32sk_pacing_status; <span class="hljs-comment">/* see enum sk_pacing */</span><br><span class="hljs-type">long</span>sk_sndtimeo; <span class="hljs-comment">//SO_SNDTIMEO标记位</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timer_list</span><span class="hljs-title">sk_timer</span>;</span> <span class="hljs-comment">//套接字清空计时器</span><br>__u32sk_priority; <span class="hljs-comment">//SO_PRIORITY标记位</span><br>   <br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>sk_pacing_rate; <span class="hljs-comment">/* bytes per second */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>sk_max_pacing_rate; <span class="hljs-comment">//最大发包速率</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page_frag</span><span class="hljs-title">sk_frag</span>;</span> <span class="hljs-comment">//缓存页帧</span><br><br>    <span class="hljs-type">int</span>sk_err, <span class="hljs-comment">//上次错误</span><br>sk_err_soft; <br>u32sk_ack_backlog; <span class="hljs-comment">//ack队列长度</span><br>u32sk_max_ack_backlog; <span class="hljs-comment">//最大ack队列长度</span><br><span class="hljs-type">kuid_t</span>sk_uid; <span class="hljs-comment">//user id</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pid</span>*<span class="hljs-title">sk_peer_pid</span>;</span> <span class="hljs-comment">//套接字对应peer id</span><br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cred</span>*<span class="hljs-title">sk_peer_cred</span>;</span><br><span class="hljs-type">long</span>sk_rcvtimeo; <span class="hljs-comment">//接收超时</span><br><span class="hljs-type">ktime_t</span>sk_stamp; <span class="hljs-comment">//时间戳</span><br>&#125;; <br></code></pre></td></tr></table></figure><h5 id="2-2-4-struct-socket"><a href="#2-2-4-struct-socket" class="headerlink" title="2.2.4 struct socket"></a>2.2.4 struct socket</h5><p>内核中的进程通过文件描述符<code>fd</code>中的<code>struct socket</code>结构体与内核网络协议栈进行沟通，如图4所示。</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/4.png" alt="img"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">socket</span></span><br><span class="hljs-class">&#123;</span><br>     socket_state  state; <span class="hljs-comment">// socket state</span><br>     <span class="hljs-type">short</span>   type ; <span class="hljs-comment">// socket type</span><br>     <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>  flags; <span class="hljs-comment">// socket flags</span><br>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fasync_struct</span>  *<span class="hljs-title">fasync_list</span>;</span><br>     <span class="hljs-type">wait_queue_head_t</span> wait;<br>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> *<span class="hljs-title">file</span>;</span><br>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sock</span> *<span class="hljs-title">sock</span>;</span>  <span class="hljs-comment">// socket在网络层的表示；</span><br>     <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proto_ops</span> *<span class="hljs-title">ops</span>;</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-3-内核收包过程"><a href="#2-3-内核收包过程" class="headerlink" title="2.3 内核收包过程"></a>2.3 内核收包过程</h4><p>收包过程大致可分为网卡初始化、网卡收包、DMA将包复制到RX队列、触发硬件中断IRQ、内核调度到ksoftirqd线程、软中断处理从ringbuffer取数据送到协议栈、协议栈L2处理、协议栈L3处理、协议栈L4处理这9个过程，如图5所示。</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/5.png" alt="image-20230207192247422"><ul><li>网卡收包触发硬中断</li></ul><p>数据从网线进入网卡，通过DMA写到ringbuffer，然后就该内核来收包了。由于硬中断期间可能会导致事件丢失，所以在硬中断处理期间不能有耗时操作，只是完成了将数据包放入EQ（Event Queue），之后执行<code>napi_schedule()</code>调度NAPI去处理。在<code>napi_schedule()</code>中，会调用<code>__raise_softirq_irqoff()</code>触发一个<code>NET_RX_SOFTIRQ</code>类型软中断，并触发执行软中断处理函数<code>net_rx_action()</code>。NAPI方式结合了轮询和中段两种方式。每次执行到NAPI<code>poll()</code>方法时，会批量从ringbuffer收包，并且会尽量把所有待收的包都收完。</p><ul><li>软中断处理</li></ul><p><code>net_rx_action</code>从处理ringbuffer开始，遍历当前CPU队列的NAPI变量队列，依次执行其<code>poll</code>方法，如mlx5e网卡驱动的<code>mlx5e_napi_poll()</code>。在该函数中，会依次处理TX和RX队列，包含<strong>XDP程序</strong>（Driver模式）也是在这里执行。之后，从ringbuffer中初始化一个<code>struct sk_buff *skb</code>结构体变量，也就是常说的skb数据包。然后调用<code>napi_gro_receive()</code>执行GRO，GRO的功能是对分片的包进行重组然后交给更上层，以提高吞吐。最后，调用<code>netif_receive_skb_list_internal()</code>进入内核协议栈处理。</p><ul><li>协议栈L2处理</li></ul><p>在<code>netif_receive_skb_list_internal()</code>中，会根据是否开启RPS执行不同逻辑。在未开启RPS时，会通过<code>__netif_receive_skb_core</code>完成将数据送到协议栈处理。在该函数中，会依次进行以下操作：(1)处理skb时间戳。（2）执行<strong>Generic XDP</strong>程序。（3）处理VLAN header。（4）TAP处理，如<strong>tcpdump</strong>抓包、流量过滤。（5）流量控制TC，包括TC规则和<strong>TC BPF</strong>程序。（6）Netfilter，处理iptables规则。最后通过<code>skb-&gt;dev-&gt;rx_handler(&amp;skb)</code>进入L3 ingress处理，如IPv4处理。</p><ul><li>协议栈L3处理（以IPv4为例）</li></ul><p>IP层在函数<code>inet_init</code>中将自身注册到了<code>ptype_base</code>哈希表中。在<code>deliver_skb()</code>中会调用注册的<code>.func</code>方法，对应IPv4的<code>ip_rcv()</code>函数。<code>ip_rcv()</code>中进行了数据合法性验证、统计计数器更新等，在最后会以netfilter hook的方式调用<code>ip_rcv_finish</code>方法。处理结束的时候，调用<code>ip_local_deliver_finish()</code>，通过寻找注册在这个协议上的<code>struct net_protocol</code>变量，将数据包送到协议栈更上层。如TCP协议对应的<code>tcp_v4_rcv</code>、UDP协议对应的<code>udp_v4_rcv</code>。</p><ul><li>协议栈L4处理（以UDP为例）</li></ul><p>在<code>inet_init()</code>中，通过<code>inet_add_protocol()</code>注册了<code>udp_protocol</code>，其中<code>.handler</code>方法指向了<code>udp_rcv</code>函数。这是从IP层进入UDP层的入口。在该函数中，调用了<code>__udp4_lib_rcv()</code>接收UDP报文。在<code>__udp4_lib_rcv</code>中，首先进行合法性检查，获取UDP头、UDP数据报长度、源地址、目标地址等信息，然后进行一些完整性检测和checksum验证。在IP层中，送到更上面一层协议前，会将一个<code>dst_entry</code>关联到skb，如果对应的<code>dst_entry</code>找到了，并且有对应的socket，<code>udp4_lib_rcv</code> 会将 packet 放到 <code>socket</code> 的接收队列。网络数据通过<code>__skb_queue_tail()</code>进入socket接收队列，并且会在之前进行一些检查和更新计数，并通过<code>sk_filter</code>执行<strong>socket BPF</strong>程序。</p><h3 id="3-网络性能观测方法"><a href="#3-网络性能观测方法" class="headerlink" title="3.网络性能观测方法"></a>3.网络性能观测方法</h3><h4 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h4><p>网络性能包括链路上的包转发时延、吞吐量、带宽等指标，也包括主机侧的实时网络状况，传统工具包括：ss、ip、nstat、netstat、sar、nicstat、ethtool、tcpdump等，BPF工具包括：netsize、nettxlat、superping、tcpconnect、tcplife、tcptop、udpconnect、sockstat等，这些工具包含了网络子系统的各个层面，如图所示，可以对系统网络状况进行较为全面的了解，从而进一步去分析可能存在的问题与瓶颈，提升网络性能。</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/bpftools.png" alt="bpftools" style="zoom:80%;"><h4 id="3-2-链路层与网络层"><a href="#3-2-链路层与网络层" class="headerlink" title="3.2 链路层与网络层"></a>3.2 链路层与网络层</h4><h5 id="（1）-传统工具"><a href="#（1）-传统工具" class="headerlink" title="（1） 传统工具"></a>（1） 传统工具</h5><ul><li>ethtool</li></ul><p>ethtool可以利用<code>-i</code>和<code>-k</code>选项检查网络接口的静态配置信息，也可利用<code>-S</code>选项打印驱动程序统计信息。如图所示。</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/image-20230211122851629.png" alt="image-20230211122851629" style="zoom:50%;"><p>这行命令从内核中的ethtool框架中获取统计信息，大部分网络设备驱动程序都支持该框架。网络设备驱动程序也可定义自己的ethtool指标。</p><p>使用<code>-i</code>选项可展示驱动细节信息，使用<code>-k</code> 可展示网络接口的可调节项，如图所示。</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/image-20230211123322383.png" alt="image-20230211123322383" style="zoom: 50%;"><ul><li>nicstat</li></ul><p>nicstat可以打印网络接口的统计信息，如图所示。</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/image-20230211124725911.png" alt="image-20230211124725911" style="zoom: 50%;"><p>这个输出中包括了一些饱和度统计信息，可以用来识别网络接口的饱和程度。</p><ul><li>netstat</li></ul><p>netstat是一个用来汇报各种类型的网络统计信息的传统工具，包括以下命令：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>(default)</td><td>列出所有处于打开状态的套接字</td></tr><tr><td>-a</td><td>列出所有套接字的信息</td></tr><tr><td>-s</td><td>网络软件栈统计信息</td></tr><tr><td>-i</td><td>网络接口统计信息</td></tr><tr><td>-r</td><td>列出路由表</td></tr></tbody></table><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/image-20230211154338651.png" alt="image-20230211154338651" style="zoom: 50%;"><ul><li>ip</li></ul><p>ip是一个管理路由、网络设备、接口以及隧道的工具，可用来打印各种对象的统计信息，如link、address、route等。如图为使用<code>ip -s link</code>打印link的统计信息。</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/image-20230211154647754.png" alt="image-20230211154647754" style="zoom:50%;"><ul><li>sar</li></ul><p>系统报表活动工具sar可以打印出各种网络统计信息表。</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-n DEV</td><td>网络接口统计信息</td></tr><tr><td>-n EDEV</td><td>网络接口错误统计信息</td></tr><tr><td>-n IP,IP6</td><td>IPv4、IPv6数据包统计信息</td></tr><tr><td>-n EIP,EIP6</td><td>IPv4、IPv6错误统计信息</td></tr><tr><td>-n ICMP,ICMP6</td><td>IPv4、IPv6 ICMP统计信息</td></tr><tr><td>-n EICMP,EICMP6</td><td>IPv4、IPv6 ICMP错误统计信息</td></tr><tr><td>-n TCP</td><td>TCP统计信息</td></tr><tr><td>-n ETCP</td><td>TCP错误统计信息</td></tr><tr><td>-n SOCK,SOCK6</td><td>IPv4、IPv6 套接字用量</td></tr></tbody></table><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/image-20230211152114811.png" alt="image-20230211152114811" style="zoom:50%;"><p>上图为<code>sar -n DEV,IP</code>运行结果，可以看到关于网络设备和IPv4统计信息</p><h5 id="（2）-BPF工具"><a href="#（2）-BPF工具" class="headerlink" title="（2） BPF工具"></a>（2） BPF工具</h5><ul><li>netsize（<a href="https://github.com/brendangregg/bpf-perf-tools-book/blob/master/originals/Ch10_Networking/netsize.bt%EF%BC%89">https://github.com/brendangregg/bpf-perf-tools-book/blob/master/originals/Ch10_Networking/netsize.bt）</a></li></ul><p>netsize从网络设备层展示发送和接收的包的大小，可以同时显示软件分段托管之前和之后的大小（GSO和GRO）。该输出可以用来调查发送之前的碎片化情况。</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/image-20230211151345524.png" alt="image-20230211151345524" style="zoom:50%;"><ul><li>netqtop</li></ul><p>netqtop对指定网络接口的每个队列的传输和接收的数据包进行统计，帮助开发者检查其流量负载是否平衡。 结果显示为一个表格，列有PPS、BPS、平均大小和数据包计数。每隔给定的时间间隔以秒为单位进行打印，如图所示。</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/image-20230211133203018.png" alt="image-20230211133203018" style="zoom:80%;"><p>该工具使用<code>net:net_dev_start_xmit</code>和<code>net:netif_receive_skb</code>内核追踪点。 由于它使用tracepoint，该工具只在Linux 4.7以上版本上工作。 netqtop在网络流量大的时候会引入大量的开销。</p><h4 id="3-3-传输层"><a href="#3-3-传输层" class="headerlink" title="3.3 传输层"></a>3.3 传输层</h4><h5 id="（1）-传统工具-1"><a href="#（1）-传统工具-1" class="headerlink" title="（1） 传统工具"></a>（1） 传统工具</h5><ul><li>tcpdump</li></ul><p>tcpdump可以用来抓取网络包进行分析。借助Wireshark GUI工具，可以利用tcpdump的输出文件来检查包头、跟踪某个TCP连接、进行包重组以及其他操作，如图所示。</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/image-20230212115923283.png" alt="image-20230212115923283" style="zoom:80%;"><ul><li>sar</li></ul><p>通过sar获取TCP统计信息<code>sar -n TCP,ETCP</code></p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/image-20230212094305723.png" alt="image-20230212094305723" style="zoom:50%;"><h5 id="（2）-BPF工具-1"><a href="#（2）-BPF工具-1" class="headerlink" title="（2） BPF工具"></a>（2） BPF工具</h5><ul><li>tcptop</li></ul><p>tcptop是一个BCC工具，可以展示使用TCP的进程，如图所示。该工具跟踪TCP发送和接收的代码路径，包括<code>tcp_sendmsg</code>、<code>tcp_cleanup_rbuff</code>，并将数据记录在BPF Map中。通过参数<code>-p</code>可以指定仅跟踪的进程PID。</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/image-20230212111446136.png" alt="image-20230212111446136" style="zoom:80%;"><ul><li>tcpwin</li></ul><p>tcpwin跟踪TCP发送拥塞窗口的尺寸，以及其他的内核参数，以便分析拥塞控制算法的性能，如图所示。</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/image-20230212111812047.png" alt="image-20230212111812047" style="zoom:50%;"><ul><li>udpconnect</li></ul><p>udpconnect跟踪本机通过<code>connect</code>系统调用发起的UDP连接（不包括无连接的UDP通信），如图所示。该工具跟踪内核中的UDP连接函数，并且由于该函数调用频率较低，所以该工具的额外开销很低。</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/image-20230212112132666.png" alt="image-20230212112132666" style="zoom:80%;"><h4 id="3-4-套接字"><a href="#3-4-套接字" class="headerlink" title="3.4 套接字"></a>3.4 套接字</h4><h5 id="（1）-传统工具-2"><a href="#（1）-传统工具-2" class="headerlink" title="（1） 传统工具"></a>（1） 传统工具</h5><ul><li>ss</li></ul><p>ss是一个套接字统计工具，可以简要输出当前打开的套接字信息。默认的输出提供了网络套接字的高层信息，可以使用以下选项显示更多信息：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>-a,–all</td><td>显示所有套接字</td></tr><tr><td>-m,–memory</td><td>显示套接字内存使用情况</td></tr><tr><td>-i,–info</td><td>显示内部TCP信息</td></tr><tr><td>-t,–tcp</td><td>仅显示TCP套接字</td></tr><tr><td>-u,–udp</td><td>仅显示UDP套接字</td></tr></tbody></table><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/image-20230211161523945.png" alt="image-20230211161523945" style="zoom:50%;"><p>通过<code>-ti</code>参数可以显示更多tcp内部信息，包括以下信息：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>cong_alg</td><td>拥塞算法名称，默认为”cubic”</td></tr><tr><td>wscale</td><td>窗口放大倍数</td></tr><tr><td>rto</td><td>TCP重传超时值，毫秒</td></tr><tr><td>backoff</td><td>用于指数回退重传</td></tr><tr><td>rtt</td><td>RTT（平均往返时间）</td></tr><tr><td>mss</td><td>MSS（最大数据分段长度）</td></tr><tr><td>cwnd</td><td>拥塞窗口大小</td></tr><tr><td>pmtu</td><td>路径MTU</td></tr><tr><td>ssthresh</td><td>TCP拥塞窗口慢启动阈值</td></tr><tr><td>bytes_acked&#x2F;bytes_received</td><td>ack&#x2F;rcv的字节数</td></tr><tr><td>segs_out&#x2F;segs_in</td><td>发出和接收的分段数</td></tr><tr><td>lastsnd&#x2F;lastrcv&#x2F;lastack</td><td>距离最后一个send&#x2F;rcv&#x2F;ack的包的时间，毫秒</td></tr></tbody></table><p>通过<code>-as</code>显示套接字概况</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/image-20230212120220554.png" alt="image-20230212120220554" style="zoom:50%;"><h5 id="（2）-BPF工具-2"><a href="#（2）-BPF工具-2" class="headerlink" title="（2） BPF工具"></a>（2） BPF工具</h5><ul><li>soprotocol</li></ul><p>soprotocol按进程名和传输协议来跟踪新套接字连接的建立，如图所示。</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/image-20230212123557846.png" alt="image-20230212123557846" style="zoom:80%;"><ul><li>socketio</li></ul><p>socketio按进程、方向、协议和端口来展示套接字的I&#x2F;O统计信息，如图所示。</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/image-20230212124407482.png" alt="image-20230212124407482" style="zoom:50%;"><h3 id="4-eBPF网络性能数据提取方法"><a href="#4-eBPF网络性能数据提取方法" class="headerlink" title="4.eBPF网络性能数据提取方法"></a>4.eBPF网络性能数据提取方法</h3><h4 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h4><p>nic_throughput是LMP下观测网络性能的eBPF工具，其可以每秒输出指定网卡发送与接收的字节数、包数与包平均大小。（BPS：每秒多少字节     PPS：每秒多少包）</p><p>命令行参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">-n，--name<br>    [必选] 网卡名称<br>-i, --interval<br>    [可选] 输出时间间隔，默认为1s<br>-c, --count<br>    [可选] 输出条数，默认为99999999<br>--<span class="hljs-built_in">print</span><br>    [可选] 在命令行打印结果<br>--visual<br>    [可选] 将结果通过influxdb-grafana可视化<br></code></pre></td></tr></table></figure><h4 id="4-2-原理"><a href="#4-2-原理" class="headerlink" title="4.2 原理"></a>4.2 原理</h4><p>nic_throughput使用了两个tracepoint跟踪点，分别是：<code>net_dev_start_xmit</code>和<code>netif_receive_skb</code>，分别对应TX和RX路径。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* TX路径 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">xmit_one</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> sk_buff *skb, <span class="hljs-keyword">struct</span> net_device *dev,</span><br><span class="hljs-params">    <span class="hljs-keyword">struct</span> netdev_queue *txq, <span class="hljs-type">bool</span> more)</span><br>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> len;<br><span class="hljs-type">int</span> rc;<br><br><span class="hljs-keyword">if</span> (dev_nit_active(dev))<br>dev_queue_xmit_nit(skb, dev);<br><br>len = skb-&gt;len;<br>PRANDOM_ADD_NOISE(skb, dev, txq, len + jiffies);<br>trace_net_dev_start_xmit(skb, dev);         <span class="hljs-comment">//! tracepoint 挂载点</span><br>rc = netdev_start_xmit(skb, dev, txq, more);<br>trace_net_dev_xmit(skb, rc, dev, len);<br><br><span class="hljs-keyword">return</span> rc;<br>&#125;<br><br><span class="hljs-comment">/* RX路径 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> __netif_receive_skb_core(<span class="hljs-keyword">struct</span> sk_buff **pskb, <span class="hljs-type">bool</span> pfmemalloc,<br>    <span class="hljs-keyword">struct</span> packet_type **ppt_prev)<br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">packet_type</span> *<span class="hljs-title">ptype</span>, *<span class="hljs-title">pt_prev</span>;</span><br><span class="hljs-type">rx_handler_func_t</span> *rx_handler;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sk_buff</span> *<span class="hljs-title">skb</span> =</span> *pskb;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">net_device</span> *<span class="hljs-title">orig_dev</span>;</span><br><span class="hljs-type">bool</span> deliver_exact = <span class="hljs-literal">false</span>;<br><span class="hljs-type">int</span> ret = NET_RX_DROP;<br>__be16 type;<br><br>net_timestamp_check(!netdev_tstamp_prequeue, skb);<br><br>trace_netif_receive_skb(skb);   <span class="hljs-comment">//! tracepoint 挂载点</span><br><br>orig_dev = skb-&gt;dev;<br><br>skb_reset_network_header(skb);<br><span class="hljs-keyword">if</span> (!skb_transport_header_was_set(skb))<br>skb_reset_transport_header(skb);<br>skb_reset_mac_len(skb);<br><br>pt_prev = <span class="hljs-literal">NULL</span>;<br>    ...<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>通过编写eBPF程序，得到<code>sk_buff</code>结构中字段<code>len</code>的长度，得到包的大小，并且记录次数作为包的数量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* TRACEPOINT部分 */</span><br>TRACEPOINT_PROBE(net, net_dev_start_xmit)&#123;<br>    <span class="hljs-comment">/* read device name */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sk_buff</span>* <span class="hljs-title">skb</span> =</span> (<span class="hljs-keyword">struct</span> sk_buff*)args-&gt;skbaddr;<br>    ...<br>    updata_data(data, skb-&gt;len);<br>&#125;<br><br>TRACEPOINT_PROBE(net, netif_receive_skb)&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sk_buff</span> <span class="hljs-title">skb</span>;</span><br><br>    bpf_probe_read(&amp;skb, <span class="hljs-keyword">sizeof</span>(skb), args-&gt;skbaddr);<br>    ...<br>    updata_data(data, skb.len);<br>&#125;<br><br><span class="hljs-comment">/* MAP部分 */</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">queue_data</span>&#123;</span><br>    u64 total_pkt_len;<br>    u32 num_pkt;<br>&#125;;<br><br>BPF_HASH(tx_q, u16, <span class="hljs-keyword">struct</span> queue_data, MAX_QUEUE_NUM);<br>BPF_HASH(rx_q, u16, <span class="hljs-keyword">struct</span> queue_data, MAX_QUEUE_NUM);<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">updata_data</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> queue_data *data, u64 len)</span>&#123;<br>    data-&gt;total_pkt_len += len;<br>    data-&gt;num_pkt ++;<br>&#125;<br></code></pre></td></tr></table></figure><p>在用户态程序，通过读取<code>tx_q</code>和<code>rx_q</code>这两个map，得到单位时间内的总的字节数和包数，与该时间进行除法运算得到BPS和PPS</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">table = b[<span class="hljs-string">&#x27;tx_q&#x27;</span>] <span class="hljs-comment">#或b[&#x27;rx_q&#x27;]</span><br><br><span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> table.items():<br>qids += [k.value]<br>tlen += v.total_pkt_len<br>tpkt += v.num_pkt<br><br>tBPS = tlen / print_interval<br>tPPS = tpkt / print_interval<br></code></pre></td></tr></table></figure><h4 id="4-3-结果展示与分析"><a href="#4-3-结果展示与分析" class="headerlink" title="4.3 结果展示与分析"></a>4.3 结果展示与分析</h4><p>nic_throughput与sar同时进行输出，如图所示。在同一时间点上，对比nic_throughput的数据和sar的数据输出是不同的，尤其是BPS。</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/image-6197078.png" alt="image" style="zoom:80%;"><p>结果的不同是由于数据来源的不同。sar工具的数据来源（DEV参数）是<code>/proc/net/dev</code>，如图所示。</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/image-20230212144030451.png" alt="image-20230212144030451" style="zoom:80%;"><p>从内核中寻找数据来源</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* net/core/net-procfs.c */</span><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seq_operations</span> <span class="hljs-title">dev_seq_ops</span> =</span> &#123;<br>.start = dev_seq_start,<br>.next  = dev_seq_next,<br>.stop  = dev_seq_stop,<br>.show  = dev_seq_show, <span class="hljs-comment">//show方法</span><br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">dev_seq_show</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> seq_file *seq, <span class="hljs-type">void</span> *v)</span><br>&#123;<br><span class="hljs-keyword">if</span> (v == SEQ_START_TOKEN)<br>seq_puts(seq, <span class="hljs-string">&quot;Inter-|   Receive                            &quot;</span><br>      <span class="hljs-string">&quot;                    |  Transmit\n&quot;</span><br>      <span class="hljs-string">&quot; face |bytes    packets errs drop fifo frame &quot;</span><br>      <span class="hljs-string">&quot;compressed multicast|bytes    packets errs &quot;</span><br>      <span class="hljs-string">&quot;drop fifo colls carrier compressed\n&quot;</span>); <span class="hljs-comment">//表头</span><br><span class="hljs-keyword">else</span><br>dev_seq_printf_stats(seq, v); <span class="hljs-comment">//数据从此打印</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">dev_seq_printf_stats</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> seq_file *seq, <span class="hljs-keyword">struct</span> net_device *dev)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rtnl_link_stats64</span> <span class="hljs-title">temp</span>;</span><br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rtnl_link_stats64</span> *<span class="hljs-title">stats</span> =</span> dev_get_stats(dev, &amp;temp); <span class="hljs-comment">//数据来源</span><br><br>seq_printf(seq, <span class="hljs-string">&quot;%6s: %7llu %7llu %4llu %4llu %4llu %5llu %10llu %9llu &quot;</span><br>   <span class="hljs-string">&quot;%8llu %7llu %4llu %4llu %4llu %5llu %7llu %10llu\n&quot;</span>,<br>   dev-&gt;name, stats-&gt;rx_bytes, stats-&gt;rx_packets,<br>   stats-&gt;tx_bytes, stats-&gt;tx_packets,<br>   stats-&gt;tx_errors, stats-&gt;tx_dropped,<br>   ...<br>&#125;<br><br><span class="hljs-comment">/* net/core/dev.c */</span><br><br><span class="hljs-keyword">struct</span> rtnl_link_stats64 *dev_get_stats(<span class="hljs-keyword">struct</span> net_device *dev,<br><span class="hljs-keyword">struct</span> rtnl_link_stats64 *storage)<br>&#123;<br><span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> net_device_ops *ops = dev-&gt;netdev_ops;<br><br><span class="hljs-keyword">if</span> (ops-&gt;ndo_get_stats64) &#123; <span class="hljs-comment">//数据来源</span><br><span class="hljs-built_in">memset</span>(storage, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(*storage));<br>ops-&gt;ndo_get_stats64(dev, storage);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ops-&gt;ndo_get_stats) &#123;<br>netdev_stats_to_stats64(storage, ops-&gt;ndo_get_stats(dev));<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>netdev_stats_to_stats64(storage, &amp;dev-&gt;stats);<br>&#125;<br>storage-&gt;rx_dropped += (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)atomic_long_read(&amp;dev-&gt;rx_dropped);<br>storage-&gt;tx_dropped += (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)atomic_long_read(&amp;dev-&gt;tx_dropped);<br>storage-&gt;rx_nohandler += (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)atomic_long_read(&amp;dev-&gt;rx_nohandler);<br><span class="hljs-keyword">return</span> storage;<br>&#125;<br>EXPORT_SYMBOL(dev_get_stats);<br></code></pre></td></tr></table></figure><p>这里<code>ndo_get_stats</code>和<code>ndo_get_stats64</code>需要网卡驱动程序实现，以ixgbe网卡驱动为例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* drivers/net/ethernet/intel/ixgbe/ixgbe_main.c */</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">net_device_ops</span> <span class="hljs-title">ixgbe_netdev_ops</span> =</span> &#123;<br>.ndo_open= ixgbe_open,<br>.ndo_stop= ixgbe_close,<br>.ndo_start_xmit= ixgbe_xmit_frame,<br>...<br>.ndo_get_stats64= ixgbe_get_stats64, <span class="hljs-comment">//数据来源</span><br>...<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> ixgbe_get_stats64(<span class="hljs-keyword">struct</span> net_device *netdev,<br>      <span class="hljs-keyword">struct</span> rtnl_link_stats64 *stats)<br>&#123;<br><span class="hljs-keyword">struct</span> ixgbe_adapter *adapter = netdev_priv(netdev);<br><span class="hljs-type">int</span> i;<br><br>rcu_read_lock();<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; adapter-&gt;num_rx_queues; i++) &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ixgbe_ring</span> *<span class="hljs-title">ring</span> =</span> READ_ONCE(adapter-&gt;rx_ring[i]);<br>u64 bytes, packets;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> start;<br><br><span class="hljs-keyword">if</span> (ring) &#123;<br><span class="hljs-keyword">do</span> &#123;<br>start = u64_stats_fetch_begin_irq(&amp;ring-&gt;syncp);<br>packets = ring-&gt;stats.packets;<br>bytes   = ring-&gt;stats.bytes; <span class="hljs-comment">//从ixgbe网卡的ixgbe_ring结构中取得</span><br>&#125; <span class="hljs-keyword">while</span> (u64_stats_fetch_retry_irq(&amp;ring-&gt;syncp, start));<br>stats-&gt;rx_packets += packets;<br>stats-&gt;rx_bytes   += bytes;<br>&#125;<br>&#125;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看出，在ixgbe网卡的最终数据是从<code>ixgbe_ring</code>结构中得到的，而写这个数据的是<code>ixgbe_clean_tx_irq</code>、<code>ixgbe_clean_rx_irq</code>两个函数，而这两个函数正是<code>ixgbe_poll</code>TX和RX队列处理函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* drivers/net/ethernet/intel/ixgbe/ixgbe_main.c */</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title function_">ixgbe_clean_tx_irq</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ixgbe_q_vector *q_vector,</span><br><span class="hljs-params">       <span class="hljs-keyword">struct</span> ixgbe_ring *tx_ring, <span class="hljs-type">int</span> napi_budget)</span><br>&#123;<br>  ...<br>tx_ring-&gt;stats.bytes += total_bytes;<br>tx_ring-&gt;stats.packets += total_packets;<br>  ...<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ixgbe_clean_rx_irq</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ixgbe_q_vector *q_vector,</span><br><span class="hljs-params">       <span class="hljs-keyword">struct</span> ixgbe_ring *rx_ring,</span><br><span class="hljs-params">       <span class="hljs-type">const</span> <span class="hljs-type">int</span> budget)</span><br>&#123;<br>  ...<br>  rx_ring-&gt;stats.packets += total_rx_packets;<br>rx_ring-&gt;stats.bytes += total_rx_bytes;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><p>所以，可以看出，二者数据不同的原因是数据源不同。eBPF程序使用tracepoint静态跟踪点统计<code>sk_buff</code>结构中的<code>len</code>字段，而通过sar等传统工具利用的proc文件系统下的<code>net/dev</code>文件数据来源于设备驱动，而这个数据是网卡设备统计的，与tracepoint跟踪点不在一个层面，所以数据值不同。</p>]]></content>
    
    
    
    <tags>
      
      <tag>网络</tag>
      
      <tag>合作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux网络延迟诊断工具</title>
    <link href="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%BB%B6%E8%BF%9F%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7/"/>
    <url>/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%BB%B6%E8%BF%9F%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h2 id="网络延迟工具"><a href="#网络延迟工具" class="headerlink" title="网络延迟工具"></a>网络延迟工具</h2><blockquote><p>整理目前通用的以太网延迟诊断工具，及简述实现原理。</p></blockquote><h3 id="1-ping"><a href="#1-ping" class="headerlink" title="1. ping"></a>1. ping</h3><p>最常用的网络工具之一，用于测试主机与目标主机之间的网络连接是否正常，以及网络延迟。</p><p>测量原理：发送ICMP报文来测试网络连接与延迟，并能够显示每个ICMP报文的往返时间（RTT）</p><ol><li>客户端发送一个ICMP Echo Request消息到目标主机。</li><li>目标主机收到ICMP Echo Request消息后，返回一个ICMP Echo Reply消息。</li><li>客户端收到ICMP Echo Reply消息后，计算出往返时间（RTT），并显示出来</li></ol><p>优势：简单易用，通用性强</p><p>局限性：</p><ol><li>只能获得RTT时间，粒度较粗</li><li>延迟时间为测试主机IP层到目标主机IP层时间（ICMP – ICMP）</li><li>可以很好的测试物理网络连通性与网络状态，但不能跟踪实际数据包的时间延迟，也无法获取TCP层、应用层乃至应用的时延。</li></ol><blockquote><ol><li>局域网的连通性测试工具还有 arping，其原理是通过发送ARP请求来获得目标设备的MAC地址，并测试网络的连通性</li><li>追踪网络数据包的路由路径可以使用 traceroute</li></ol></blockquote><h3 id="2-wireshark"><a href="#2-wireshark" class="headerlink" title="2. wireshark"></a>2. wireshark</h3><p>侧重于流量分析</p><h3 id="3-iperf"><a href="#3-iperf" class="headerlink" title="3. iperf"></a>3. <a href="https://linux.die.net/man/1/iperf">iperf</a></h3><blockquote><p><a href="https://blog.51cto.com/u_15127599/4202824">iperf网络性能测试工具</a></p></blockquote><p>iperf是一个网络性能测试工具。Iperf可以测试TCP和UDP带宽质量。iperf可以测量最大TCP带宽，具有多种参数和UDP特性。 iperf可以报告带宽，延迟抖动和数据包丢失。</p><p>抖动和丢包率适应于UDP测试，带宽测试适用与TCP与UDP。</p><p>需要服务端与客户端同时开启 iperf 程序。</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%BB%B6%E8%BF%9F%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7/image-20230329104110311.png" class title="image1"><p>​带宽测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># UDP测试 带宽  Jitter抖动  丢包率</span><br>[ 3] <span class="hljs-built_in">local</span> 192.168.1.1 port 2152 connected with 192.168.101.2 port 56768<br>[ ID] Interval      Transfer    Bandwidth       Jitter  Lost/Total Datagrams<br>[ 3] 0.0- 1.0 sec 1.40 MBytes 11.7 Mbits/sec  0.069 ms   0/14671 (0%)<br>[ 3] 1.0- 2.0 sec 1.40 MBytes 11.8 Mbits/sec  0.050 ms   0/14703 (0%)<br>[ 3] 2.0- 3.0 sec 1.40 MBytes 11.8 Mbits/sec  0.052 ms   0/14708 (0%)<br>[ 3] 3.0- 4.0 sec 1.40 MBytes 11.8 Mbits/sec  0.057 ms   0/14704 (0%)<br>[ 3] 4.0- 5.0 sec 1.40 MBytes 11.8 Mbits/sec  0.072 ms   0/14706 (0%)<br>[ 3] 5.0- 6.0 sec 1.40 MBytes 11.8 Mbits/sec  0.075 ms   0/14705 (0%)<br>[ 3] 6.0- 7.0 sec 1.40 MBytes 11.8 Mbits/sec  0.060 ms   0/14707 (0%)<br>[ 3] 7.0- 8.0 sec 1.40 MBytes 11.8 Mbits/sec  0.073 ms   0/14703 (0%)<br>[ 3] 8.0- 9.0 sec 1.40 MBytes 11.8 Mbits/sec  0.073 ms   0/14706 (0%)<br>[ 3] 0.0-10.0 sec 14.0 MBytes 11.8 Mbits/sec  0.064 ms   0/147020 (0%)<br></code></pre></td></tr></table></figure><h3 id="4-netperf"><a href="#4-netperf" class="headerlink" title="4. netperf"></a>4. <a href="https://github.com/HewlettPackard/netperf">netperf</a></h3><p>Netperf 是一个基准，可用于衡量许多不同类型网络的性能。它为单向吞吐量和端到端延迟提供测试。</p><p>原理：TCP_RR（TCP Request-Response）测试模式来测量端到端的时间延迟</p><p>需要服务端与客户端同时开启 iperf 程序。</p><h3 id="5-qperf"><a href="#5-qperf" class="headerlink" title="5. qperf"></a>5. <a href="https://github.com/linux-rdma/qperf">qperf</a></h3><blockquote><p><a href="https://blog.csdn.net/notbaron/article/details/75949630">网络性能测试工具qperf使用</a></p></blockquote><p>测量网络带宽与时延，亮点在于可以测 RDMA。</p><p>需要服务端与客户端同时开启 qperf 程序。</p><p>原理：pingpong测试</p><p>tcp_lat：TCP单向延迟</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%BB%B6%E8%BF%9F%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7/image-20230329131135507.png" class title="image2"><p>​获取网络的带宽和延时性能曲线（消息大小 1byte -&gt; 64K， 每次翻倍，循环获取延迟与带宽）</p><h3 id="6-nmap"><a href="#6-nmap" class="headerlink" title="6. nmap"></a>6. <a href="https://github.com/nmap/nmap">nmap</a></h3><p>四层主机发现工具</p><p>Nmap是一款广泛使用的网络扫描和安全评估工具，它可以帮助用户识别和探测目标网络上的主机和服务，从而帮助用户评估网络的安全性。Nmap支持多种扫描技术，如TCP、UDP、ICMP等协议的扫描，可以通过不同的选项和参数来灵活地控制扫描的范围和方式。</p><h3 id="7-hping3"><a href="#7-hping3" class="headerlink" title="7. hping3"></a>7. <a href="https://wangchujiang.com/linux-command/c/hping3.html">hping3</a></h3><p>四层主机发现工具</p><p>hping3是一款基于TCP&#x2F;IP协议栈的网络安全工具，可以对TCP、UDP、ICMP等协议进行探测和攻击。</p><p>其原理是构造控制报文，向目标主机发送探测包，根据目标主机返回的响应信息进行分析和判断。hping3可以自定义TCP、UDP、ICMP等协议的报文头和数据，以实现不同的攻击和探测。</p><h3 id="8-应用层RTT测量"><a href="#8-应用层RTT测量" class="headerlink" title="8. 应用层RTT测量"></a>8. 应用层RTT测量</h3><p>如http的RTT测量等</p><p>商业工具</p><h3 id="9-albedo-xGenius以太网测试仪"><a href="#9-albedo-xGenius以太网测试仪" class="headerlink" title="9. albedo xGenius以太网测试仪"></a>9. albedo xGenius以太网测试仪</h3><p><a href="https://www.coolshark.com/products/albedo.html">https://www.coolshark.com/products/albedo.html</a></p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%BB%B6%E8%BF%9F%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7/image-20230328100238890.png" class title="image3"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以太网延迟测量主要分为2种方式，分别为RTDP与OWDP。</p><ul><li>RTDP网络测试方式应用最为广泛，其原理是RTT往返时间测量，网络上存在大量的类似工具。另外通过RTT也可以简单估计单向延迟。</li><li>OWDP（One way delay and package loss protocol）是一种单向延迟测量方法，由于其局限性较高，因此网络上的可用工具非常少。</li></ul><p>OWDP缺点：</p><ol><li>需要精确时钟同步，测量精度与时钟同步精度有关。</li><li>需要多终端同时安装与运行程序，高复杂网络下实现代价太高。</li></ol><p>OWDP优点：</p><ol><li>测量精度高，适用于进行精度要求很高的实时性检测。</li></ol><p>车载以太网自身的特点：</p><p>针对缺点1：TSN时间敏感网络实际解决了时钟同步问题（精度250 us）</p><p>针对缺点2：车载以太网趋近于一个简单静态网络，网络拓扑简单。</p><p>针对优点1：车载网络针对实时性，具有很高的要求。</p>]]></content>
    
    
    
    <tags>
      
      <tag>网络</tag>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
