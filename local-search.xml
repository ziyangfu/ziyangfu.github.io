<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>GCC预处理C_C++的默认搜索路径</title>
    <link href="/2023/05/25/GCC%E9%A2%84%E5%A4%84%E7%90%86C-C-%E7%9A%84%E9%BB%98%E8%AE%A4%E6%90%9C%E7%B4%A2%E8%B7%AF%E5%BE%84/"/>
    <url>/2023/05/25/GCC%E9%A2%84%E5%A4%84%E7%90%86C-C-%E7%9A%84%E9%BB%98%E8%AE%A4%E6%90%9C%E7%B4%A2%E8%B7%AF%E5%BE%84/</url>
    
    <content type="html"><![CDATA[<h1 id="GCC预处理C-x2F-C-的默认搜索路径"><a href="#GCC预处理C-x2F-C-的默认搜索路径" class="headerlink" title="GCC预处理C&#x2F;C++的默认搜索路径"></a>GCC预处理C&#x2F;C++的默认搜索路径</h1><p> 预处理C时的搜索目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -x c -v -E -<br></code></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">Using built-in specs.<br>COLLECT_GCC=gcc<br>OFFLOAD_TARGET_NAMES=nvptx-none:hsa<br>OFFLOAD_TARGET_DEFAULT=1<br>Target: x86_64-linux-gnu<br>Configured with: ../src/configure -v --with-pkgversion=<span class="hljs-string">&#x27;Ubuntu 9.4.0-1ubuntu1~20.04.1&#x27;</span> --with-bugurl=file:///usr/share/doc/gcc-9/README.Bugs --enable-languages=c,ada,c++,go,brig,d,fortran,objc,obj-c++,gm2 --prefix=/usr --with-gcc-major-version-only --program-suffix=-9 --program-prefix=x86_64-linux-gnu- --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=<span class="hljs-built_in">yes</span> --with-default-libstdcxx-abi=new --enable-gnu-unique-object --disable-vtable-verify --enable-plugin --enable-default-pie --with-system-zlib --with-target-system-zlib=auto --enable-objc-gc=auto --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --enable-multilib --with-tune=generic --enable-offload-targets=nvptx-none=/build/gcc-9-Av3uEd/gcc-9-9.4.0/debian/tmp-nvptx/usr,hsa --without-cuda-driver --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu<br>Thread model: posix<br>gcc version 9.4.0 (Ubuntu 9.4.0-1ubuntu1~20.04.1) <br>COLLECT_GCC_OPTIONS=<span class="hljs-string">&#x27;-v&#x27;</span> <span class="hljs-string">&#x27;-E&#x27;</span> <span class="hljs-string">&#x27;-mtune=generic&#x27;</span> <span class="hljs-string">&#x27;-march=x86-64&#x27;</span><br> /usr/lib/gcc/x86_64-linux-gnu/9/cc1 -E -quiet -v -imultiarch x86_64-linux-gnu - -mtune=generic -march=x86-64 -fasynchronous-unwind-tables -fstack-protector-strong -Wformat -Wformat-security -fstack-clash-protection -fcf-protection<br>ignoring nonexistent directory <span class="hljs-string">&quot;/usr/local/include/x86_64-linux-gnu&quot;</span><br>ignoring nonexistent directory <span class="hljs-string">&quot;/usr/lib/gcc/x86_64-linux-gnu/9/include-fixed&quot;</span><br>ignoring nonexistent directory <span class="hljs-string">&quot;/usr/lib/gcc/x86_64-linux-gnu/9/../../../../x86_64-linux-gnu/include&quot;</span><br><span class="hljs-comment">#include &quot;...&quot; search starts here:</span><br><span class="hljs-comment">#include &lt;...&gt; search starts here:</span><br> /usr/lib/gcc/x86_64-linux-gnu/9/include<br> /usr/local/include<br> /usr/include/x86_64-linux-gnu<br> /usr/include<br>End of search list.<br></code></pre></td></tr></table></figure><p> 预处理C++时的搜索目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -x c++ -v -E -<br></code></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">Using built-in specs.<br>COLLECT_GCC=gcc<br>OFFLOAD_TARGET_NAMES=nvptx-none:hsa<br>OFFLOAD_TARGET_DEFAULT=1<br>Target: x86_64-linux-gnu<br>Configured with: ../src/configure -v --with-pkgversion=<span class="hljs-string">&#x27;Ubuntu 9.4.0-1ubuntu1~20.04.1&#x27;</span> --with-bugurl=file:///usr/share/doc/gcc-9/README.Bugs --enable-languages=c,ada,c++,go,brig,d,fortran,objc,obj-c++,gm2 --prefix=/usr --with-gcc-major-version-only --program-suffix=-9 --program-prefix=x86_64-linux-gnu- --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=<span class="hljs-built_in">yes</span> --with-default-libstdcxx-abi=new --enable-gnu-unique-object --disable-vtable-verify --enable-plugin --enable-default-pie --with-system-zlib --with-target-system-zlib=auto --enable-objc-gc=auto --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --enable-multilib --with-tune=generic --enable-offload-targets=nvptx-none=/build/gcc-9-Av3uEd/gcc-9-9.4.0/debian/tmp-nvptx/usr,hsa --without-cuda-driver --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu<br>Thread model: posix<br>gcc version 9.4.0 (Ubuntu 9.4.0-1ubuntu1~20.04.1) <br>COLLECT_GCC_OPTIONS=<span class="hljs-string">&#x27;-v&#x27;</span> <span class="hljs-string">&#x27;-E&#x27;</span> <span class="hljs-string">&#x27;-mtune=generic&#x27;</span> <span class="hljs-string">&#x27;-march=x86-64&#x27;</span><br> /usr/lib/gcc/x86_64-linux-gnu/9/cc1plus -E -quiet -v -imultiarch x86_64-linux-gnu -D_GNU_SOURCE - -mtune=generic -march=x86-64 -fasynchronous-unwind-tables -fstack-protector-strong -Wformat -Wformat-security -fstack-clash-protection -fcf-protection<br>ignoring duplicate directory <span class="hljs-string">&quot;/usr/include/x86_64-linux-gnu/c++/9&quot;</span><br>ignoring nonexistent directory <span class="hljs-string">&quot;/usr/local/include/x86_64-linux-gnu&quot;</span><br>ignoring nonexistent directory <span class="hljs-string">&quot;/usr/lib/gcc/x86_64-linux-gnu/9/include-fixed&quot;</span><br>ignoring nonexistent directory <span class="hljs-string">&quot;/usr/lib/gcc/x86_64-linux-gnu/9/../../../../x86_64-linux-gnu/include&quot;</span><br><span class="hljs-comment">#include &quot;...&quot; search starts here:</span><br><span class="hljs-comment">#include &lt;...&gt; search starts here:</span><br> /usr/include/c++/9<br> /usr/include/x86_64-linux-gnu/c++/9<br> /usr/include/c++/9/backward<br> /usr/lib/gcc/x86_64-linux-gnu/9/include<br> /usr/local/include<br> /usr/include/x86_64-linux-gnu<br> /usr/include<br>End of search list.<br></code></pre></td></tr></table></figure><p>参考资料</p><p><a href="https://blog.csdn.net/weixin_44327262/article/details/105860213">详解Linux下环境变量C_INCLUDE_PATH、CPLUS_INCLUDE_PATH、CPATH以及常见错误</a></p><p><a href="https://blog.sciencenet.cn/home.php?mod=space&uid=323317&do=blog&id=1262940">Linux INCLUDE与LIB环境变量</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>编译与链接</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux网络协议栈TCP优化选项</title>
    <link href="/2023/05/18/Linux%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88TCP%E4%BC%98%E5%8C%96%E9%80%89%E9%A1%B9/"/>
    <url>/2023/05/18/Linux%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88TCP%E4%BC%98%E5%8C%96%E9%80%89%E9%A1%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux网络协议栈TCP优化选项"><a href="#Linux网络协议栈TCP优化选项" class="headerlink" title="Linux网络协议栈TCP优化选项"></a>Linux网络协议栈TCP优化选项</h1><p>TODO:</p><p>网络协议栈优化第一步：<strong>调参</strong></p><p>目的：列出Linux协议栈中关于TCP优化选项含义</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看</span><br><span class="hljs-built_in">cat</span> /proc/sys/net/ipv4/tcp*<br><span class="hljs-comment"># 设置</span><br>sysctl net.ipv4.tcp_*<br></code></pre></td></tr></table></figure><h2 id="TCP选项"><a href="#TCP选项" class="headerlink" title="TCP选项"></a>TCP选项</h2><table><thead><tr><th>序号</th><th>参数</th><th>含义</th></tr></thead><tbody><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://www.51cto.com/article/700418.html">Linux上TCP的几个内核参数调优</a></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>网络</tag>
      
      <tag>整合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从Linux内核看TCP重传机制</title>
    <link href="/2023/05/16/%E4%BB%8ELinux%E5%86%85%E6%A0%B8%E7%9C%8BTCP%E9%87%8D%E4%BC%A0%E6%9C%BA%E5%88%B6/"/>
    <url>/2023/05/16/%E4%BB%8ELinux%E5%86%85%E6%A0%B8%E7%9C%8BTCP%E9%87%8D%E4%BC%A0%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="从Linux内核看TCP重传机制"><a href="#从Linux内核看TCP重传机制" class="headerlink" title="从Linux内核看TCP重传机制"></a>从Linux内核看TCP重传机制</h1><h2 id="0-工作计划"><a href="#0-工作计划" class="headerlink" title="0. 工作计划"></a>0. 工作计划</h2><p><strong>2023.05.15~19</strong></p><p>本周工作：</p><ul><li>会议决议每人负责一个底层方向，目前我的方向为TCP重传与丢包</li><li>查找TCP重传机制的相关资料</li></ul><p>下一步计划：</p><ul><li>分析TCP重传的三种机制及在Linux中的实现</li><li>使用传统工具以及现有的eBPF工具，观测性能参数</li><li>分析<code>/proc/sys/net/ipv4/</code>下面涉及TCP的参数含义，以及了解如何通过参数配置进行网络调优（特化）</li></ul><hr><h2 id="1-TCP重传机制原理简述"><a href="#1-TCP重传机制原理简述" class="headerlink" title="1. TCP重传机制原理简述"></a>1. TCP重传机制原理简述</h2><p>关于TCP重传机制的阐述，网络上有大量的优质文章，读者可以搜索查阅。为了文章的完整性，本文仅做概述。</p><p>TCP重传机制具有以下几种方法：</p><ul><li><p>基于计时器的重传（超时重传）</p></li><li><p>快重传（Fast Retransmit）</p></li><li><p>选择重传</p><ul><li>选择性确认方法（Selective Acknowledgment，SACK）</li><li>Duplicate SACK</li></ul></li></ul><h3 id="1-1-超时重传"><a href="#1-1-超时重传" class="headerlink" title="1.1 超时重传"></a>1.1 超时重传</h3><p>关于超时重传，即数据发送时计时，若指定超时重传时间（Retransmission Timeout，RTO）范围内，没有收到ACK确认应答报文，将触发超时重传机制，重新发送该数据包。</p><ul><li>RTO不固定，根据网络延迟，动态调整</li><li>调整与RTT（Round Trip Time）往返时间有关</li></ul><img src="/2023/05/16/%E4%BB%8ELinux%E5%86%85%E6%A0%B8%E7%9C%8BTCP%E9%87%8D%E4%BC%A0%E6%9C%BA%E5%88%B6/image-20230518093143094.png" alt="image-20230518093143094" style="zoom:40%;"><h3 id="1-2-快重传"><a href="#1-2-快重传" class="headerlink" title="1.2 快重传"></a>1.2 快重传</h3><p>快重传是TCP协议在特定情况下的一种优化重传机制，当TCP发送方连续收到三个相同的确认，就会认为这个报文是丢失了而不是延迟，此时会立即进行重传，从而减少等待超时时间的长短，提高重传的速度和效率。</p><h3 id="1-3-选择重传"><a href="#1-3-选择重传" class="headerlink" title="1.3 选择重传"></a>1.3 选择重传</h3><p>SACK是TCP协议引入的一种优化重传的机制，它可以在数据包中带上一个SACK选项，记录已经成功接收的数据及缺失的数据段的起止位置。这样当TCP重传时，可以精确指定要重传的数据包，从而避免重传已经成功接收的数据包，减少网络拥塞和提高传输效率。</p><p>D-SACK（Duplicate SACK）是SACK的一个改进，它可以记录重复的SACK块，即探测到的丢失数据块的段在后续的确认中又会出现。D-SACK在与SACK一起使用时，主要解决某些复杂情况下SACK的不足，例如在网络重传造成新段落结构时，SACK存在可能会指示不正确的段。</p><h2 id="2-Linux内核网络协议栈重传机制实现"><a href="#2-Linux内核网络协议栈重传机制实现" class="headerlink" title="2. Linux内核网络协议栈重传机制实现"></a>2. Linux内核网络协议栈重传机制实现</h2><h3 id="2-1-TCP关键参数"><a href="#2-1-TCP关键参数" class="headerlink" title="2.1 TCP关键参数"></a>2.1 TCP关键参数</h3><p>SYN重传次数<code>tcp_syn_retries</code></p><p>SYN-ACK重传次数<code>tcp_synack_retries</code></p><p>SYN包队列<code>tcp_max_syn_backlog</code></p><p>丢包率</p><p>超时重传时间</p><p>重传队列</p><h3 id="2-2-TCP重传机制的实现"><a href="#2-2-TCP重传机制的实现" class="headerlink" title="2.2 TCP重传机制的实现"></a>2.2 TCP重传机制的实现</h3><p>通过跟踪数据包重传的路线，理解Linux网络协议栈的具体实现。</p><blockquote><p>Linux内核版本：5.10.90</p></blockquote><h4 id="2-2-1-超时重传"><a href="#2-2-1-超时重传" class="headerlink" title="2.2.1 超时重传"></a>2.2.1 超时重传</h4><h5 id="2-2-1-1-RTO的范围"><a href="#2-2-1-1-RTO的范围" class="headerlink" title="2.2.1.1 RTO的范围"></a>2.2.1.1 RTO的范围</h5><p>超时重传时间最大最小值的计算与<code>HZ</code>有关。<code>HZ</code>的由<code>CONFIG_HZ</code>设置，如下所示，目前这台X64主机的<code>CONFIG_HZ</code>为250，可以修改设置为100，300以及1000等。若用户不设置，则默认是100。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">fzy@fzy-Lenovo:~$ <span class="hljs-built_in">cat</span> /boot/config-5.15.0-72-generic | grep CONFIG_HZ<br><span class="hljs-comment"># CONFIG_HZ_PERIODIC is not set</span><br><span class="hljs-comment"># CONFIG_HZ_100 is not set</span><br>CONFIG_HZ_250=y<br><span class="hljs-comment"># CONFIG_HZ_300 is not set</span><br><span class="hljs-comment"># CONFIG_HZ_1000 is not set</span><br>CONFIG_HZ=250<br><br></code></pre></td></tr></table></figure><p>因此， 超时重传时间的最小值为50ms，最大为30s。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// include/net/tcp.h</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TCP_RTO_MAX((unsigned)(120*HZ))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TCP_RTO_MIN((unsigned)(HZ/5))</span><br></code></pre></td></tr></table></figure><h5 id="2-2-1-2-重传计时器"><a href="#2-2-1-2-重传计时器" class="headerlink" title="2.2.1.2 重传计时器"></a>2.2.1.2 重传计时器</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*!</span><br><span class="hljs-comment">创建流程图， from 内核之旅</span><br><span class="hljs-comment">sk-&gt;sk_prot-&gt;init --指向--&gt; tcp_v4_init_sock(这里以tcp v4 为例)</span><br><span class="hljs-comment">|---&gt;tcp_init_sock</span><br><span class="hljs-comment">   |---&gt;tcp_init_xmit_timers</span><br><span class="hljs-comment">   |-----&gt;inet_csk_init_xmit_timers</span><br><span class="hljs-comment">   |       |------timer_setup</span><br><span class="hljs-comment">   |-----&gt;hrtimer_init</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// net/ipv4/tcp_timer.c</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">tcp_write_timer</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> timer_list *t)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inet_connection_sock</span> *<span class="hljs-title">icsk</span> =</span><br>from_timer(icsk, t, icsk_retransmit_timer);<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sock</span> *<span class="hljs-title">sk</span> =</span> &amp;icsk-&gt;icsk_inet.sk;<br><br>bh_lock_sock(sk);<br><span class="hljs-keyword">if</span> (!sock_owned_by_user(sk)) &#123;<br>tcp_write_timer_handler(sk);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">/* delegate our work to tcp_release_cb() */</span><br><span class="hljs-keyword">if</span> (!test_and_set_bit(TCP_WRITE_TIMER_DEFERRED, &amp;sk-&gt;sk_tsq_flags))<br>sock_hold(sk);<br>&#125;<br>bh_unlock_sock(sk);<br>sock_put(sk);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// include/net/inet_connection_sock.h</span><br><span class="hljs-comment">/** inet_connection_sock - INET connection oriented sock</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @icsk_accept_queue:   FIFO of established children</span><br><span class="hljs-comment"> * @icsk_bind_hash:   Bind node</span><br><span class="hljs-comment"> * @icsk_timeout:   Timeout</span><br><span class="hljs-comment"> * @icsk_retransmit_timer: Resend (no ack)</span><br><span class="hljs-comment"> * @icsk_rto:   Retransmit timeout</span><br><span class="hljs-comment"> * @icsk_pmtu_cookie   Last pmtu seen by socket</span><br><span class="hljs-comment"> * @icsk_ca_ops   Pluggable congestion control hook</span><br><span class="hljs-comment"> * @icsk_af_ops   Operations which are AF_INET&#123;4,6&#125; specific</span><br><span class="hljs-comment"> * @icsk_ulp_ops   Pluggable ULP control hook</span><br><span class="hljs-comment"> * @icsk_ulp_data   ULP private data</span><br><span class="hljs-comment"> * @icsk_clean_acked   Clean acked data hook</span><br><span class="hljs-comment"> * @icsk_listen_portaddr_nodehash to the portaddr listener hashtable</span><br><span class="hljs-comment"> * @icsk_ca_state:   Congestion control state</span><br><span class="hljs-comment"> * @icsk_retransmits:   Number of unrecovered [RTO] timeouts</span><br><span class="hljs-comment"> * @icsk_pending:   Scheduled timer event</span><br><span class="hljs-comment"> * @icsk_backoff:   Backoff</span><br><span class="hljs-comment"> * @icsk_syn_retries:      Number of allowed SYN (or equivalent) retries</span><br><span class="hljs-comment"> * @icsk_probes_out:   unanswered 0 window probes</span><br><span class="hljs-comment"> * @icsk_ext_hdr_len:   Network protocol overhead (IP/IPv6 options)</span><br><span class="hljs-comment"> * @icsk_ack:   Delayed ACK control data</span><br><span class="hljs-comment"> * @icsk_mtup;   MTU probing control data</span><br><span class="hljs-comment"> * @icsk_probes_tstamp:    Probe timestamp (cleared by non-zero window ack)</span><br><span class="hljs-comment"> * @icsk_user_timeout:   TCP_USER_TIMEOUT value</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inet_connection_sock</span> &#123;</span><br><span class="hljs-comment">/* inet_sock has to be the first member! */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inet_sock</span>  <span class="hljs-title">icsk_inet</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">request_sock_queue</span> <span class="hljs-title">icsk_accept_queue</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inet_bind_bucket</span>  *<span class="hljs-title">icsk_bind_hash</span>;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>  icsk_timeout;<br> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timer_list</span>  <span class="hljs-title">icsk_retransmit_timer</span>;</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-2-快重传"><a href="#2-2-2-快重传" class="headerlink" title="2.2.2 快重传"></a>2.2.2 快重传</h4><h4 id="2-2-3-SACK与D-SACK"><a href="#2-2-3-SACK与D-SACK" class="headerlink" title="2.2.3 SACK与D-SACK"></a>2.2.3 SACK与D-SACK</h4><h2 id="3-如何观测重传关键参数"><a href="#3-如何观测重传关键参数" class="headerlink" title="3. 如何观测重传关键参数"></a>3. 如何观测重传关键参数</h2><h3 id="3-1-传统工具"><a href="#3-1-传统工具" class="headerlink" title="3.1 传统工具"></a>3.1 传统工具</h3><h3 id="3-2-现有eBPF技术工具"><a href="#3-2-现有eBPF技术工具" class="headerlink" title="3.2 现有eBPF技术工具"></a>3.2 现有eBPF技术工具</h3><h3 id="3-3-开发采用eBPF技术的小工具"><a href="#3-3-开发采用eBPF技术的小工具" class="headerlink" title="3.3 开发采用eBPF技术的小工具"></a>3.3 开发采用eBPF技术的小工具</h3><p>&#x3D;&#x3D;若有必要&#x3D;&#x3D;</p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><h2 id="5-参考资料"><a href="#5-参考资料" class="headerlink" title="5. 参考资料"></a>5. 参考资料</h2><ol><li><a href="https://zhuanlan.zhihu.com/p/101702312">详解 TCP 超时与重传机制</a></li><li><a href="http://kerneltravel.net/blog/2020/retransmit_timer/">TCP超时重传定时器</a>【内核之旅，推荐】</li><li><a href="http://kerneltravel.net/blog/2020/tcpconnlat/">TCP连接延时</a></li><li><a href="https://blog.csdn.net/wangquan1992/article/details/109088299">linux协议栈 TCP定时器之超时重传定时器</a></li><li><a href="https://www.linuxprobe.com/tcp-retransmission.html">详说TCP重传问题的排查思路与实践</a></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>网络</tag>
      
      <tag>原创</tag>
      
      <tag>Linux内核</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据分发服务开源实现FastDDS</title>
    <link href="/2023/05/15/%E6%95%B0%E6%8D%AE%E5%88%86%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%BC%80%E6%BA%90%E5%AE%9E%E7%8E%B0FastDDS/"/>
    <url>/2023/05/15/%E6%95%B0%E6%8D%AE%E5%88%86%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%BC%80%E6%BA%90%E5%AE%9E%E7%8E%B0FastDDS/</url>
    
    <content type="html"><![CDATA[<h1 id="数据分发服务开源实现FastDDS"><a href="#数据分发服务开源实现FastDDS" class="headerlink" title="数据分发服务开源实现FastDDS"></a>数据分发服务开源实现FastDDS</h1><blockquote><p><a href="https://fast-dds.docs.eprosima.com/en/latest/index.html">fastDDS 官方文档</a></p></blockquote><h3 id="1-编译安装"><a href="#1-编译安装" class="headerlink" title="1. 编译安装"></a>1. 编译安装</h3><img src="/2023/05/15/%E6%95%B0%E6%8D%AE%E5%88%86%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%BC%80%E6%BA%90%E5%AE%9E%E7%8E%B0FastDDS/image-20230515132605181.png" alt="image-20230515132605181" style="zoom:50%;"><h3 id="2-FastDDS框架理解"><a href="#2-FastDDS框架理解" class="headerlink" title="2. FastDDS框架理解"></a>2. FastDDS框架理解</h3><p><strong>以数据为中心的DCPS（发布-订阅）模型实现，用于分布式软件通信</strong>。<br>并发多线程系统，每个DomainParticipant生成一组线程处理后台任务<br>FastDDS API是线程安全的<br>DDS中间件由应用层、DDS层、RTPS层（实时发布订阅协议）及传输层组成。传输层可以选择以太网协议栈，也可以选择共享内存。</p><img src="/2023/05/15/%E6%95%B0%E6%8D%AE%E5%88%86%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%BC%80%E6%BA%90%E5%AE%9E%E7%8E%B0FastDDS/image-20230515132703899.png" alt="image-20230515132703899" style="zoom:50%;"><h4 id="2-1-DDS核心概念"><a href="#2-1-DDS核心概念" class="headerlink" title="2.1 DDS核心概念"></a>2.1 DDS核心概念</h4><ol><li>域 domain</li><li>主题 topic</li><li>发布者 publisher</li><li>订阅者 subscriber</li></ol><img src="/2023/05/15/%E6%95%B0%E6%8D%AE%E5%88%86%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%BC%80%E6%BA%90%E5%AE%9E%E7%8E%B0FastDDS/image-20230515132747083.png" alt="image-20230515132747083" style="zoom:67%;"><img src="/2023/05/15/%E6%95%B0%E6%8D%AE%E5%88%86%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%BC%80%E6%BA%90%E5%AE%9E%E7%8E%B0FastDDS/image-20230515132807725.png" alt="image-20230515132807725" style="zoom:20%;"><img src="/2023/05/15/%E6%95%B0%E6%8D%AE%E5%88%86%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%BC%80%E6%BA%90%E5%AE%9E%E7%8E%B0FastDDS/image-20230515132838725.png" alt="image-20230515132838725" style="zoom:20%;"><h4 id="2-2-FastDDS架构实现"><a href="#2-2-FastDDS架构实现" class="headerlink" title="2.2 FastDDS架构实现"></a>2.2 FastDDS架构实现</h4><p>应用层：用户APP<br>FastDDS：部署1个或者多个域（domain）<br>RTPS层：传输层抽象，动态发现，实时发布-订阅协议实现，互操作性</p><img src="/2023/05/15/%E6%95%B0%E6%8D%AE%E5%88%86%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%BC%80%E6%BA%90%E5%AE%9E%E7%8E%B0FastDDS/image-20230515132909697.png" alt="image-20230515132909697" style="zoom:50%;"><h5 id="2-2-1-DDS层"><a href="#2-2-1-DDS层" class="headerlink" title="2.2.1 DDS层"></a>2.2.1 DDS层</h5><ul><li>服务质量 QoS</li><li>Listener</li></ul><h5 id="2-2-2-RTPS层"><a href="#2-2-2-RTPS层" class="headerlink" title="2.2.2 RTPS层"></a>2.2.2 RTPS层</h5><p>支持单播与多播<br>服务发现<br>同步与异步发布模式</p><h3 id="3-FastDDS源码理解"><a href="#3-FastDDS源码理解" class="headerlink" title="3. FastDDS源码理解"></a>3. FastDDS源码理解</h3><h4 id="3-1-DDS层"><a href="#3-1-DDS层" class="headerlink" title="3.1 DDS层"></a>3.1 DDS层</h4><h4 id="3-2-RTPS层"><a href="#3-2-RTPS层" class="headerlink" title="3.2 RTPS层"></a>3.2 RTPS层</h4><h4 id="3-3-共享内存"><a href="#3-3-共享内存" class="headerlink" title="3.3 共享内存"></a>3.3 共享内存</h4><h4 id="3-4-服务质量-QoS"><a href="#3-4-服务质量-QoS" class="headerlink" title="3.4 服务质量 QoS"></a>3.4 服务质量 QoS</h4><p>服务质量QoS是用来解决网络延迟与阻塞等问题的一种技术。<br>reliability 可靠性<br>deadline 截止时间</p><h3 id="4-例程理解"><a href="#4-例程理解" class="headerlink" title="4. 例程理解"></a>4. 例程理解</h3><h4 id="4-1-HelloWorldExample"><a href="#4-1-HelloWorldExample" class="headerlink" title="4.1 HelloWorldExample"></a>4.1 HelloWorldExample</h4><img src="/2023/05/15/%E6%95%B0%E6%8D%AE%E5%88%86%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%BC%80%E6%BA%90%E5%AE%9E%E7%8E%B0FastDDS/image-20230515132939263.png" alt="image-20230515132939263" style="zoom:50%;"><img src="/2023/05/15/%E6%95%B0%E6%8D%AE%E5%88%86%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%BC%80%E6%BA%90%E5%AE%9E%E7%8E%B0FastDDS/image-20230515132954367.png" alt="image-20230515132954367" style="zoom:80%;"><img src="/2023/05/15/%E6%95%B0%E6%8D%AE%E5%88%86%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%BC%80%E6%BA%90%E5%AE%9E%E7%8E%B0FastDDS/image-20230515133011686.png" alt="image-20230515133011686" style="zoom:60%;"><p>源码：<a href="https://github.com/eProsima/Fast-DDS/tree/master/examples/cpp/dds/HelloWorldExample">HelloWorldExample</a></p><h5 id="4-1-1-接口描述与代码生成"><a href="#4-1-1-接口描述与代码生成" class="headerlink" title="4.1.1 接口描述与代码生成"></a>4.1.1 接口描述与代码生成</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">struct HelloWorld<br>&#123;<br>unsigned long index;   <span class="hljs-comment"># uint32_t in C++</span><br>string message;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">fastddsgen ./HelloWorld.idl<br></code></pre></td></tr></table></figure><p>生成以下4个文件:<br>HelloWorld.h<br>HelloWorld.cxx     &#x2F;&#x2F; 数据类型<br>HelloWorldPubSubTypes.h<br>HelloWorldPubSubTypes.cxx  &#x2F;&#x2F; 继承，payload 序列化与反序列化</p><h5 id="4-1-2-主程序"><a href="#4-1-2-主程序" class="headerlink" title="4.1.2 主程序"></a>4.1.2 主程序</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* @file HelloWorld_main.cpp</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sstream&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;HelloWorldPublisher.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;HelloWorldSubscriber.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fastdds/dds/domain/DomainParticipantFactory.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fastrtps/log/Log.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;optionparser.hpp&gt;</span></span><br><br><span class="hljs-keyword">using</span> eprosima::fastdds::dds::Log;<br><br><span class="hljs-keyword">namespace</span> option = eprosima::option;<br><br><span class="hljs-comment">//命令行解析程序，略</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-type">int</span> argc,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-type">char</span>** argv)</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Starting &quot;</span> &lt;&lt; std::endl;<br><br><span class="hljs-type">int</span> type = <span class="hljs-number">1</span>;<br><span class="hljs-type">uint32_t</span> count = <span class="hljs-number">10</span>;    <span class="hljs-comment">// 十次</span><br><span class="hljs-type">uint32_t</span> sleep = <span class="hljs-number">100</span>;   <span class="hljs-comment">// 间隔 100 ms</span><br><span class="hljs-type">bool</span> use_environment_qos = <span class="hljs-literal">false</span>;<br><span class="hljs-comment">/* ...... */</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(type_name, <span class="hljs-string">&quot;publisher&quot;</span>) == <span class="hljs-number">0</span>)<br>&#123;<br>type = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(type_name, <span class="hljs-string">&quot;subscriber&quot;</span>) == <span class="hljs-number">0</span>)<br>&#123;<br>type = <span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-comment">/* ...... */</span><br><span class="hljs-keyword">switch</span> (type)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:     <span class="hljs-comment">// 调用发布者程序</span><br>&#123;<br>HelloWorldPublisher mypub;<br><span class="hljs-keyword">if</span> (mypub.<span class="hljs-built_in">init</span>(use_environment_qos))<br>&#123;<br>mypub.<span class="hljs-built_in">run</span>(count, sleep);<br>&#125;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:  <span class="hljs-comment">// 调用订阅者程序</span><br>&#123;<br>HelloWorldSubscriber mysub;<br><span class="hljs-keyword">if</span> (mysub.<span class="hljs-built_in">init</span>(use_environment_qos))<br>&#123;<br>mysub.<span class="hljs-built_in">run</span>();<br>&#125;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>Log::<span class="hljs-built_in">Reset</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="4-1-3-发布者与订阅者"><a href="#4-1-3-发布者与订阅者" class="headerlink" title="4.1.3 发布者与订阅者"></a>4.1.3 发布者与订阅者</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 初始化 *****</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">HelloWorldPublisher::init</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-type">bool</span> use_env)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 暂时省略 QoS 设置，以下同</span><br>    <span class="hljs-comment">// step1：使用  participant factory 创建 participant</span><br>    <span class="hljs-keyword">auto</span> factory = DomainParticipantFactory::<span class="hljs-built_in">get_instance</span>();<br>    participant_ = factory-&gt;<span class="hljs-built_in">create_participant</span>(<span class="hljs-number">0</span>, pqos);   <span class="hljs-comment">// domain ID = 0</span><br>    <span class="hljs-comment">// step2：注册 participant</span><br>    <span class="hljs-comment">// type_(new HelloWorldPubSubType()</span><br>     <span class="hljs-comment">//REGISTER THE TYPE</span><br>    type_.<span class="hljs-built_in">register_type</span>(participant_);<br>    <span class="hljs-comment">// step3：创建 publisher</span><br>    publisher_ = participant_-&gt;<span class="hljs-built_in">create_publisher</span>(<br>        pubqos,<br>        <span class="hljs-literal">nullptr</span>);<br>    <span class="hljs-comment">// step4：创建 DataWriter</span><br>    writer_ = publisher_-&gt;<span class="hljs-built_in">create_datawriter</span>(<br>    topic_,<br>    wqos,<br>    &amp;listener_);<br>    <span class="hljs-comment">// step5：创建 topic</span><br>    topic_ = participant_-&gt;<span class="hljs-built_in">create_topic</span>(<br>        <span class="hljs-string">&quot;HelloWorldTopic&quot;</span>,<br>        <span class="hljs-string">&quot;HelloWorld&quot;</span>,<br>        tqos);<br>&#125;<br><span class="hljs-comment">// 回调函数</span><br><span class="hljs-type">void</span> HelloWorldPublisher::PubListener::<span class="hljs-built_in">on_publication_matched</span>(<br>        eprosima::fastdds::dds::DataWriter*,<br>        <span class="hljs-type">const</span> eprosima::fastdds::dds::PublicationMatchedStatus&amp; info)<br>&#123;<br>     <span class="hljs-keyword">if</span> (info.current_count_change == <span class="hljs-number">1</span>)<br>    &#123;<br>        matched_ = info.total_count;<br>        firstConnected_ = <span class="hljs-literal">true</span>;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Publisher matched.&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (info.current_count_change == <span class="hljs-number">-1</span>)<br>    &#123;<br>        matched_ = info.total_count;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Publisher unmatched.&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 数据写入 *****</span><br><span class="hljs-comment">// 当 DataWriter 与 DataRreader匹配时，回调函数中数据成员 matched_将更新，其值为发现的</span><br><span class="hljs-comment">// DataReader 的数量，当发现第一个DataReader时，数据开始传输。</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">HelloWorldPublisher::publish</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-type">bool</span> waitForListener)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (listener_.firstConnected_ || !waitForListener || listener_.matched_ &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        hello_.<span class="hljs-built_in">index</span>(hello_.<span class="hljs-built_in">index</span>() + <span class="hljs-number">1</span>);   <span class="hljs-comment">// idl中定义的 unsigned long index</span><br>        writer_-&gt;<span class="hljs-built_in">write</span>(&amp;hello_);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-comment">// 创建新线程，阻塞等待</span><br><span class="hljs-comment">// 新线程根据 count 与 sleep 发送发消息（调用 publish）</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HelloWorldPublisher::run</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-type">uint32_t</span> samples,</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-type">uint32_t</span> sleep)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">std::thread <span class="hljs-title">thread</span><span class="hljs-params">(&amp;HelloWorldPublisher::runThread, <span class="hljs-keyword">this</span>, samples, sleep)</span></span>;<br>    thread.<span class="hljs-built_in">join</span>();<br>    <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">HelloWorldSubscriber::init</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-type">bool</span> use_env)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// step1-2 与发布者一致</span><br>    subscriber_ = participant_-&gt;<span class="hljs-built_in">create_subscriber</span>(sqos, <span class="hljs-literal">nullptr</span>);  <span class="hljs-comment">// 创建订阅者</span><br>    topic_ = participant_-&gt;<span class="hljs-built_in">create_topic</span>(    <span class="hljs-comment">// 创建 topic</span><br>        <span class="hljs-string">&quot;HelloWorldTopic&quot;</span>,<br>        <span class="hljs-string">&quot;HelloWorld&quot;</span>,<br>        tqos);<br>    reader_ = subscriber_-&gt;<span class="hljs-built_in">create_datareader</span>(topic_, rqos, &amp;listener_);  <br>&#125;<br><span class="hljs-comment">// 回调函数</span><br><span class="hljs-type">void</span> HelloWorldSubscriber::SubListener::<span class="hljs-built_in">on_subscription_matched</span>(<br>        DataReader*,<br>        <span class="hljs-type">const</span> SubscriptionMatchedStatus&amp; info)<br>&#123;&#125;<br><br><br><span class="hljs-comment">// 消息接收</span><br><span class="hljs-type">void</span> HelloWorldSubscriber::SubListener::<span class="hljs-built_in">on_data_available</span>(<br>        DataReader* reader)<br>&#123;<br>    SampleInfo info;<br>    <span class="hljs-keyword">if</span> (reader-&gt;<span class="hljs-built_in">take_next_sample</span>(&amp;hello_, &amp;info) == ReturnCode_t::RETCODE_OK)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (info.instance_state == ALIVE_INSTANCE_STATE)<br>        &#123;<br>            samples_++;<br>            <span class="hljs-comment">// Print your structure data here.</span><br>            std::cout &lt;&lt; <span class="hljs-string">&quot;Message &quot;</span> &lt;&lt; hello_.<span class="hljs-built_in">message</span>() &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; hello_.<span class="hljs-built_in">index</span>() &lt;&lt; <span class="hljs-string">&quot; RECEIVED&quot;</span> &lt;&lt; std::endl;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-HelloWorldExampleDataSharing"><a href="#4-2-HelloWorldExampleDataSharing" class="headerlink" title="4.2 HelloWorldExampleDataSharing"></a>4.2 HelloWorldExampleDataSharing</h4><img src="/2023/05/15/%E6%95%B0%E6%8D%AE%E5%88%86%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%BC%80%E6%BA%90%E5%AE%9E%E7%8E%B0FastDDS/image-20230515133053716.png" alt="image-20230515133053716" style="zoom:50%;"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @file HelloWorldPublisher.cpp</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">// 对比上一个例子，新增了针对writer的 QoS 的设置</span><br><span class="hljs-comment">// CREATE THE WRITER</span><br>    DataWriterQos wqos = DATAWRITER_QOS_DEFAULT;<br>    wqos.<span class="hljs-built_in">reliability</span>().kind = BEST_EFFORT_RELIABILITY_QOS;<br>    wqos.<span class="hljs-built_in">history</span>().depth = <span class="hljs-number">10</span>;<br>    wqos.<span class="hljs-built_in">data_sharing</span>().<span class="hljs-built_in">automatic</span>();<br>    writer_ = publisher_-&gt;<span class="hljs-built_in">create_datawriter</span>(topic_, wqos, &amp;listener_);<br><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @file HelloWorldSubscriber.cpp</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">// 对比上一个例子，新增了针对reader的 QoS 的设置</span><br><span class="hljs-comment">// CREATE THE READER</span><br>    DataReaderQos rqos = DATAREADER_QOS_DEFAULT;<br>    rqos.<span class="hljs-built_in">reliability</span>().kind = BEST_EFFORT_RELIABILITY_QOS;<br>    rqos.<span class="hljs-built_in">durability</span>().kind = VOLATILE_DURABILITY_QOS;<br>    rqos.<span class="hljs-built_in">data_sharing</span>().<span class="hljs-built_in">automatic</span>();<br>    reader_ = subscriber_-&gt;<span class="hljs-built_in">create_datareader</span>(topic_, rqos, &amp;listener_);<br></code></pre></td></tr></table></figure><h4 id="4-3-HelloWorldExampleSharedMem"><a href="#4-3-HelloWorldExampleSharedMem" class="headerlink" title="4.3 HelloWorldExampleSharedMem"></a>4.3 HelloWorldExampleSharedMem</h4><h5 id="4-3-0-关于共享内存"><a href="#4-3-0-关于共享内存" class="headerlink" title="4.3.0 关于共享内存"></a>4.3.0 关于共享内存</h5><p>本地使用共享内存传输可以获得比以太网协议栈传输更优的性能，因为共享内存可以减少内存副本的数量以及OS开销，还可以发送更大的消息，消息大小仅取决于内存大小。</p><img src="/2023/05/15/%E6%95%B0%E6%8D%AE%E5%88%86%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%BC%80%E6%BA%90%E5%AE%9E%E7%8E%B0FastDDS/image-20230515133132146.png" alt="image-20230515133132146" style="zoom:70%;"><img src="/2023/05/15/%E6%95%B0%E6%8D%AE%E5%88%86%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%BC%80%E6%BA%90%E5%AE%9E%E7%8E%B0FastDDS/image-20230515133159772.png" alt="image-20230515133159772" style="zoom:80%;"><p><em>共享内存传输序列图</em></p><img src="/2023/05/15/%E6%95%B0%E6%8D%AE%E5%88%86%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%BC%80%E6%BA%90%E5%AE%9E%E7%8E%B0FastDDS/image-20230515133232198.png" alt="image-20230515133232198" style="zoom:50%;"><img src="/2023/05/15/%E6%95%B0%E6%8D%AE%E5%88%86%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%BC%80%E6%BA%90%E5%AE%9E%E7%8E%B0FastDDS/image-20230515133249086.png" alt="image-20230515133249086" style="zoom:80%;"><p><em>共享内存文件存放在 &#x2F;dev&#x2F;shm 下</em></p><h5 id="4-3-1-接口描述与数据生成"><a href="#4-3-1-接口描述与数据生成" class="headerlink" title="4.3.1 接口描述与数据生成"></a>4.3.1 接口描述与数据生成</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">HelloWorld</span><br>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> index;<br>string message;<br><span class="hljs-type">char</span> data[<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>];<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="4-3-2-发布者与订阅者"><a href="#4-3-2-发布者与订阅者" class="headerlink" title="4.3.2 发布者与订阅者"></a>4.3.2 发布者与订阅者</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @file HelloWorldPublisher.cpp</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fastdds/rtps/transport/shared_mem/SharedMemTransportDescriptor.h&gt;</span></span><br><span class="hljs-comment">// ......</span><br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">HelloWorldPublisher::init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    hello_ = std::<span class="hljs-built_in">make_shared</span>&lt;HelloWorld&gt;();<br>    hello_-&gt;<span class="hljs-built_in">index</span>(<span class="hljs-number">0</span>);<br>    hello_-&gt;<span class="hljs-built_in">message</span>(<span class="hljs-string">&quot;HelloWorld&quot;</span>);<br><span class="hljs-comment">// DomainParticipant QoS 设置</span><br>    <span class="hljs-comment">//CREATE THE PARTICIPANT</span><br>    DomainParticipantQos pqos;<br>    pqos.<span class="hljs-built_in">wire_protocol</span>().builtin.discovery_config.discoveryProtocol = DiscoveryProtocol_t::SIMPLE;<br>    pqos.<span class="hljs-built_in">wire_protocol</span>().builtin.discovery_config.use_SIMPLE_EndpointDiscoveryProtocol = <span class="hljs-literal">true</span>;<br>    pqos.<span class="hljs-built_in">wire_protocol</span>().builtin.discovery_config.m_simpleEDP.use_PublicationReaderANDSubscriptionWriter = <span class="hljs-literal">true</span>;<br>    pqos.<span class="hljs-built_in">wire_protocol</span>().builtin.discovery_config.m_simpleEDP.use_PublicationWriterANDSubscriptionReader = <span class="hljs-literal">true</span>;<br>    pqos.<span class="hljs-built_in">wire_protocol</span>().builtin.discovery_config.leaseDuration = eprosima::fastrtps::c_TimeInfinite;<br>    pqos.<span class="hljs-built_in">name</span>(<span class="hljs-string">&quot;Participant_pub&quot;</span>);<br><br>    <span class="hljs-comment">// Explicit configuration of SharedMem transport</span><br>    <span class="hljs-comment">// 显式配置 禁用 UDP v4</span><br>    pqos.<span class="hljs-built_in">transport</span>().use_builtin_transports = <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">auto</span> shm_transport = std::<span class="hljs-built_in">make_shared</span>&lt;SharedMemTransportDescriptor&gt;();<br>    <span class="hljs-comment">// 设置共享内存段的大小</span><br>    shm_transport-&gt;<span class="hljs-built_in">segment_size</span>(<span class="hljs-number">2</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>);<br>    pqos.<span class="hljs-built_in">transport</span>().user_transports.<span class="hljs-built_in">push_back</span>(shm_transport);<br><br>    participant_ = DomainParticipantFactory::<span class="hljs-built_in">get_instance</span>()-&gt;<span class="hljs-built_in">create_participant</span>(<span class="hljs-number">0</span>, pqos);<br><br>    <span class="hljs-comment">// 注册，创建topic ......</span><br>    <br>    <span class="hljs-comment">//CREATE THE DATAWRITER</span><br>    DataWriterQos wqos;<br>    wqos.<span class="hljs-built_in">history</span>().kind = KEEP_LAST_HISTORY_QOS;<br>    wqos.<span class="hljs-built_in">history</span>().depth = <span class="hljs-number">30</span>;<br>    wqos.<span class="hljs-built_in">resource_limits</span>().max_samples = <span class="hljs-number">50</span>;<br>    wqos.<span class="hljs-built_in">resource_limits</span>().allocated_samples = <span class="hljs-number">20</span>;<br>    wqos.<span class="hljs-built_in">reliable_writer_qos</span>().times.heartbeatPeriod.seconds = <span class="hljs-number">2</span>;<br>    wqos.<span class="hljs-built_in">reliable_writer_qos</span>().times.heartbeatPeriod.nanosec = <span class="hljs-number">200</span> * <span class="hljs-number">1000</span> * <span class="hljs-number">1000</span>;<br>    wqos.<span class="hljs-built_in">reliability</span>().kind = RELIABLE_RELIABILITY_QOS;<br>    wqos.<span class="hljs-built_in">publish_mode</span>().kind = ASYNCHRONOUS_PUBLISH_MODE;<br><br>    writer_ = publisher_-&gt;<span class="hljs-built_in">create_datawriter</span>(topic_, wqos, &amp;listener_);<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">HelloWorldPublisher::publish</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-type">bool</span> waitForListener)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (listener_.first_connected_ || !waitForListener || listener_.matched_ &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        hello_-&gt;<span class="hljs-built_in">index</span>(hello_-&gt;<span class="hljs-built_in">index</span>() + <span class="hljs-number">1</span>);<br>        <span class="hljs-type">size_t</span> data_size = hello_-&gt;<span class="hljs-built_in">data</span>().<span class="hljs-built_in">size</span>();<br>        std::string s = <span class="hljs-string">&quot;BigData&quot;</span> + std::<span class="hljs-built_in">to_string</span>(hello_-&gt;<span class="hljs-built_in">index</span>() % <span class="hljs-number">10</span>);<br>        <span class="hljs-built_in">strcpy</span>(&amp;hello_-&gt;<span class="hljs-built_in">data</span>()[data_size - s.<span class="hljs-built_in">length</span>() - <span class="hljs-number">1</span>], s.<span class="hljs-built_in">c_str</span>());<br><br>        writer_-&gt;<span class="hljs-built_in">write</span>(hello_.<span class="hljs-built_in">get</span>());<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @file HelloWorldSubscriber.cpp</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h4 id="4-4-HelloWorldExampleTCP"><a href="#4-4-HelloWorldExampleTCP" class="headerlink" title="4.4 HelloWorldExampleTCP"></a>4.4 HelloWorldExampleTCP</h4><img src="/2023/05/15/%E6%95%B0%E6%8D%AE%E5%88%86%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%BC%80%E6%BA%90%E5%AE%9E%E7%8E%B0FastDDS/image-20230515133317686.png" alt="image-20230515133317686" style="zoom:50%;"><img src="/2023/05/15/%E6%95%B0%E6%8D%AE%E5%88%86%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%BC%80%E6%BA%90%E5%AE%9E%E7%8E%B0FastDDS/image-20230515133336988.png" class title="image-20230515133336988">]]></content>
    
    
    
    <tags>
      
      <tag>网络</tag>
      
      <tag>原创</tag>
      
      <tag>车载以太网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从helloworld看程序的编译与链接</title>
    <link href="/2023/05/06/%E4%BB%8Ehelloworld%E7%9C%8B%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E9%93%BE%E6%8E%A5/"/>
    <url>/2023/05/06/%E4%BB%8Ehelloworld%E7%9C%8B%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E9%93%BE%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="从hello-world看程序的编译与链接"><a href="#从hello-world看程序的编译与链接" class="headerlink" title="从hello world看程序的编译与链接"></a>从hello world看程序的编译与链接</h1><p>众所周知，程序的编译分为四个阶段，分别为预处理、编译、汇编与链接。以下从一个简单的hello world剖析程序的编译过程。</p><h3 id="1-程序的编译与链接"><a href="#1-程序的编译与链接" class="headerlink" title="1. 程序的编译与链接"></a>1. 程序的编译与链接</h3><p>源代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// @file: test.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello world\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>预处理</strong></p><p>处理源代码中以<code>#</code>开始的预编译指令，如<code>#include</code>、<code>#define</code>等。</p><p>gcc编译器对应程序：<code>cc1</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -E ./test.c -o ./test.i<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash">@file: test.i<br><br><span class="hljs-comment"># 1 &quot;./test.c&quot;</span><br><span class="hljs-comment"># 1 &quot;&lt;built-in&gt;&quot;</span><br><span class="hljs-comment"># 1 &quot;&lt;command-line&gt;&quot;</span><br><span class="hljs-comment"># 31 &quot;&lt;command-line&gt;&quot;</span><br><span class="hljs-comment"># 1 &quot;/usr/include/stdc-predef.h&quot; 1 3 4</span><br><span class="hljs-comment"># 32 &quot;&lt;command-line&gt;&quot; 2</span><br><span class="hljs-comment"># 1 &quot;./test.c&quot;</span><br><span class="hljs-comment"># 1 &quot;/usr/include/stdio.h&quot; 1 3 4</span><br><span class="hljs-comment"># 27 &quot;/usr/include/stdio.h&quot; 3 4</span><br><span class="hljs-comment"># 1 &quot;/usr/include/x86_64-linux-gnu/bits/libc-header-start.h&quot; 1 3 4</span><br><span class="hljs-comment"># 33 &quot;/usr/include/x86_64-linux-gnu/bits/libc-header-start.h&quot; 3 4</span><br><span class="hljs-comment"># 1 &quot;/usr/include/features.h&quot; 1 3 4</span><br><span class="hljs-comment"># 461 &quot;/usr/include/features.h&quot; 3 4</span><br><span class="hljs-comment"># 1 &quot;/usr/include/x86_64-linux-gnu/sys/cdefs.h&quot; 1 3 4</span><br><span class="hljs-comment"># 452 &quot;/usr/include/x86_64-linux-gnu/sys/cdefs.h&quot; 3 4</span><br><span class="hljs-comment"># 1 &quot;/usr/include/x86_64-linux-gnu/bits/wordsize.h&quot; 1 3 4</span><br><span class="hljs-comment"># 453 &quot;/usr/include/x86_64-linux-gnu/sys/cdefs.h&quot; 2 3 4</span><br><span class="hljs-comment"># 1 &quot;/usr/include/x86_64-linux-gnu/bits/long-double.h&quot; 1 3 4</span><br><span class="hljs-comment"># 454 &quot;/usr/include/x86_64-linux-gnu/sys/cdefs.h&quot; 2 3 4</span><br><span class="hljs-comment"># 462 &quot;/usr/include/features.h&quot; 2 3 4</span><br><span class="hljs-comment"># 485 &quot;/usr/include/features.h&quot; 3 4</span><br><span class="hljs-comment"># 1 &quot;/usr/include/x86_64-linux-gnu/gnu/stubs.h&quot; 1 3 4</span><br><span class="hljs-comment"># 10 &quot;/usr/include/x86_64-linux-gnu/gnu/stubs.h&quot; 3 4</span><br><span class="hljs-comment"># 1 &quot;/usr/include/x86_64-linux-gnu/gnu/stubs-64.h&quot; 1 3 4</span><br><span class="hljs-comment"># 11 &quot;/usr/include/x86_64-linux-gnu/gnu/stubs.h&quot; 2 3 4</span><br><span class="hljs-comment"># 486 &quot;/usr/include/features.h&quot; 2 3 4</span><br><span class="hljs-comment"># 34 &quot;/usr/include/x86_64-linux-gnu/bits/libc-header-start.h&quot; 2 3 4</span><br><span class="hljs-comment"># 28 &quot;/usr/include/stdio.h&quot; 2 3 4</span><br>......<br></code></pre></td></tr></table></figure><p><strong>编译</strong></p><p>编译过程即将预处理后的文件进行一系列的词法分析、语法分析、语义分析以及优化，之后生成相应的汇编代码。</p><p>gcc编译器对应程序：<code>cc1</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -S test.i -o test.s<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs bash">@file: test.s<br><br>.file<span class="hljs-string">&quot;test.c&quot;</span><br>.text<br>.section.rodata<br>.LC0:<br>.string<span class="hljs-string">&quot;hello world&quot;</span><br>.text<br>.globlmain<br>.<span class="hljs-built_in">type</span>main, @<span class="hljs-keyword">function</span><br>main:<br>.LFB0:<br>.cfi_startproc<br>endbr64<br>pushq%rbp<br>.cfi_def_cfa_offset 16<br>.cfi_offset 6, -16<br>movq%rsp, %rbp<br>.cfi_def_cfa_register 6<br>leaq.LC0(%rip), %rdi<br>callputs@PLT<br>movl<span class="hljs-variable">$0</span>, %eax<br>popq%rbp<br>.cfi_def_cfa 7, 8<br>ret<br>.cfi_endproc<br>.LFE0:<br>.sizemain, .-main<br>.ident<span class="hljs-string">&quot;GCC: (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0&quot;</span><br>.section.note.GNU-stack,<span class="hljs-string">&quot;&quot;</span>,@progbits<br>.section.note.gnu.property,<span class="hljs-string">&quot;a&quot;</span><br>.align 8<br>.long 1f - 0f<br>.long 4f - 1f<br>.long 5<br>0:<br>.string <span class="hljs-string">&quot;GNU&quot;</span><br>1:<br>.align 8<br>.long 0xc0000002<br>.long 3f - 2f<br>2:<br>.long 0x3<br>3:<br>.align 8<br>4:<br></code></pre></td></tr></table></figure><p><strong>汇编</strong></p><p>将汇编指令转变为机器指令。</p><p>gcc编译器对应程序：<code>as</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -c test.s -o test.o<br></code></pre></td></tr></table></figure><p>使用<code>readelf -a ./test.o</code>读取目标文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs bash">@file: test.o<br><br>ELF Header:<br>  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 <br>  Class:                             ELF64<br>  Data:                              2<span class="hljs-string">&#x27;s complement, little endian</span><br><span class="hljs-string">  Version:                           1 (current)</span><br><span class="hljs-string">  OS/ABI:                            UNIX - System V</span><br><span class="hljs-string">  ABI Version:                       0</span><br><span class="hljs-string">  Type:                              REL (Relocatable file)</span><br><span class="hljs-string">  Machine:                           Advanced Micro Devices X86-64</span><br><span class="hljs-string">  Version:                           0x1</span><br><span class="hljs-string">  Entry point address:               0x0</span><br><span class="hljs-string">  Start of program headers:          0 (bytes into file)</span><br><span class="hljs-string">  Start of section headers:          784 (bytes into file)</span><br><span class="hljs-string">  Flags:                             0x0</span><br><span class="hljs-string">  Size of this header:               64 (bytes)</span><br><span class="hljs-string">  Size of program headers:           0 (bytes)</span><br><span class="hljs-string">  Number of program headers:         0</span><br><span class="hljs-string">  Size of section headers:           64 (bytes)</span><br><span class="hljs-string">  Number of section headers:         14</span><br><span class="hljs-string">  Section header string table index: 13</span><br><span class="hljs-string"></span><br><span class="hljs-string">Section Headers:</span><br><span class="hljs-string">  [Nr] Name              Type             Address           Offset</span><br><span class="hljs-string">       Size              EntSize          Flags  Link  Info  Align</span><br><span class="hljs-string">  [ 0]                   NULL             0000000000000000  00000000</span><br><span class="hljs-string">       0000000000000000  0000000000000000           0     0     0</span><br><span class="hljs-string">  [ 1] .text             PROGBITS         0000000000000000  00000040</span><br><span class="hljs-string">       000000000000001b  0000000000000000  AX       0     0     1</span><br><span class="hljs-string">  [ 2] .rela.text        RELA             0000000000000000  00000250</span><br><span class="hljs-string">       0000000000000030  0000000000000018   I      11     1     8</span><br><span class="hljs-string">  [ 3] .data             PROGBITS         0000000000000000  0000005b</span><br><span class="hljs-string">       0000000000000000  0000000000000000  WA       0     0     1</span><br><span class="hljs-string">  [ 4] .bss              NOBITS           0000000000000000  0000005b</span><br><span class="hljs-string">       0000000000000000  0000000000000000  WA       0     0     1</span><br><span class="hljs-string">  [ 5] .rodata           PROGBITS         0000000000000000  0000005b</span><br><span class="hljs-string">       000000000000000c  0000000000000000   A       0     0     1</span><br><span class="hljs-string">  [ 6] .comment          PROGBITS         0000000000000000  00000067</span><br><span class="hljs-string">       000000000000002c  0000000000000001  MS       0     0     1</span><br><span class="hljs-string">  [ 7] .note.GNU-stack   PROGBITS         0000000000000000  00000093</span><br><span class="hljs-string">       0000000000000000  0000000000000000           0     0     1</span><br><span class="hljs-string">  [ 8] .note.gnu.propert NOTE             0000000000000000  00000098</span><br><span class="hljs-string">       0000000000000020  0000000000000000   A       0     0     8</span><br><span class="hljs-string">  [ 9] .eh_frame         PROGBITS         0000000000000000  000000b8</span><br><span class="hljs-string">       0000000000000038  0000000000000000   A       0     0     8</span><br><span class="hljs-string">  [10] .rela.eh_frame    RELA             0000000000000000  00000280</span><br><span class="hljs-string">       0000000000000018  0000000000000018   I      11     9     8</span><br><span class="hljs-string">  [11] .symtab           SYMTAB           0000000000000000  000000f0</span><br><span class="hljs-string">       0000000000000138  0000000000000018          12    10     8</span><br><span class="hljs-string">  [12] .strtab           STRTAB           0000000000000000  00000228</span><br><span class="hljs-string">       0000000000000028  0000000000000000           0     0     1</span><br><span class="hljs-string">  [13] .shstrtab         STRTAB           0000000000000000  00000298</span><br><span class="hljs-string">       0000000000000074  0000000000000000           0     0     1</span><br><span class="hljs-string">Key to Flags:</span><br><span class="hljs-string">  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),</span><br><span class="hljs-string">  L (link order), O (extra OS processing required), G (group), T (TLS),</span><br><span class="hljs-string">  C (compressed), x (unknown), o (OS specific), E (exclude),</span><br><span class="hljs-string">  l (large), p (processor specific)</span><br><span class="hljs-string"></span><br><span class="hljs-string">There are no section groups in this file.</span><br><span class="hljs-string"></span><br><span class="hljs-string">There are no program headers in this file.</span><br><span class="hljs-string"></span><br><span class="hljs-string">There is no dynamic section in this file.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Relocation section &#x27;</span>.rela.text<span class="hljs-string">&#x27; at offset 0x250 contains 2 entries:</span><br><span class="hljs-string">  Offset          Info           Type           Sym. Value    Sym. Name + Addend</span><br><span class="hljs-string">00000000000b  000500000002 R_X86_64_PC32     0000000000000000 .rodata - 4</span><br><span class="hljs-string">000000000010  000c00000004 R_X86_64_PLT32    0000000000000000 puts - 4</span><br><span class="hljs-string"></span><br><span class="hljs-string">Relocation section &#x27;</span>.rela.eh_frame<span class="hljs-string">&#x27; at offset 0x280 contains 1 entry:</span><br><span class="hljs-string">  Offset          Info           Type           Sym. Value    Sym. Name + Addend</span><br><span class="hljs-string">000000000020  000200000002 R_X86_64_PC32     0000000000000000 .text + 0</span><br><span class="hljs-string"></span><br><span class="hljs-string">The decoding of unwind sections for machine type Advanced Micro Devices X86-64 is not currently supported.</span><br><span class="hljs-string"># 现在符号表的地址值都是0</span><br><span class="hljs-string">Symbol table &#x27;</span>.symtab<span class="hljs-string">&#x27; contains 13 entries:</span><br><span class="hljs-string">   Num:    Value          Size Type    Bind   Vis      Ndx Name</span><br><span class="hljs-string">     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND </span><br><span class="hljs-string">     1: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS test.c</span><br><span class="hljs-string">     2: 0000000000000000     0 SECTION LOCAL  DEFAULT    1 </span><br><span class="hljs-string">     3: 0000000000000000     0 SECTION LOCAL  DEFAULT    3 </span><br><span class="hljs-string">     4: 0000000000000000     0 SECTION LOCAL  DEFAULT    4 </span><br><span class="hljs-string">     5: 0000000000000000     0 SECTION LOCAL  DEFAULT    5 </span><br><span class="hljs-string">     6: 0000000000000000     0 SECTION LOCAL  DEFAULT    7 </span><br><span class="hljs-string">     7: 0000000000000000     0 SECTION LOCAL  DEFAULT    8 </span><br><span class="hljs-string">     8: 0000000000000000     0 SECTION LOCAL  DEFAULT    9 </span><br><span class="hljs-string">     9: 0000000000000000     0 SECTION LOCAL  DEFAULT    6 </span><br><span class="hljs-string">    10: 0000000000000000    27 FUNC    GLOBAL DEFAULT    1 main</span><br><span class="hljs-string">    11: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND _GLOBAL_OFFSET_TABLE_</span><br><span class="hljs-string">    12: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND puts</span><br><span class="hljs-string"></span><br><span class="hljs-string">No version information found in this file.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Displaying notes found in: .note.gnu.property</span><br><span class="hljs-string">  Owner                Data size Description</span><br><span class="hljs-string">  GNU                  0x00000010NT_GNU_PROPERTY_TYPE_0</span><br><span class="hljs-string">      Properties: x86 feature: IBT, SHSTK</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p><code>file ./test.o</code>输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./test.o: ELF 64-bit LSB relocatable, x86-64, version 1 (SYSV), not stripped<br></code></pre></td></tr></table></figure><p><strong>链接</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc ./test.o -o ./test<br></code></pre></td></tr></table></figure><p>使用<code>readelf -a ./test</code>读取目标文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br></pre></td><td class="code"><pre><code class="hljs bash">ELF Header:<br>  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 <br>  Class:                             ELF64<br>  Data:                              2<span class="hljs-string">&#x27;s complement, little endian</span><br><span class="hljs-string">  Version:                           1 (current)</span><br><span class="hljs-string">  OS/ABI:                            UNIX - System V</span><br><span class="hljs-string">  ABI Version:                       0</span><br><span class="hljs-string">  Type:                              DYN (Shared object file)</span><br><span class="hljs-string">  Machine:                           Advanced Micro Devices X86-64</span><br><span class="hljs-string">  Version:                           0x1</span><br><span class="hljs-string">  Entry point address:               0x1060</span><br><span class="hljs-string">  Start of program headers:          64 (bytes into file)</span><br><span class="hljs-string">  Start of section headers:          14712 (bytes into file)</span><br><span class="hljs-string">  Flags:                             0x0</span><br><span class="hljs-string">  Size of this header:               64 (bytes)</span><br><span class="hljs-string">  Size of program headers:           56 (bytes)</span><br><span class="hljs-string">  Number of program headers:         13</span><br><span class="hljs-string">  Size of section headers:           64 (bytes)</span><br><span class="hljs-string">  Number of section headers:         31</span><br><span class="hljs-string">  Section header string table index: 30</span><br><span class="hljs-string"></span><br><span class="hljs-string">Section Headers:</span><br><span class="hljs-string">  [Nr] Name              Type             Address           Offset</span><br><span class="hljs-string">       Size              EntSize          Flags  Link  Info  Align</span><br><span class="hljs-string">  [ 0]                   NULL             0000000000000000  00000000</span><br><span class="hljs-string">       0000000000000000  0000000000000000           0     0     0</span><br><span class="hljs-string">  [ 1] .interp           PROGBITS         0000000000000318  00000318</span><br><span class="hljs-string">       000000000000001c  0000000000000000   A       0     0     1</span><br><span class="hljs-string">  [ 2] .note.gnu.propert NOTE             0000000000000338  00000338</span><br><span class="hljs-string">       0000000000000020  0000000000000000   A       0     0     8</span><br><span class="hljs-string">  [ 3] .note.gnu.build-i NOTE             0000000000000358  00000358</span><br><span class="hljs-string">       0000000000000024  0000000000000000   A       0     0     4</span><br><span class="hljs-string">  [ 4] .note.ABI-tag     NOTE             000000000000037c  0000037c</span><br><span class="hljs-string">       0000000000000020  0000000000000000   A       0     0     4</span><br><span class="hljs-string">  [ 5] .gnu.hash         GNU_HASH         00000000000003a0  000003a0</span><br><span class="hljs-string">       0000000000000024  0000000000000000   A       6     0     8</span><br><span class="hljs-string">  [ 6] .dynsym           DYNSYM           00000000000003c8  000003c8</span><br><span class="hljs-string">       00000000000000a8  0000000000000018   A       7     1     8</span><br><span class="hljs-string">  [ 7] .dynstr           STRTAB           0000000000000470  00000470</span><br><span class="hljs-string">       0000000000000082  0000000000000000   A       0     0     1</span><br><span class="hljs-string">  [ 8] .gnu.version      VERSYM           00000000000004f2  000004f2</span><br><span class="hljs-string">       000000000000000e  0000000000000002   A       6     0     2</span><br><span class="hljs-string">  [ 9] .gnu.version_r    VERNEED          0000000000000500  00000500</span><br><span class="hljs-string">       0000000000000020  0000000000000000   A       7     1     8</span><br><span class="hljs-string">  [10] .rela.dyn         RELA             0000000000000520  00000520</span><br><span class="hljs-string">       00000000000000c0  0000000000000018   A       6     0     8</span><br><span class="hljs-string">  [11] .rela.plt         RELA             00000000000005e0  000005e0</span><br><span class="hljs-string">       0000000000000018  0000000000000018  AI       6    24     8</span><br><span class="hljs-string">  [12] .init             PROGBITS         0000000000001000  00001000</span><br><span class="hljs-string">       000000000000001b  0000000000000000  AX       0     0     4</span><br><span class="hljs-string">  [13] .plt              PROGBITS         0000000000001020  00001020</span><br><span class="hljs-string">       0000000000000020  0000000000000010  AX       0     0     16</span><br><span class="hljs-string">  [14] .plt.got          PROGBITS         0000000000001040  00001040</span><br><span class="hljs-string">       0000000000000010  0000000000000010  AX       0     0     16</span><br><span class="hljs-string">  [15] .plt.sec          PROGBITS         0000000000001050  00001050</span><br><span class="hljs-string">       0000000000000010  0000000000000010  AX       0     0     16</span><br><span class="hljs-string">  [16] .text             PROGBITS         0000000000001060  00001060</span><br><span class="hljs-string">       0000000000000185  0000000000000000  AX       0     0     16</span><br><span class="hljs-string">  [17] .fini             PROGBITS         00000000000011e8  000011e8</span><br><span class="hljs-string">       000000000000000d  0000000000000000  AX       0     0     4</span><br><span class="hljs-string">  [18] .rodata           PROGBITS         0000000000002000  00002000</span><br><span class="hljs-string">       0000000000000010  0000000000000000   A       0     0     4</span><br><span class="hljs-string">  [19] .eh_frame_hdr     PROGBITS         0000000000002010  00002010</span><br><span class="hljs-string">       0000000000000044  0000000000000000   A       0     0     4</span><br><span class="hljs-string">  [20] .eh_frame         PROGBITS         0000000000002058  00002058</span><br><span class="hljs-string">       0000000000000108  0000000000000000   A       0     0     8</span><br><span class="hljs-string">  [21] .init_array       INIT_ARRAY       0000000000003db8  00002db8</span><br><span class="hljs-string">       0000000000000008  0000000000000008  WA       0     0     8</span><br><span class="hljs-string">  [22] .fini_array       FINI_ARRAY       0000000000003dc0  00002dc0</span><br><span class="hljs-string">       0000000000000008  0000000000000008  WA       0     0     8</span><br><span class="hljs-string">  [23] .dynamic          DYNAMIC          0000000000003dc8  00002dc8</span><br><span class="hljs-string">       00000000000001f0  0000000000000010  WA       7     0     8</span><br><span class="hljs-string">  [24] .got              PROGBITS         0000000000003fb8  00002fb8</span><br><span class="hljs-string">       0000000000000048  0000000000000008  WA       0     0     8</span><br><span class="hljs-string">  [25] .data             PROGBITS         0000000000004000  00003000</span><br><span class="hljs-string">       0000000000000010  0000000000000000  WA       0     0     8</span><br><span class="hljs-string">  [26] .bss              NOBITS           0000000000004010  00003010</span><br><span class="hljs-string">       0000000000000008  0000000000000000  WA       0     0     1</span><br><span class="hljs-string">  [27] .comment          PROGBITS         0000000000000000  00003010</span><br><span class="hljs-string">       000000000000002b  0000000000000001  MS       0     0     1</span><br><span class="hljs-string">  [28] .symtab           SYMTAB           0000000000000000  00003040</span><br><span class="hljs-string">       0000000000000618  0000000000000018          29    46     8</span><br><span class="hljs-string">  [29] .strtab           STRTAB           0000000000000000  00003658</span><br><span class="hljs-string">       0000000000000202  0000000000000000           0     0     1</span><br><span class="hljs-string">  [30] .shstrtab         STRTAB           0000000000000000  0000385a</span><br><span class="hljs-string">       000000000000011a  0000000000000000           0     0     1</span><br><span class="hljs-string">Key to Flags:</span><br><span class="hljs-string">  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),</span><br><span class="hljs-string">  L (link order), O (extra OS processing required), G (group), T (TLS),</span><br><span class="hljs-string">  C (compressed), x (unknown), o (OS specific), E (exclude),</span><br><span class="hljs-string">  l (large), p (processor specific)</span><br><span class="hljs-string"></span><br><span class="hljs-string">There are no section groups in this file.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Program Headers:</span><br><span class="hljs-string">  Type           Offset             VirtAddr           PhysAddr</span><br><span class="hljs-string">                 FileSiz            MemSiz              Flags  Align</span><br><span class="hljs-string">  PHDR           0x0000000000000040 0x0000000000000040 0x0000000000000040</span><br><span class="hljs-string">                 0x00000000000002d8 0x00000000000002d8  R      0x8</span><br><span class="hljs-string">  INTERP         0x0000000000000318 0x0000000000000318 0x0000000000000318</span><br><span class="hljs-string">                 0x000000000000001c 0x000000000000001c  R      0x1</span><br><span class="hljs-string">      [Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]</span><br><span class="hljs-string">  LOAD           0x0000000000000000 0x0000000000000000 0x0000000000000000</span><br><span class="hljs-string">                 0x00000000000005f8 0x00000000000005f8  R      0x1000</span><br><span class="hljs-string">  LOAD           0x0000000000001000 0x0000000000001000 0x0000000000001000</span><br><span class="hljs-string">                 0x00000000000001f5 0x00000000000001f5  R E    0x1000</span><br><span class="hljs-string">  LOAD           0x0000000000002000 0x0000000000002000 0x0000000000002000</span><br><span class="hljs-string">                 0x0000000000000160 0x0000000000000160  R      0x1000</span><br><span class="hljs-string">  LOAD           0x0000000000002db8 0x0000000000003db8 0x0000000000003db8</span><br><span class="hljs-string">                 0x0000000000000258 0x0000000000000260  RW     0x1000</span><br><span class="hljs-string">  DYNAMIC        0x0000000000002dc8 0x0000000000003dc8 0x0000000000003dc8</span><br><span class="hljs-string">                 0x00000000000001f0 0x00000000000001f0  RW     0x8</span><br><span class="hljs-string">  NOTE           0x0000000000000338 0x0000000000000338 0x0000000000000338</span><br><span class="hljs-string">                 0x0000000000000020 0x0000000000000020  R      0x8</span><br><span class="hljs-string">  NOTE           0x0000000000000358 0x0000000000000358 0x0000000000000358</span><br><span class="hljs-string">                 0x0000000000000044 0x0000000000000044  R      0x4</span><br><span class="hljs-string">  GNU_PROPERTY   0x0000000000000338 0x0000000000000338 0x0000000000000338</span><br><span class="hljs-string">                 0x0000000000000020 0x0000000000000020  R      0x8</span><br><span class="hljs-string">  GNU_EH_FRAME   0x0000000000002010 0x0000000000002010 0x0000000000002010</span><br><span class="hljs-string">                 0x0000000000000044 0x0000000000000044  R      0x4</span><br><span class="hljs-string">  GNU_STACK      0x0000000000000000 0x0000000000000000 0x0000000000000000</span><br><span class="hljs-string">                 0x0000000000000000 0x0000000000000000  RW     0x10</span><br><span class="hljs-string">  GNU_RELRO      0x0000000000002db8 0x0000000000003db8 0x0000000000003db8</span><br><span class="hljs-string">                 0x0000000000000248 0x0000000000000248  R      0x1</span><br><span class="hljs-string"></span><br><span class="hljs-string"> Section to Segment mapping:</span><br><span class="hljs-string">  Segment Sections...</span><br><span class="hljs-string">   00     </span><br><span class="hljs-string">   01     .interp </span><br><span class="hljs-string">   02     .interp .note.gnu.property .note.gnu.build-id .note.ABI-tag .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rela.dyn .rela.plt </span><br><span class="hljs-string">   03     .init .plt .plt.got .plt.sec .text .fini </span><br><span class="hljs-string">   04     .rodata .eh_frame_hdr .eh_frame </span><br><span class="hljs-string">   05     .init_array .fini_array .dynamic .got .data .bss </span><br><span class="hljs-string">   06     .dynamic </span><br><span class="hljs-string">   07     .note.gnu.property </span><br><span class="hljs-string">   08     .note.gnu.build-id .note.ABI-tag </span><br><span class="hljs-string">   09     .note.gnu.property </span><br><span class="hljs-string">   10     .eh_frame_hdr </span><br><span class="hljs-string">   11     </span><br><span class="hljs-string">   12     .init_array .fini_array .dynamic .got </span><br><span class="hljs-string"></span><br><span class="hljs-string">Dynamic section at offset 0x2dc8 contains 27 entries:</span><br><span class="hljs-string">  Tag        Type                         Name/Value</span><br><span class="hljs-string"> 0x0000000000000001 (NEEDED)             Shared library: [libc.so.6]</span><br><span class="hljs-string"> 0x000000000000000c (INIT)               0x1000</span><br><span class="hljs-string"> 0x000000000000000d (FINI)               0x11e8</span><br><span class="hljs-string"> 0x0000000000000019 (INIT_ARRAY)         0x3db8</span><br><span class="hljs-string"> 0x000000000000001b (INIT_ARRAYSZ)       8 (bytes)</span><br><span class="hljs-string"> 0x000000000000001a (FINI_ARRAY)         0x3dc0</span><br><span class="hljs-string"> 0x000000000000001c (FINI_ARRAYSZ)       8 (bytes)</span><br><span class="hljs-string"> 0x000000006ffffef5 (GNU_HASH)           0x3a0</span><br><span class="hljs-string"> 0x0000000000000005 (STRTAB)             0x470</span><br><span class="hljs-string"> 0x0000000000000006 (SYMTAB)             0x3c8</span><br><span class="hljs-string"> 0x000000000000000a (STRSZ)              130 (bytes)</span><br><span class="hljs-string"> 0x000000000000000b (SYMENT)             24 (bytes)</span><br><span class="hljs-string"> 0x0000000000000015 (DEBUG)              0x0</span><br><span class="hljs-string"> 0x0000000000000003 (PLTGOT)             0x3fb8</span><br><span class="hljs-string"> 0x0000000000000002 (PLTRELSZ)           24 (bytes)</span><br><span class="hljs-string"> 0x0000000000000014 (PLTREL)             RELA</span><br><span class="hljs-string"> 0x0000000000000017 (JMPREL)             0x5e0</span><br><span class="hljs-string"> 0x0000000000000007 (RELA)               0x520</span><br><span class="hljs-string"> 0x0000000000000008 (RELASZ)             192 (bytes)</span><br><span class="hljs-string"> 0x0000000000000009 (RELAENT)            24 (bytes)</span><br><span class="hljs-string"> 0x000000000000001e (FLAGS)              BIND_NOW</span><br><span class="hljs-string"> 0x000000006ffffffb (FLAGS_1)            Flags: NOW PIE</span><br><span class="hljs-string"> 0x000000006ffffffe (VERNEED)            0x500</span><br><span class="hljs-string"> 0x000000006fffffff (VERNEEDNUM)         1</span><br><span class="hljs-string"> 0x000000006ffffff0 (VERSYM)             0x4f2</span><br><span class="hljs-string"> 0x000000006ffffff9 (RELACOUNT)          3</span><br><span class="hljs-string"> 0x0000000000000000 (NULL)               0x0</span><br><span class="hljs-string"></span><br><span class="hljs-string">Relocation section &#x27;</span>.rela.dyn<span class="hljs-string">&#x27; at offset 0x520 contains 8 entries:</span><br><span class="hljs-string">  Offset          Info           Type           Sym. Value    Sym. Name + Addend</span><br><span class="hljs-string">000000003db8  000000000008 R_X86_64_RELATIVE                    1140</span><br><span class="hljs-string">000000003dc0  000000000008 R_X86_64_RELATIVE                    1100</span><br><span class="hljs-string">000000004008  000000000008 R_X86_64_RELATIVE                    4008</span><br><span class="hljs-string">000000003fd8  000100000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_deregisterTMClone + 0</span><br><span class="hljs-string">000000003fe0  000300000006 R_X86_64_GLOB_DAT 0000000000000000 __libc_start_main@GLIBC_2.2.5 + 0</span><br><span class="hljs-string">000000003fe8  000400000006 R_X86_64_GLOB_DAT 0000000000000000 __gmon_start__ + 0</span><br><span class="hljs-string">000000003ff0  000500000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_registerTMCloneTa + 0</span><br><span class="hljs-string">000000003ff8  000600000006 R_X86_64_GLOB_DAT 0000000000000000 __cxa_finalize@GLIBC_2.2.5 + 0</span><br><span class="hljs-string"></span><br><span class="hljs-string">Relocation section &#x27;</span>.rela.plt<span class="hljs-string">&#x27; at offset 0x5e0 contains 1 entry:</span><br><span class="hljs-string">  Offset          Info           Type           Sym. Value    Sym. Name + Addend</span><br><span class="hljs-string">000000003fd0  000200000007 R_X86_64_JUMP_SLO 0000000000000000 puts@GLIBC_2.2.5 + 0</span><br><span class="hljs-string"></span><br><span class="hljs-string">The decoding of unwind sections for machine type Advanced Micro Devices X86-64 is not currently supported.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Symbol table &#x27;</span>.dynsym<span class="hljs-string">&#x27; contains 7 entries:</span><br><span class="hljs-string">   Num:    Value          Size Type    Bind   Vis      Ndx Name</span><br><span class="hljs-string">     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND </span><br><span class="hljs-string">     1: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterTMCloneTab</span><br><span class="hljs-string">     2: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND puts@GLIBC_2.2.5 (2)</span><br><span class="hljs-string">     3: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __libc_start_main@GLIBC_2.2.5 (2)</span><br><span class="hljs-string">     4: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__</span><br><span class="hljs-string">     5: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_registerTMCloneTable</span><br><span class="hljs-string">     6: 0000000000000000     0 FUNC    WEAK   DEFAULT  UND __cxa_finalize@GLIBC_2.2.5 (2)</span><br><span class="hljs-string"># 现在符号表的地址值不空了</span><br><span class="hljs-string">Symbol table &#x27;</span>.symtab<span class="hljs-string">&#x27; contains 65 entries:</span><br><span class="hljs-string">   Num:    Value          Size Type    Bind   Vis      Ndx Name</span><br><span class="hljs-string">     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND </span><br><span class="hljs-string">     1: 0000000000000318     0 SECTION LOCAL  DEFAULT    1 </span><br><span class="hljs-string">     2: 0000000000000338     0 SECTION LOCAL  DEFAULT    2 </span><br><span class="hljs-string">     3: 0000000000000358     0 SECTION LOCAL  DEFAULT    3 </span><br><span class="hljs-string">     4: 000000000000037c     0 SECTION LOCAL  DEFAULT    4 </span><br><span class="hljs-string">     5: 00000000000003a0     0 SECTION LOCAL  DEFAULT    5 </span><br><span class="hljs-string">     6: 00000000000003c8     0 SECTION LOCAL  DEFAULT    6 </span><br><span class="hljs-string">     7: 0000000000000470     0 SECTION LOCAL  DEFAULT    7 </span><br><span class="hljs-string">     8: 00000000000004f2     0 SECTION LOCAL  DEFAULT    8 </span><br><span class="hljs-string">     9: 0000000000000500     0 SECTION LOCAL  DEFAULT    9 </span><br><span class="hljs-string">    10: 0000000000000520     0 SECTION LOCAL  DEFAULT   10 </span><br><span class="hljs-string">    11: 00000000000005e0     0 SECTION LOCAL  DEFAULT   11 </span><br><span class="hljs-string">    12: 0000000000001000     0 SECTION LOCAL  DEFAULT   12 </span><br><span class="hljs-string">    13: 0000000000001020     0 SECTION LOCAL  DEFAULT   13 </span><br><span class="hljs-string">    14: 0000000000001040     0 SECTION LOCAL  DEFAULT   14 </span><br><span class="hljs-string">    15: 0000000000001050     0 SECTION LOCAL  DEFAULT   15 </span><br><span class="hljs-string">    16: 0000000000001060     0 SECTION LOCAL  DEFAULT   16 </span><br><span class="hljs-string">    17: 00000000000011e8     0 SECTION LOCAL  DEFAULT   17 </span><br><span class="hljs-string">    18: 0000000000002000     0 SECTION LOCAL  DEFAULT   18 </span><br><span class="hljs-string">    19: 0000000000002010     0 SECTION LOCAL  DEFAULT   19 </span><br><span class="hljs-string">    20: 0000000000002058     0 SECTION LOCAL  DEFAULT   20 </span><br><span class="hljs-string">    21: 0000000000003db8     0 SECTION LOCAL  DEFAULT   21 </span><br><span class="hljs-string">    22: 0000000000003dc0     0 SECTION LOCAL  DEFAULT   22 </span><br><span class="hljs-string">    23: 0000000000003dc8     0 SECTION LOCAL  DEFAULT   23 </span><br><span class="hljs-string">    24: 0000000000003fb8     0 SECTION LOCAL  DEFAULT   24 </span><br><span class="hljs-string">    25: 0000000000004000     0 SECTION LOCAL  DEFAULT   25 </span><br><span class="hljs-string">    26: 0000000000004010     0 SECTION LOCAL  DEFAULT   26 </span><br><span class="hljs-string">    27: 0000000000000000     0 SECTION LOCAL  DEFAULT   27 </span><br><span class="hljs-string">    28: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c</span><br><span class="hljs-string">    29: 0000000000001090     0 FUNC    LOCAL  DEFAULT   16 deregister_tm_clones</span><br><span class="hljs-string">    30: 00000000000010c0     0 FUNC    LOCAL  DEFAULT   16 register_tm_clones</span><br><span class="hljs-string">    31: 0000000000001100     0 FUNC    LOCAL  DEFAULT   16 __do_global_dtors_aux</span><br><span class="hljs-string">    32: 0000000000004010     1 OBJECT  LOCAL  DEFAULT   26 completed.8061</span><br><span class="hljs-string">    33: 0000000000003dc0     0 OBJECT  LOCAL  DEFAULT   22 __do_global_dtors_aux_fin</span><br><span class="hljs-string">    34: 0000000000001140     0 FUNC    LOCAL  DEFAULT   16 frame_dummy</span><br><span class="hljs-string">    35: 0000000000003db8     0 OBJECT  LOCAL  DEFAULT   21 __frame_dummy_init_array_</span><br><span class="hljs-string">    36: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS test.c</span><br><span class="hljs-string">    37: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c</span><br><span class="hljs-string">    38: 000000000000215c     0 OBJECT  LOCAL  DEFAULT   20 __FRAME_END__</span><br><span class="hljs-string">    39: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS </span><br><span class="hljs-string">    40: 0000000000003dc0     0 NOTYPE  LOCAL  DEFAULT   21 __init_array_end</span><br><span class="hljs-string">    41: 0000000000003dc8     0 OBJECT  LOCAL  DEFAULT   23 _DYNAMIC</span><br><span class="hljs-string">    42: 0000000000003db8     0 NOTYPE  LOCAL  DEFAULT   21 __init_array_start</span><br><span class="hljs-string">    43: 0000000000002010     0 NOTYPE  LOCAL  DEFAULT   19 __GNU_EH_FRAME_HDR</span><br><span class="hljs-string">    44: 0000000000003fb8     0 OBJECT  LOCAL  DEFAULT   24 _GLOBAL_OFFSET_TABLE_</span><br><span class="hljs-string">    45: 0000000000001000     0 FUNC    LOCAL  DEFAULT   12 _init</span><br><span class="hljs-string">    46: 00000000000011e0     5 FUNC    GLOBAL DEFAULT   16 __libc_csu_fini</span><br><span class="hljs-string">    47: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterTMCloneTab</span><br><span class="hljs-string">    48: 0000000000004000     0 NOTYPE  WEAK   DEFAULT   25 data_start</span><br><span class="hljs-string">    49: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND puts@@GLIBC_2.2.5</span><br><span class="hljs-string">    50: 0000000000004010     0 NOTYPE  GLOBAL DEFAULT   25 _edata</span><br><span class="hljs-string">    51: 00000000000011e8     0 FUNC    GLOBAL HIDDEN    17 _fini</span><br><span class="hljs-string">    52: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __libc_start_main@@GLIBC_</span><br><span class="hljs-string">    53: 0000000000004000     0 NOTYPE  GLOBAL DEFAULT   25 __data_start</span><br><span class="hljs-string">    54: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__</span><br><span class="hljs-string">    55: 0000000000004008     0 OBJECT  GLOBAL HIDDEN    25 __dso_handle</span><br><span class="hljs-string">    56: 0000000000002000     4 OBJECT  GLOBAL DEFAULT   18 _IO_stdin_used</span><br><span class="hljs-string">    57: 0000000000001170   101 FUNC    GLOBAL DEFAULT   16 __libc_csu_init</span><br><span class="hljs-string">    58: 0000000000004018     0 NOTYPE  GLOBAL DEFAULT   26 _end</span><br><span class="hljs-string">    59: 0000000000001060    47 FUNC    GLOBAL DEFAULT   16 _start</span><br><span class="hljs-string">    60: 0000000000004010     0 NOTYPE  GLOBAL DEFAULT   26 __bss_start</span><br><span class="hljs-string">    61: 0000000000001149    27 FUNC    GLOBAL DEFAULT   16 main</span><br><span class="hljs-string">    62: 0000000000004010     0 OBJECT  GLOBAL HIDDEN    25 __TMC_END__</span><br><span class="hljs-string">    63: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_registerTMCloneTable</span><br><span class="hljs-string">    64: 0000000000000000     0 FUNC    WEAK   DEFAULT  UND __cxa_finalize@@GLIBC_2.2</span><br><span class="hljs-string"></span><br><span class="hljs-string">Histogram for `.gnu.hash&#x27;</span> bucket list length (total of 2 buckets):<br> Length  Number     % of total  Coverage<br>      0  1          ( 50.0%)<br>      1  1          ( 50.0%)    100.0%<br><br>Version symbols section <span class="hljs-string">&#x27;.gnu.version&#x27;</span> contains 7 entries:<br> Addr: 0x00000000000004f2  Offset: 0x0004f2  Link: 6 (.dynsym)<br>  000:   0 (*<span class="hljs-built_in">local</span>*)       0 (*<span class="hljs-built_in">local</span>*)       2 (GLIBC_2.2.5)   2 (GLIBC_2.2.5)<br>  004:   0 (*<span class="hljs-built_in">local</span>*)       0 (*<span class="hljs-built_in">local</span>*)       2 (GLIBC_2.2.5)<br><br>Version needs section <span class="hljs-string">&#x27;.gnu.version_r&#x27;</span> contains 1 entry:<br> Addr: 0x0000000000000500  Offset: 0x000500  Link: 7 (.dynstr)<br>  000000: Version: 1  File: libc.so.6  Cnt: 1<br>  0x0010:   Name: GLIBC_2.2.5  Flags: none  Version: 2<br><br>Displaying notes found <span class="hljs-keyword">in</span>: .note.gnu.property<br>  Owner                Data size Description<br>  GNU                  0x00000010NT_GNU_PROPERTY_TYPE_0<br>      Properties: x86 feature: IBT, SHSTK<br><br>Displaying notes found <span class="hljs-keyword">in</span>: .note.gnu.build-id<br>  Owner                Data size Description<br>  GNU                  0x00000014NT_GNU_BUILD_ID (unique build ID bitstring)<br>    Build ID: 1fbbe46df4a06904e20ce722c19cfdfcd468895d<br><br>Displaying notes found <span class="hljs-keyword">in</span>: .note.ABI-tag<br>  Owner                Data size Description<br>  GNU                  0x00000010NT_GNU_ABI_TAG (ABI version tag)<br>    OS: Linux, ABI: 3.2.0<br></code></pre></td></tr></table></figure><h3 id="2-关于ELF格式"><a href="#2-关于ELF格式" class="headerlink" title="2. 关于ELF格式"></a>2. 关于ELF格式</h3><p>程序源代码编译后分为以下两种段：</p><ul><li><p>程序指令</p><ul><li><p>.text段</p><p>执行语句的机器代码</p></li></ul></li><li><p>程序数据</p><ul><li><p>.data段</p><p>初始化的全局变量和局部静态变量</p></li><li><p>.bss段</p><p>未初始化的全局变量和局部静态变量。.bss段这是为未初始化的全局变量与局部静态变量预留位置，并没有内容，所以在文件中也不占据空间。</p></li></ul></li></ul><img src="/2023/05/06/%E4%BB%8Ehelloworld%E7%9C%8B%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BC%96%E8%AF%91%E4%B8%8E%E9%93%BE%E6%8E%A5/image-20230506134756517.png" class title="image-20230506134756517"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看ELF文件的代码段、数据段和BSS段长度</span><br>size ./test<br><span class="hljs-comment">#    text   data    bss    dec    hexfilename</span><br><span class="hljs-comment">#    1565    600      8   2173    87d./test</span><br><br><span class="hljs-comment"># 查看目标文件的结构与内容</span><br>objdump -h ./test<br><br><span class="hljs-comment"># 使用nm查看符号</span><br>nm ./test<br><span class="hljs-comment"># 输出</span><br>    0000000000004010 B __bss_start<br>    0000000000004010 b completed.8061<br>                     w __cxa_finalize@@GLIBC_2.2.5<br>    0000000000004000 D __data_start<br><span class="hljs-comment"># ......</span><br></code></pre></td></tr></table></figure><h3 id="3-参考文档"><a href="#3-参考文档" class="headerlink" title="3. 参考文档"></a>3. 参考文档</h3><p>《程序员的自我修养—链接、装载与库》</p><hr><h3 id="4-补充知识"><a href="#4-补充知识" class="headerlink" title="4. 补充知识"></a>4. 补充知识</h3><ul><li>关于ABI与API</li></ul><p>符号修饰标准、变量内存布局以及函数调用方式等这些与可执行代码<strong>二进制兼容性</strong>相关的内容成为ABI。API与ABI实际都是应用程序接口，只不过描述的<strong>层面</strong>不一样。</p><p>API一般是<strong>源代码级别</strong>的接口，而ABI指的是<strong>二进制层面</strong>的接口。</p><p>注意，API相同并不代表ABI相同。</p><ul><li>为什么说C++的ABI兼容性差？</li></ul><p>ChatGPT：</p><p>C++的ABI兼容性差主要是由于以下两个原因：</p><ol><li>名称修饰方式不统一：不同编译器可能会有不同的名称修饰方式，即对于同一个函数名，不同编译器生成的二进制代码可能不同，导致链接时无法找到符号。解决这个问题的方法就是要求所有编译器都使用同样的名称修饰方式。</li><li>类的布局方式不统一：在 C++ 中，类的内存布局方式由编译器决定，这取决于编译器对于虚函数表的管理方式、对于空类、单继承或多继承类的内存分布等等。如果不同的编译器使用不同的布局方式，则在链接时就会出现链接错误或者难以调试的问题。因此，为了解决这个问题，需要对 C++ 的类进行 ABI 规范，如 Itanium C++ ABI，它规定了 C++ 的类的布局方式，从而使得在使用不同编译器编译的代码可以进行链接和调用。</li></ol><p>由于 C++ 语言的发展越来越快，加上 C++ 语言的语法繁多，导致 C++ 的标准版本和编译器的版本之间在 ABI 兼容性方面存在较大的问题，这也让 C++ 的 ABI 兼容性变得很差。因此，如果要在不同平台之间共享 C++ 库，需要注意 ABI 兼容性问题。</p>]]></content>
    
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>计算机科学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于TCP_options中的timestamps</title>
    <link href="/2023/05/05/%E5%85%B3%E4%BA%8ETCP-options%E4%B8%AD%E7%9A%84timestamps/"/>
    <url>/2023/05/05/%E5%85%B3%E4%BA%8ETCP-options%E4%B8%AD%E7%9A%84timestamps/</url>
    
    <content type="html"><![CDATA[<h1 id="关于TCP-options-中的-timestamps"><a href="#关于TCP-options-中的-timestamps" class="headerlink" title="关于TCP options 中的 timestamps"></a>关于TCP options 中的 timestamps</h1><blockquote><p>Linux内核版本：5.10.104</p></blockquote><h3 id="1-TCP-timestamp简介"><a href="#1-TCP-timestamp简介" class="headerlink" title="1. TCP timestamp简介"></a>1. TCP timestamp简介</h3><h4 id="1-1-TCP-timestamp的作用"><a href="#1-1-TCP-timestamp的作用" class="headerlink" title="1.1 TCP timestamp的作用"></a>1.1 TCP timestamp的作用</h4><p>TCP header最大为60字节，固定的20字节长度以及最大40字节的options。本次介绍 option字段中的timestamps。</p><img src="/2023/05/05/%E5%85%B3%E4%BA%8ETCP-options%E4%B8%AD%E7%9A%84timestamps/image-20230420155727582.png" class title="image-20230420155727582"><p>它主要用于以下2个方面：</p><ul><li>超时重传时间RTO动态更新<ul><li>TCP作为可靠的传输协议，一个重要的机制就是超时重传。因此如何计算一个准确(合适)的重传超时时间（RTO, Retransmission TimeOut）对于TCP性能有着重要的影响。</li></ul></li><li>PAWS防止序号回绕<ul><li>PAWS 的全称是 Protection Against Wrapped Sequences，即防止序号回绕。它的本质实际上是<strong>利用 TCP Timestamp 选项的单调递增特性来识别老旧的报文</strong>，防止这些老旧报文的干扰。</li></ul></li></ul><p>与此同时，我们还可以使用TCP timestam来精准的估算**报文往返时间(round-trip-time, RTT)**。</p><h4 id="1-2-TCP-timestamp的组成"><a href="#1-2-TCP-timestamp的组成" class="headerlink" title="1.2 TCP timestamp的组成"></a>1.2 TCP timestamp的组成</h4><p>TCP Timestamps Option 由四部分构成：</p><ul><li>类别（kind）</li><li>长度（Length）</li><li>发送方时间戳（TS value）</li><li>回显时间戳（TS Echo Reply）</li></ul><p>时间戳选项类别（kind）的值等于 8，用来与其它类型的选项区分。长度（length）等于 10。两个时间戳相关的选项都是 4 字节。</p><blockquote><p>Linux内核：#define TCPOPT_TIMESTAMP    8   &#x2F;* Better RTT estimations&#x2F;PAWS *&#x2F;</p></blockquote><img src="/2023/05/05/%E5%85%B3%E4%BA%8ETCP-options%E4%B8%AD%E7%9A%84timestamps/image-20230420155750385.png" class title="image-20230420155750385"><h4 id="1-3-TCP-timestamp的开启"><a href="#1-3-TCP-timestamp的开启" class="headerlink" title="1.3 TCP timestamp的开启"></a>1.3 TCP timestamp的开启</h4><p>Linux内核中tcp_timestamp默认是开启的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// net/ipv4/tcp_ipv4.c</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> __net_init <span class="hljs-title function_">tcp_sk_init</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> net *net)</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br>    net-&gt;ipv4.sysctl_max_syn_backlog = max(<span class="hljs-number">128</span>, cnt / <span class="hljs-number">128</span>);<br>net-&gt;ipv4.sysctl_tcp_sack = <span class="hljs-number">1</span>;<br>net-&gt;ipv4.sysctl_tcp_window_scaling = <span class="hljs-number">1</span>;<br>net-&gt;ipv4.sysctl_tcp_timestamps = <span class="hljs-number">1</span>;    <span class="hljs-comment">// 默认是开启的</span><br>net-&gt;ipv4.sysctl_tcp_early_retrans = <span class="hljs-number">3</span>;<br>net-&gt;ipv4.sysctl_tcp_recovery = TCP_RACK_LOSS_DETECTION;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意的是，timestamps是一个<strong>双向</strong>的选项。当一方不开启时，两方都将停用timestamps。比如client端发送的SYN包中带有timestamp选项，但server端并没有开启该选项。则回复的SYN-ACK将不带timestamp选项，同时client后续回复的ACK也不会带有timestamp选项。当然，如果client发送的SYN包中就不带timestamp，双向都将停用timestamp。</p><h4 id="1-4-使用wireshark看TCP-timestamp的工作过程"><a href="#1-4-使用wireshark看TCP-timestamp的工作过程" class="headerlink" title="1.4 使用wireshark看TCP timestamp的工作过程"></a>1.4 使用wireshark看TCP timestamp的工作过程</h4><p>如图所示，在TCP连接三次握手时，发送方发送数据时，将一个发送时间戳 <code>1734581141</code> 放在发送方时间戳<code>TSval</code>中，接收方收到数据包以后，将收到的时间戳 <code>1734581141</code> 原封不动的返回给发送方，放在<code>TSecr</code>字段中，同时把自己的时间戳 <code>3303928779</code> 放在<code>TSval</code>中。</p><img src="/2023/05/05/%E5%85%B3%E4%BA%8ETCP-options%E4%B8%AD%E7%9A%84timestamps/b2e50f7b18256adaaf0313304b3cacf2_1426x1254.png" alt="img" style="zoom:40%;"><p>接下来使用wireshark查看TCP三次握手时，TCP timestamp的变化。使用SSH连接远程服务器，此时会建立一条TCP连接，以下是三次握手时的报文。</p><ul><li>客户端向服务端发起连接请求（第一次）</li></ul><p>此时记录了客户端的时间戳 <code>TSval = 3810596399</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">Transmission Control Protocol, Src Port: 36358, Dst Port: 22, Seq: 0, Len: 0<br>    Source Port: 36358<br>    Destination Port: 22<br>    Options: (20 bytes), Maximum segment size, SACK permitted, Timestamps, No-Operation (NOP), Window scale<br>        TCP Option - Maximum segment size: 1460 bytes<br>        TCP Option - SACK permitted<br>        TCP Option - Timestamps: TSval 3810596399, TSecr 0<br>            Kind: Time Stamp Option (8)<br>            Length: 10<br>            Timestamp value: 3810596399<br>            Timestamp <span class="hljs-built_in">echo</span> reply: 0<br></code></pre></td></tr></table></figure><ul><li>服务端向客户端响应ACK（第二次）<ul><li>TSval &#x3D; 1878823122</li><li>TSecr &#x3D; 3810596399， 客户端发起SYN的时间</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">Transmission Control Protocol, Src Port: 22, Dst Port: 36358, Seq: 0, Ack: 1, Len: 0<br>    Source Port: 22<br>    Destination Port: 36358<br>    Options: (20 bytes), Maximum segment size, SACK permitted, Timestamps, No-Operation (NOP), Window scale<br>        TCP Option - Maximum segment size: 1380 bytes<br>        TCP Option - SACK permitted<br>        TCP Option - Timestamps: TSval 1878823122, TSecr 3810596399<br>            Kind: Time Stamp Option (8)<br>            Length: 10<br>            Timestamp value: 1878823122<br>            Timestamp <span class="hljs-built_in">echo</span> reply: 3810596399<br></code></pre></td></tr></table></figure><ul><li>客户端影响服务端（第三次）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">Transmission Control Protocol, Src Port: 36358, Dst Port: 22, Seq: 1, Ack: 1, Len: 0<br>    Source Port: 36358<br>    Destination Port: 22<br>    Options: (12 bytes), No-Operation (NOP), No-Operation (NOP), Timestamps<br>        TCP Option - No-Operation (NOP)<br>        TCP Option - No-Operation (NOP)<br>        TCP Option - Timestamps: TSval 3810596425, TSecr 1878823122<br>            Kind: Time Stamp Option (8)<br>            Length: 10<br>            Timestamp value: 3810596425<br>            Timestamp <span class="hljs-built_in">echo</span> reply: 1878823122<br></code></pre></td></tr></table></figure><h3 id="2-TCP-timestamp源码解析"><a href="#2-TCP-timestamp源码解析" class="headerlink" title="2. TCP timestamp源码解析"></a>2. TCP timestamp源码解析</h3><h4 id="2-1-TCP-timestamp单位是什么"><a href="#2-1-TCP-timestamp单位是什么" class="headerlink" title="2.1 TCP timestamp单位是什么"></a>2.1 TCP timestamp单位是什么</h4><p>TCP timestamp的单位本身并不是常规的时间，如微秒、纳秒等等，而是一个与具体时间相关的成比例的相对的虚拟时间单位。</p><p>而在具体实现上，在Linux内核中，它与<code>TCP_TS_HZ</code>有关，其值为1000。因此，实际上，Linux内核中的TCP timestamp，即<strong>真实时间尺度(s)的1000倍</strong>。注意，是尺度，不是时刻。</p><p> 在Linux内核中，以下为纳秒转换为TCP timestamp时间戳的函数。</p><p><code>div_u64</code>将进行除法运算，并取整。</p><p><code>NSEC_PER_SEC / TCP_TS_HZ</code>表示一个TCP timestamp时间戳计数单位为多少纳秒。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// include/net/tcp.h</span><br><span class="hljs-comment">/* Convert a nsec timestamp into TCP TSval timestamp (ms based currently) */</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> u32 <span class="hljs-title function_">tcp_ns_to_ts</span><span class="hljs-params">(u64 ns)</span><br>&#123;<br><span class="hljs-keyword">return</span> div_u64(ns, NSEC_PER_SEC / TCP_TS_HZ);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>个人认为，值本身并没有意义，差值才有真实时间尺度下的意义。</p></blockquote><h4 id="2-2-TCP-timestamp的发送构造"><a href="#2-2-TCP-timestamp的发送构造" class="headerlink" title="2.2 TCP timestamp的发送构造"></a>2.2 TCP timestamp的发送构造</h4><p>在TCP三次握手流程中，当客户端发送SYN包时， TCP timestamp将构造在SYN发送报文中，整个过程如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// net/ipv4/tcp_ipv4.c</span><br><span class="hljs-comment">/* This will initiate an outgoing connection. */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">tcp_v4_connect</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> sock *sk, <span class="hljs-keyword">struct</span> sockaddr *uaddr, <span class="hljs-type">int</span> addr_len)</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">if</span> (likely(!tp-&gt;repair)) &#123;<br>        <span class="hljs-keyword">if</span> (!tp-&gt;write_seq)<br>            WRITE_ONCE(tp-&gt;write_seq,<br>                       secure_tcp_seq(inet-&gt;inet_saddr,<br>                                      inet-&gt;inet_daddr,<br>                                      inet-&gt;inet_sport,<br>                                      usin-&gt;sin_port));<br>        <span class="hljs-comment">// 根据源地址与目标地址等输入计算偏移值</span><br>        tp-&gt;tsoffset = secure_tcp_ts_off(sock_net(sk),<br>                                         inet-&gt;inet_saddr,<br>                                         inet-&gt;inet_daddr);<br>    &#125;<br>    <span class="hljs-comment">// ...</span><br>    err = tcp_connect(sk);  <span class="hljs-comment">// 构建完整的syn报文，并发送</span><br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>tcp_connect</code>构建完整的SYN报文，并发送。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// net/ipv4/tcp_output.c</span><br><br><span class="hljs-comment">/* Build a SYN and send it off. */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">tcp_connect</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> sock *sk)</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br><span class="hljs-comment">// 申请 skb，并构造为一个SYN包</span><br>buff = sk_stream_alloc_skb(sk, <span class="hljs-number">0</span>, sk-&gt;sk_allocation, <span class="hljs-literal">true</span>);<br><span class="hljs-keyword">if</span> (unlikely(!buff))<br><span class="hljs-keyword">return</span> -ENOBUFS;<br><br>tcp_init_nondata_skb(buff, tp-&gt;write_seq++, TCPHDR_SYN);<br>    <span class="hljs-comment">// 记录发送时间 tcp_mstamp， 单位 us， 同时记录 tcp_clock_cache</span><br>tcp_mstamp_refresh(tp); <br>tp-&gt;retrans_stamp = tcp_time_stamp(tp); <span class="hljs-comment">// 记录重传时间，单位 TCP timestamp</span><br><br><span class="hljs-comment">/* Send off SYN; include data in Fast Open. */</span><br>err = tp-&gt;fastopen_req ? tcp_send_syn_data(sk, buff) :  <br>      tcp_transmit_skb(sk, buff, <span class="hljs-number">1</span>, sk-&gt;sk_allocation); <span class="hljs-comment">// 包的发送</span><br><span class="hljs-keyword">if</span> (err == -ECONNREFUSED)<br><span class="hljs-keyword">return</span> err;<br>    <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>EXPORT_SYMBOL(tcp_connect);<br><br><span class="hljs-comment">/* Refresh clocks of a TCP socket,</span><br><span class="hljs-comment"> * ensuring monotically increasing values.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">tcp_mstamp_refresh</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> tcp_sock *tp)</span><br>&#123;<br>u64 val = tcp_clock_ns();<br><br>tp-&gt;tcp_clock_cache = val;   <span class="hljs-comment">// 将当前时间写入tcp_clock_cache， 单位 ns</span><br>tp-&gt;tcp_mstamp = div_u64(val, NSEC_PER_USEC);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>tcp_transmit_skb</code>调用到<code>__tcp_transmit_skb</code>，完成TCP header的构建后，调用<code>ip_queue_xmit</code>，移交IP层处理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// net/ipv4/tcp_output.c</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> __tcp_transmit_skb(<span class="hljs-keyword">struct</span> sock *sk, <span class="hljs-keyword">struct</span> sk_buff *skb,<br>      <span class="hljs-type">int</span> clone_it, <span class="hljs-type">gfp_t</span> gfp_mask, u32 rcv_nxt)<br>&#123;<br>    <span class="hljs-comment">// ...</span><br>    tp = tcp_sk(sk);<br>prior_wstamp = tp-&gt;tcp_wstamp_ns;  <span class="hljs-comment">// 保存之前的时间</span><br>tp-&gt;tcp_wstamp_ns = max(tp-&gt;tcp_wstamp_ns, tp-&gt;tcp_clock_cache);<br>skb-&gt;skb_mstamp_ns = tp-&gt;tcp_wstamp_ns;  <span class="hljs-comment">// 造包时间，单位 ns</span><br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">if</span> (unlikely(tcb-&gt;tcp_flags &amp; TCPHDR_SYN)) &#123;<br>        <span class="hljs-comment">// 建立连接时的SYN包， TCP options构造</span><br>tcp_options_size = tcp_syn_options(sk, skb, &amp;opts, &amp;md5);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 已连接的TCP连接， TCP options构造</span><br>tcp_options_size = tcp_established_options(sk, skb, &amp;opts,<br>   &amp;md5);<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-comment">/* BPF prog is the last one writing header option */</span><br>    <span class="hljs-comment">// 用BPF技术也可以造TCP options包（开启相关配置）</span><br>bpf_skops_write_hdr_opt(sk, skb, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, &amp;opts);<br>    <span class="hljs-comment">// ...</span><br>    err = INDIRECT_CALL_INET(icsk-&gt;icsk_af_ops-&gt;queue_xmit,<br>                                 inet6_csk_xmit, ip_queue_xmit, <span class="hljs-comment">// 发送到IP层</span><br>                                 sk, skb, &amp;inet-&gt;cork.fl);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Compute TCP options for SYN packets. This is not the final</span><br><span class="hljs-comment"> * network wire format yet.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tcp_syn_options</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> sock *sk, <span class="hljs-keyword">struct</span> sk_buff *skb,</span><br><span class="hljs-params"><span class="hljs-keyword">struct</span> tcp_out_options *opts,</span><br><span class="hljs-params"><span class="hljs-keyword">struct</span> tcp_md5sig_key **md5)</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">if</span> (likely(sock_net(sk)-&gt;ipv4.sysctl_tcp_timestamps &amp;&amp; !*md5)) &#123;<br>opts-&gt;options |= OPTION_TS;<br>        <span class="hljs-comment">// 当前时间的TCP timestamp时间单位</span><br>        <span class="hljs-comment">// 补偿tsoffset在解析TCP timestamp时会减掉</span><br>        <span class="hljs-comment">// tp-&gt;tsoffset 下文会阐述</span><br>opts-&gt;tsval = tcp_skb_timestamp(skb) + tp-&gt;tsoffset;  <br>opts-&gt;tsecr = tp-&gt;rx_opt.ts_recent;<br>remaining -= TCPOLEN_TSTAMP_ALIGNED;<br>&#125; <br>&#125;<br><span class="hljs-type">static</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tcp_established_options</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> sock *sk, <span class="hljs-keyword">struct</span> sk_buff *skb,</span><br><span class="hljs-params"><span class="hljs-keyword">struct</span> tcp_out_options *opts,</span><br><span class="hljs-params"><span class="hljs-keyword">struct</span> tcp_md5sig_key **md5)</span><br>&#123;<br>     <span class="hljs-comment">//...</span><br>      <span class="hljs-keyword">if</span> (likely(tp-&gt;rx_opt.tstamp_ok)) &#123;<br>            opts-&gt;options |= OPTION_TS;<br>            opts-&gt;tsval = skb ? tcp_skb_timestamp(skb) + tp-&gt;tsoffset : <span class="hljs-number">0</span>; <span class="hljs-comment">// 2</span><br>            opts-&gt;tsecr = tp-&gt;rx_opt.ts_recent;<br>            size += TCPOLEN_TSTAMP_ALIGNED;<br>      &#125;<br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// include/net/tcp.h</span><br><span class="hljs-comment">// 返回TCP timestamp时间单位</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> u32 <span class="hljs-title function_">tcp_skb_timestamp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> sk_buff *skb)</span><br>&#123;<br><span class="hljs-keyword">return</span> tcp_ns_to_ts(skb-&gt;skb_mstamp_ns);  <span class="hljs-comment">// 这个实际就是造包时间，单位 ns</span><br>&#125;<br>  <br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> u32 <span class="hljs-title function_">tcp_ns_to_ts</span><span class="hljs-params">(u64 ns)</span><br>&#123;<br><span class="hljs-keyword">return</span> div_u64(ns, NSEC_PER_SEC / TCP_TS_HZ);<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NSEC_PER_SEC1000000000L</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Deliver a 32bit value for TCP timestamp option (RFC 7323)</span><br><span class="hljs-comment"> * It is no longer tied to jiffies, but to 1 ms clock.</span><br><span class="hljs-comment"> * Note: double check if you want to use tcp_jiffies32 instead of this.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TCP_TS_HZ1000</span><br></code></pre></td></tr></table></figure><h4 id="2-3-TCP-timestamp的接收回显"><a href="#2-3-TCP-timestamp的接收回显" class="headerlink" title="2.3 TCP timestamp的接收回显"></a>2.3 TCP timestamp的接收回显</h4><p>在2.2节中阐述了TCP三次握手中的SYN发送的全过程，因本文主要讲述TCP timestamp，为避免篇幅过程，以下仅描述SYN-ACK与ACK中涉及TCP timestamp的部分。</p><ul><li>SYN-ACK</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// net/ipv4/tcp_ipv4.c</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *Send a SYN-ACK after having received a SYN.</span><br><span class="hljs-comment"> *This still operates on a request_sock only, not on a big</span><br><span class="hljs-comment"> *socket.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tcp_v4_send_synack</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> sock *sk, <span class="hljs-keyword">struct</span> dst_entry *dst,</span><br><span class="hljs-params">      <span class="hljs-keyword">struct</span> flowi *fl,</span><br><span class="hljs-params">      <span class="hljs-keyword">struct</span> request_sock *req,</span><br><span class="hljs-params">      <span class="hljs-keyword">struct</span> tcp_fastopen_cookie *foc,</span><br><span class="hljs-params">      <span class="hljs-keyword">enum</span> tcp_synack_type synack_type,</span><br><span class="hljs-params">      <span class="hljs-keyword">struct</span> sk_buff *syn_skb)</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-comment">// 构造 SYN-ACK包</span><br>    skb = tcp_make_synack(sk, dst, req, foc, synack_type, syn_skb);<br>    <span class="hljs-comment">// ...</span><br>    err = ip_build_and_send_pkt(skb, sk, ireq-&gt;ir_loc_addr,<br>    ireq-&gt;ir_rmt_addr,<br>    rcu_dereference(ireq-&gt;ireq_opt),<br>    tos);<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>tcp_make_synack</code>中的<code>tcp_synack_options</code>函数中，将构造TCP timestamp。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// net/ipv4/tcp_output.c</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * tcp_make_synack - Allocate one skb and build a SYNACK packet.</span><br><span class="hljs-comment"> * @sk: listener socket</span><br><span class="hljs-comment"> * @dst: dst entry attached to the SYNACK. It is consumed and caller</span><br><span class="hljs-comment"> *       should not use it again.</span><br><span class="hljs-comment"> * @req: request_sock pointer</span><br><span class="hljs-comment"> * @foc: cookie for tcp fast open</span><br><span class="hljs-comment"> * @synack_type: Type of synack to prepare</span><br><span class="hljs-comment"> * @syn_skb: SYN packet just received.  It could be NULL for rtx case.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">struct</span> sk_buff *<span class="hljs-title function_">tcp_make_synack</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> sock *sk, <span class="hljs-keyword">struct</span> dst_entry *dst,</span><br><span class="hljs-params"><span class="hljs-keyword">struct</span> request_sock *req,</span><br><span class="hljs-params"><span class="hljs-keyword">struct</span> tcp_fastopen_cookie *foc,</span><br><span class="hljs-params"><span class="hljs-keyword">enum</span> tcp_synack_type synack_type,</span><br><span class="hljs-params"><span class="hljs-keyword">struct</span> sk_buff *syn_skb)</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-comment">/* bpf program will be interested in the tcp_flags */</span><br>TCP_SKB_CB(skb)-&gt;tcp_flags = TCPHDR_SYN | TCPHDR_ACK;<br>    <span class="hljs-comment">// TCP options 构造</span><br>tcp_header_size = tcp_synack_options(sk, req, mss, skb, &amp;opts, md5,<br>     foc, synack_type,<br>     syn_skb) + <span class="hljs-keyword">sizeof</span>(*th);<br>    <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-comment">/* Set up TCP options for SYN-ACKs. */</span><br><span class="hljs-type">static</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tcp_synack_options</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> sock *sk,</span><br><span class="hljs-params">       <span class="hljs-keyword">struct</span> request_sock *req,</span><br><span class="hljs-params">       <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> mss, <span class="hljs-keyword">struct</span> sk_buff *skb,</span><br><span class="hljs-params">       <span class="hljs-keyword">struct</span> tcp_out_options *opts,</span><br><span class="hljs-params">       <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> tcp_md5sig_key *md5,</span><br><span class="hljs-params">       <span class="hljs-keyword">struct</span> tcp_fastopen_cookie *foc,</span><br><span class="hljs-params">       <span class="hljs-keyword">enum</span> tcp_synack_type synack_type,</span><br><span class="hljs-params">       <span class="hljs-keyword">struct</span> sk_buff *syn_skb)</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">if</span> (likely(ireq-&gt;tstamp_ok)) &#123;<br>opts-&gt;options |= OPTION_TS;<br>            <span class="hljs-comment">// 构造 TCP timestamp</span><br>opts-&gt;tsval = tcp_skb_timestamp(skb) + tcp_rsk(req)-&gt;ts_off; <br>opts-&gt;tsecr = req-&gt;ts_recent;<br>remaining -= TCPOLEN_TSTAMP_ALIGNED;<br>&#125;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>ACK</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// net/ipv4/tcp_ipv4.c</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">tcp_v4_reqsk_send_ack</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> sock *sk, <span class="hljs-keyword">struct</span> sk_buff *skb,</span><br><span class="hljs-params">  <span class="hljs-keyword">struct</span> request_sock *req)</span><br>&#123;<br>tcp_v4_send_ack(sk, skb, seq,<br>tcp_rsk(req)-&gt;rcv_nxt,<br>req-&gt;rsk_rcv_wnd &gt;&gt; inet_rsk(req)-&gt;rcv_wscale,<br>tcp_time_stamp_raw() + tcp_rsk(req)-&gt;ts_off,  <span class="hljs-comment">// 构造TCP timestamp</span><br>req-&gt;ts_recent,<br><span class="hljs-number">0</span>,<br>tcp_md5_do_lookup(sk, l3index, addr, AF_INET),<br>inet_rsk(req)-&gt;no_srccheck ? IP_REPLY_ARG_NOSRCCHECK : <span class="hljs-number">0</span>,<br>ip_hdr(skb)-&gt;tos);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">tcp_v4_send_ack</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> sock *sk,</span><br><span class="hljs-params">    <span class="hljs-keyword">struct</span> sk_buff *skb, u32 seq, u32 ack,</span><br><span class="hljs-params">    u32 win, u32 tsval, u32 tsecr, <span class="hljs-type">int</span> oif,</span><br><span class="hljs-params">    <span class="hljs-keyword">struct</span> tcp_md5sig_key *key,</span><br><span class="hljs-params">    <span class="hljs-type">int</span> reply_flags, u8 tos)</span><br>&#123;<br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcphdr</span> *<span class="hljs-title">th</span> =</span> tcp_hdr(skb);<br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcphdr</span> <span class="hljs-title">th</span>;</span><br>__be32 opt[(TCPOLEN_TSTAMP_ALIGNED &gt;&gt; <span class="hljs-number">2</span>)<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_TCP_MD5SIG</span><br>   + (TCPOLEN_MD5SIG_ALIGNED &gt;&gt; <span class="hljs-number">2</span>)<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>];<br>&#125; rep;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-comment">// 如果发送者带时间戳，接受者回ack时，也会把数据写到 opt中</span><br>    <span class="hljs-keyword">if</span> (tsecr) &#123;<br>rep.opt[<span class="hljs-number">0</span>] = htonl((TCPOPT_NOP &lt;&lt; <span class="hljs-number">24</span>) | (TCPOPT_NOP &lt;&lt; <span class="hljs-number">16</span>) |<br>   (TCPOPT_TIMESTAMP &lt;&lt; <span class="hljs-number">8</span>) |<br>   TCPOLEN_TIMESTAMP);<br>rep.opt[<span class="hljs-number">1</span>] = htonl(tsval);   <span class="hljs-comment">// timestamp value</span><br>rep.opt[<span class="hljs-number">2</span>] = htonl(tsecr);   <span class="hljs-comment">// timestamp echo value</span><br>arg.iov[<span class="hljs-number">0</span>].iov_len += TCPOLEN_TSTAMP_ALIGNED;<br>&#125;  <br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-如何提取TCP-timestamp"><a href="#3-如何提取TCP-timestamp" class="headerlink" title="3. 如何提取TCP timestamp"></a>3. 如何提取TCP timestamp</h3><h4 id="3-1-根据TCP-head偏移计算"><a href="#3-1-根据TCP-head偏移计算" class="headerlink" title="3.1 根据TCP head偏移计算"></a>3.1 根据TCP head偏移计算</h4><p>思路：找到tcp header，计算出偏移地址找到options的起始位置。依次遍历option的类型，找到TCPOPT_TIMESTAMP，再计算出tsval和tsecr的偏移以便取出值。</p><p>程序基于<code>libbpf</code>开发，源码如下：</p><blockquote><p>查看消息：root用户  <code>cat /sys/kernel/debug/tracing/trace_pipe</code></p></blockquote><p>关于下述程序源码中的TCPOPT_NOP：</p><p>在TCP头部中，nop选项表示为一个字节的值0x01，这个值被称为”无操作码”（no-op code）。当它出现在TCP选项字段中时，它不会执行任何实际的操作，只是被用来占位。如果有多个nop选项，它们连续地填充了TCP头部中的字节，以便满足对齐要求。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c">SEC(<span class="hljs-string">&quot;kprobe/tcp_v4_rcv&quot;</span>) <br><span class="hljs-type">int</span> <span class="hljs-title function_">BPF_KPROBE</span><span class="hljs-params">(tcp_v4_rcv,<span class="hljs-keyword">struct</span> sk_buff *skb,<span class="hljs-keyword">struct</span> sock *sk)</span>&#123; <br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcphdr</span> <span class="hljs-title">tcph</span> ;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcphdr</span> *<span class="hljs-title">tcph_ptr</span> =</span> skb_to_tcphdr(skb);<br>    bpf_probe_read(&amp;tcph,<span class="hljs-keyword">sizeof</span>(tcph),tcph_ptr);<br>    u16 doff = tcph.doff;<br>    <span class="hljs-comment">// doff * 4 即 TCP 头的长度</span><br>    <span class="hljs-keyword">if</span> (tcph_ptr != <span class="hljs-literal">NULL</span> &amp;&amp; doff &gt; <span class="hljs-number">5</span>) &#123;<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> options ;<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *opt_base = (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)(tcph_ptr + <span class="hljs-number">1</span>);<br>        u32 offset = <span class="hljs-number">0</span>;<br>        bpf_probe_read(&amp;options,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>),opt_base);<br>        <span class="hljs-type">int</span> optlen = (doff * <span class="hljs-number">4</span>) - <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> tcphdr); <span class="hljs-comment">// 获取 TCP option 长度</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcp_sock</span> *<span class="hljs-title">ts</span>;</span><br>        ts = (<span class="hljs-keyword">struct</span> tcp_sock *)(sk);<br>        <span class="hljs-comment">// FIXME：目前仅遍历option字段中的前12字节</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">12</span> &amp;&amp; optlen &gt; <span class="hljs-number">0</span>; i++) &#123; <br>            <span class="hljs-keyword">if</span> (options == TCPOPT_NOP) &#123;<br>                offset++;<br>                bpf_probe_read(&amp;options,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>),opt_base+offset);<br>                optlen--;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (options == TCPOPT_TIMESTAMP) &#123;<br>                u32 *tsval_ptr = (u32 *)(opt_base+offset+<span class="hljs-number">2</span>);<br>                u32 *tsecr_ptr = <span class="hljs-literal">NULL</span>;<br>                <span class="hljs-keyword">if</span> (optlen &gt;= TCPOLEN_TIMESTAMP_ALIGNED) &#123;<br>                    tsecr_ptr = (u32 *)(opt_base+offset+<span class="hljs-number">6</span>);<br>                &#125;<br>                u32 tsval,tsecr;<br>                bpf_probe_read(&amp;tsval,<span class="hljs-keyword">sizeof</span>(u32),tsval_ptr);<br>                bpf_probe_read(&amp;tsecr,<span class="hljs-keyword">sizeof</span>(u32),tsecr_ptr);<br>                tsval = __bpf_ntohl(tsval);<br>                tsecr = __bpf_ntohl(tsecr);<br>                <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcp_sock</span> *<span class="hljs-title">tsock</span>;</span><br>                tsock = (<span class="hljs-keyword">struct</span> tcp_sock *)BPF_CORE_READ(skb, sk);<br>               bpf_printk(<span class="hljs-string">&quot;tsval = %u,tsecr = %u&quot;</span>,tsval,tsecr);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> tmp;<br>            bpf_probe_read(&amp;tmp,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>),opt_base+<span class="hljs-number">1</span>);<br>            offset += tmp;<br>            bpf_probe_read(&amp;options,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>),opt_base+offset);<br>            optlen -= tmp;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>程序输出如下：</p><img src="/2023/05/05/%E5%85%B3%E4%BA%8ETCP-options%E4%B8%AD%E7%9A%84timestamps/image-20230509142406865.png" class title="image-20230509142406865"><h4 id="3-2-直接从tcp-options-received结构体中提取"><a href="#3-2-直接从tcp-options-received结构体中提取" class="headerlink" title="3.2 直接从tcp_options_received结构体中提取"></a>3.2 直接从tcp_options_received结构体中提取</h4><p>原理：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// include/linux/tcp.h</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcp_sock</span> &#123;</span><br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-comment">/* RTT measurement */</span><br>u64tcp_mstamp;<span class="hljs-comment">/* most recent packet received/sent */</span>  <span class="hljs-comment">// 单位是us</span><br>u32srtt_us;<span class="hljs-comment">/* smoothed round trip time &lt;&lt; 3 in usecs */</span><br>u32mdev_us;<span class="hljs-comment">/* medium deviation*/</span><br>u32mdev_max_us;<span class="hljs-comment">/* maximal mdev for the last rtt period*/</span><br>u32rttvar_us;<span class="hljs-comment">/* smoothed mdev_max*/</span><br>u32rtt_seq;<span class="hljs-comment">/* sequence number to update rttvar*/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span>  <span class="hljs-title">minmax</span> <span class="hljs-title">rtt_min</span>;</span><br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment"> *      Options received (usually on last packet, some only on SYN packets).</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcp_options_received</span> <span class="hljs-title">rx_opt</span>;</span><br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>tcp_sock</code>结构体中<code>tcp_options_received </code></p><ul><li>rcv_tsval（Timestamp value） </li><li>rcv_tsecr（Timestamp Echo Reply）</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// include/linux/tcp.h</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcp_options_received</span> &#123;</span><br><span class="hljs-comment">/*PAWS/RTTM data*/</span><br><span class="hljs-type">int</span>ts_recent_stamp;<span class="hljs-comment">/* Time we stored ts_recent (for aging) */</span><br>u32ts_recent;<span class="hljs-comment">/* Time stamp to echo next*/</span><br>u32rcv_tsval;<span class="hljs-comment">/* Time stamp value             */</span>  <br>u32rcv_tsecr;<span class="hljs-comment">/* Time stamp echo reply        */</span><br>u16 saw_tstamp : <span class="hljs-number">1</span>,<span class="hljs-comment">/* Saw TIMESTAMP on last packet*/</span><br>tstamp_ok : <span class="hljs-number">1</span>,<span class="hljs-comment">/* TIMESTAMP seen on SYN packet*/</span><br>dsack : <span class="hljs-number">1</span>,<span class="hljs-comment">/* D-SACK is scheduled*/</span><br>wscale_ok : <span class="hljs-number">1</span>,<span class="hljs-comment">/* Wscale seen on SYN packet*/</span><br>sack_ok : <span class="hljs-number">3</span>,<span class="hljs-comment">/* SACK seen on SYN packet*/</span><br>smc_ok : <span class="hljs-number">1</span>,<span class="hljs-comment">/* SMC seen on SYN packet*/</span><br>snd_wscale : <span class="hljs-number">4</span>,<span class="hljs-comment">/* Window scaling received from sender*/</span><br>rcv_wscale : <span class="hljs-number">4</span>;<span class="hljs-comment">/* Window scaling to send to receiver*/</span><br>u8saw_unknown:<span class="hljs-number">1</span>,<span class="hljs-comment">/* Received unknown option*/</span><br>unused:<span class="hljs-number">7</span>;<br>u8num_sacks;<span class="hljs-comment">/* Number of SACK blocks*/</span><br>u16user_mss;<span class="hljs-comment">/* mss requested by user in ioctl*/</span><br>u16mss_clamp;<span class="hljs-comment">/* Maximal mss, negotiated at connection setup */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>程序基于<code>libbpf</code>开发，源码如下：</p><blockquote><p>查看消息：root用户  <code>cat /sys/kernel/debug/tracing/trace_pipe</code></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">SEC(<span class="hljs-string">&quot;kprobe/tcp_rcv_established&quot;</span>) <br><span class="hljs-type">int</span> <span class="hljs-title function_">BPF_KPROBE</span><span class="hljs-params">(tcp_rcv_established,<span class="hljs-keyword">struct</span> sock *sk, <span class="hljs-keyword">struct</span> sk_buff *skb)</span>&#123; <br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcp_sock</span> *<span class="hljs-title">tp</span> =</span> tcp_sk(sk);<br>    u32 tsval = BPF_CORE_READ(tp, rx_opt.rcv_tsval);<br>    u32 tsecr = BPF_CORE_READ(tp, rx_opt.rcv_tsecr);<br>    bpf_printk(<span class="hljs-string">&quot;tsval = %u, tsecr = %u&quot;</span>,tsval, tsecr);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>程序输出结果如图所示。</p><img src="/2023/05/05/%E5%85%B3%E4%BA%8ETCP-options%E4%B8%AD%E7%9A%84timestamps/image-20230421143923340.png" class title="image-20230421143923340"><h3 id="4-如何计算TCP往返时间（RTT）"><a href="#4-如何计算TCP往返时间（RTT）" class="headerlink" title="4. 如何计算TCP往返时间（RTT）"></a>4. 如何计算TCP往返时间（RTT）</h3><h4 id="4-1-内核是怎么算的"><a href="#4-1-内核是怎么算的" class="headerlink" title="4.1 内核是怎么算的"></a>4.1 内核是怎么算的</h4><p>如前所述，TCP timestamp的其中一个作用是为了动态调整RTO，而RTO调整的依据之一就是RTT值，因此Linux内核中也有计算RTT的函数，分别是<code> tcp_rcv_rtt_measure</code>与<code>tcp_rcv_rtt_measure_ts</code>。其中，<code>tcp_rcv_rtt_measure_ts</code>在函数<code>tcp_rcv_established</code>中调用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//net/ipv4/tcp_input.c</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">tcp_rcv_rtt_measure</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> tcp_sock *tp)</span><br>&#123;<br>u32 delta_us;<br><br><span class="hljs-keyword">if</span> (tp-&gt;rcv_rtt_est.time == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">goto</span> new_measure;<br><span class="hljs-keyword">if</span> (before(tp-&gt;rcv_nxt, tp-&gt;rcv_rtt_est.seq))<br><span class="hljs-keyword">return</span>;<br>delta_us = tcp_stamp_us_delta(tp-&gt;tcp_mstamp, tp-&gt;rcv_rtt_est.time);<br><span class="hljs-keyword">if</span> (!delta_us)<br>delta_us = <span class="hljs-number">1</span>;<br>tcp_rcv_rtt_update(tp, delta_us, <span class="hljs-number">1</span>);<br><br>new_measure:<br>tp-&gt;rcv_rtt_est.seq = tp-&gt;rcv_nxt + tp-&gt;rcv_wnd;<br>tp-&gt;rcv_rtt_est.time = tp-&gt;tcp_mstamp;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">tcp_rcv_rtt_measure_ts</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> sock *sk,</span><br><span class="hljs-params">  <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> sk_buff *skb)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcp_sock</span> *<span class="hljs-title">tp</span> =</span> tcp_sk(sk);<br><br><span class="hljs-keyword">if</span> (tp-&gt;rx_opt.rcv_tsecr == tp-&gt;rcv_rtt_last_tsecr)<br><span class="hljs-keyword">return</span>;<br>tp-&gt;rcv_rtt_last_tsecr = tp-&gt;rx_opt.rcv_tsecr;<br><br><span class="hljs-keyword">if</span> (TCP_SKB_CB(skb)-&gt;end_seq -<br>    TCP_SKB_CB(skb)-&gt;seq &gt;= inet_csk(sk)-&gt;icsk_ack.rcv_mss) &#123;<br>        <span class="hljs-comment">// step 1 TCP timestamp 尺度间隔时间</span><br>u32 delta = tcp_time_stamp(tp) - tp-&gt;rx_opt.rcv_tsecr; <br>u32 delta_us;<br><br><span class="hljs-keyword">if</span> (likely(delta &lt; INT_MAX / (USEC_PER_SEC / TCP_TS_HZ))) &#123;<br><span class="hljs-keyword">if</span> (!delta)<br>delta = <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">// step 2， 真实时间 us： delta / TCP_TS_HZ  * USEC_PER_SEC</span><br>delta_us = delta * (USEC_PER_SEC / TCP_TS_HZ);  <br>tcp_rcv_rtt_update(tp, delta_us, <span class="hljs-number">0</span>);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>step 1:</p><ul><li>USEC_PER_SEC &#x3D; 1000000L</li><li>TCP_TS_HZ &#x3D; 1000</li><li>u64    tcp_mstamp;</li></ul><p>tcp_time_stamp返回的是：<code>tp-&gt;tcp_mstamp / (USEC_PER_SEC / TCP_TS_HZ)</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// include/net/tcp.h</span><br><span class="hljs-comment">/* This should only be used in contexts where tp-&gt;tcp_mstamp is up to date */</span> <br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> u32 <span class="hljs-title function_">tcp_time_stamp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> tcp_sock *tp)</span> &#123; <br>    <span class="hljs-keyword">return</span> div_u64(tp-&gt;tcp_mstamp, USEC_PER_SEC / TCP_TS_HZ); <br>&#125; <br><span class="hljs-comment">// include/linux/math64.h</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> div_u64</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> u64 <span class="hljs-title function_">div_u64</span><span class="hljs-params">(u64 dividend, u32 divisor)</span><br>&#123;<br>u32 remainder;<br><span class="hljs-keyword">return</span> div_u64_rem(dividend, divisor, &amp;remainder);<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-comment">// include/linux/math64.h</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> u64 <span class="hljs-title function_">div_u64_rem</span><span class="hljs-params">(u64 dividend, u32 divisor, u32 *remainder)</span><br>&#123;<br>*remainder = dividend % divisor;<br><span class="hljs-keyword">return</span> dividend / divisor;  <span class="hljs-comment">// 取整</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-用户态直接计算"><a href="#4-2-用户态直接计算" class="headerlink" title="4.2 用户态直接计算"></a>4.2 用户态直接计算</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// include/uapi/linux/tcp.h</span><br><span class="hljs-comment">// 内核</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcp_info</span> &#123;</span><br><span class="hljs-comment">// ...</span><br>__u32tcpi_rto;<br><span class="hljs-comment">// ...</span><br><span class="hljs-comment">/* Times. */</span><br>__u32tcpi_last_data_sent;<br>__u32tcpi_last_ack_sent;     <span class="hljs-comment">/* Not remembered, sorry. */</span><br>__u32tcpi_last_data_recv;<br>__u32tcpi_last_ack_recv;<br>    <span class="hljs-comment">// ...</span><br>    __u32tcpi_rcv_rtt;   <span class="hljs-comment">// RTT值</span><br>__u32tcpi_rcv_space;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// /usr/include/netinet/tcp.h</span><br><span class="hljs-comment">// 系统，GLIBC</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcp_info</span></span><br><span class="hljs-class">&#123;</span>  <span class="hljs-comment">/* Metrics. */</span><br>  <span class="hljs-type">uint32_t</span>tcpi_pmtu;<br>  <span class="hljs-type">uint32_t</span>tcpi_rcv_ssthresh;<br>  <span class="hljs-type">uint32_t</span>tcpi_rtt;<br>  <span class="hljs-type">uint32_t</span>tcpi_rttvar;<br>  <span class="hljs-type">uint32_t</span>tcpi_snd_ssthresh;<br>  <span class="hljs-type">uint32_t</span>tcpi_snd_cwnd;<br>  <span class="hljs-type">uint32_t</span>tcpi_advmss;<br>  <span class="hljs-type">uint32_t</span>tcpi_reordering;<br><br>  <span class="hljs-type">uint32_t</span>tcpi_rcv_rtt;<br> &#125;;<br></code></pre></td></tr></table></figure><p>例如，在C++网络库muduo中，有以下代码，可以打印出上述<code>tcp_Info</code>中的<code>tcpi_rtt</code>值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// muduo/net/Socket.cc</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netinet/in.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netinet/tcp.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span>  <span class="hljs-comment">// snprintf</span></span><br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Socket::getTcpInfo</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> tcp_info* tcpi)</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">socklen_t</span> len = <span class="hljs-built_in">sizeof</span>(*tcpi);<br>  <span class="hljs-built_in">memZero</span>(tcpi, len);<br>  <span class="hljs-keyword">return</span> ::<span class="hljs-built_in">getsockopt</span>(sockfd_, SOL_TCP, TCP_INFO, tcpi, &amp;len) == <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Socket::getTcpInfoString</span><span class="hljs-params">(<span class="hljs-type">char</span>* buf, <span class="hljs-type">int</span> len)</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">struct</span> <span class="hljs-title class_">tcp_info</span> tcpi;<br>  <span class="hljs-type">bool</span> ok = <span class="hljs-built_in">getTcpInfo</span>(&amp;tcpi);<br>  <span class="hljs-keyword">if</span> (ok)<br>  &#123;<br>    <span class="hljs-built_in">snprintf</span>(buf, len, <span class="hljs-string">&quot;unrecovered=%u &quot;</span><br>             <span class="hljs-string">&quot;rto=%u ato=%u snd_mss=%u rcv_mss=%u &quot;</span><br>             <span class="hljs-string">&quot;lost=%u retrans=%u rtt=%u rttvar=%u &quot;</span><br>             <span class="hljs-string">&quot;sshthresh=%u cwnd=%u total_retrans=%u&quot;</span>,<br>             tcpi.tcpi_retransmits,  <span class="hljs-comment">// Number of unrecovered [RTO] timeouts</span><br>             tcpi.tcpi_rto,          <span class="hljs-comment">// Retransmit timeout in usec</span><br>             tcpi.tcpi_ato,          <span class="hljs-comment">// Predicted tick of soft clock in usec</span><br>             tcpi.tcpi_snd_mss,<br>             tcpi.tcpi_rcv_mss,<br>             tcpi.tcpi_lost,         <span class="hljs-comment">// Lost packets</span><br>             tcpi.tcpi_retrans,      <span class="hljs-comment">// Retransmitted packets out</span><br>             tcpi.tcpi_rtt,          <span class="hljs-comment">// Smoothed round trip time in usec</span><br>             tcpi.tcpi_rttvar,       <span class="hljs-comment">// Medium deviation</span><br>             tcpi.tcpi_snd_ssthresh,<br>             tcpi.tcpi_snd_cwnd,<br>             tcpi.tcpi_total_retrans);  <span class="hljs-comment">// Total retransmits for entire connection</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> ok;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-3-使用ss工具"><a href="#4-3-使用ss工具" class="headerlink" title="4.3 使用ss工具"></a>4.3 使用ss工具</h4><p>使用<code>ss -ti</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">fzy@fzy-Lenovo:~$ ss -ti<br>State  Recv-Q  Send-Q         Local Address:Port            Peer Address:Port   Process                                                                         <br>ESTAB  0       0                  127.0.0.1:59164              127.0.0.1:7890   <br> cubic wscale:7,7 <br> rto:204 <br> rtt:0.881/1.622  <span class="hljs-comment"># RTT平均值及中位数</span><br> minrtt:0.019<br> <span class="hljs-comment"># ...</span><br></code></pre></td></tr></table></figure><h4 id="4-4-使用BCC-tcprtt工具"><a href="#4-4-使用BCC-tcprtt工具" class="headerlink" title="4.4 使用BCC tcprtt工具"></a>4.4 使用BCC tcprtt工具</h4><p>BCC提供了tcprtt工具，并有python与基于libbpf两个版本的程序。其中基于libbpf的tcprtt工具在libbpf-tools文件夹下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">fzy@fzy-Lenovo:~/Downloads/04_bcc_ebpf/bcc/libbpf-tools$ sudo ./tcprtt <br>[sudo] password <span class="hljs-keyword">for</span> fzy: <br>Tracing TCP RTT... Hit Ctrl-C to end.<br>^C<br>All Addresses = ****** <br>     usecs               : count    distribution<br>         0 -&gt; 1          : 0        |                                        |<br>         2 -&gt; 3          : 0        |                                        |<br>         4 -&gt; 7          : 0        |                                        |<br>         8 -&gt; 15         : 0        |                                        |<br>        16 -&gt; 31         : 0        |                                        |<br>        32 -&gt; 63         : 3        |*********                               |<br>        64 -&gt; 127        : 5        |***************                         |<br>       128 -&gt; 255        : 1        |***                                     |<br>       256 -&gt; 511        : 0        |                                        |<br>       512 -&gt; 1023       : 9        |***************************             |<br>      1024 -&gt; 2047       : 1        |***                                     |<br>      2048 -&gt; 4095       : 8        |************************                |<br>      4096 -&gt; 8191       : 4        |************                            |<br>      8192 -&gt; 16383      : 5        |***************                         |<br>     16384 -&gt; 32767      : 0        |                                        |<br>     32768 -&gt; 65535      : 13       |****************************************|<br></code></pre></td></tr></table></figure><p>原理：</p><p>在<code>tcp_rcv_established</code>结构体中（结构体定义见3.2节），采集<code>tcp_sock</code>中的<code>srtt_us</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// bcc/.../tcprtt.bpf.c</span><br>SEC(<span class="hljs-string">&quot;kprobe/tcp_rcv_established&quot;</span>)<br><span class="hljs-type">int</span> <span class="hljs-title function_">BPF_KPROBE</span><span class="hljs-params">(tcp_rcv_kprobe, <span class="hljs-keyword">struct</span> sock *sk)</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br>    u32 srtt, saddr, daddr;<br>    <span class="hljs-comment">// ...</span><br>    ts = (<span class="hljs-keyword">struct</span> tcp_sock *)(sk);<br>bpf_probe_read_kernel(&amp;srtt, <span class="hljs-keyword">sizeof</span>(srtt), &amp;ts-&gt;srtt_us);<br>srtt &gt;&gt;= <span class="hljs-number">3</span>;  <span class="hljs-comment">// 单位：us</span><br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-5-eBPF提取srtt"><a href="#4-5-eBPF提取srtt" class="headerlink" title="4.5 eBPF提取srtt"></a>4.5 eBPF提取srtt</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c">SEC(<span class="hljs-string">&quot;kprobe/tcp_rcv_established&quot;</span>)<br><span class="hljs-type">int</span> <span class="hljs-title function_">BPF_KPROBE</span><span class="hljs-params">(tcp_rcv_established, <span class="hljs-keyword">struct</span> sock *sk,<span class="hljs-keyword">struct</span> sk_buff *skb)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (!_is_send) &#123;<br>        <span class="hljs-keyword">if</span> (!_is_ipv6) &#123;<br>            <span class="hljs-keyword">if</span> (skb == <span class="hljs-literal">NULL</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">iphdr</span> *<span class="hljs-title">ip</span> =</span> skb_to_iphdr(skb);<br>            <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcphdr</span> *<span class="hljs-title">tcp</span> =</span> skb_to_tcphdr(skb);<br>            <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">packet_tuple</span> <span class="hljs-title">pkt_tuple</span> =</span> &#123;&#125;;<br>            get_pkt_tuple(&amp;pkt_tuple, ip, tcp);<br><br>            SAMPLING<br>            FILTER_DPORT<br>            FILTER_SPORT<br>            <br>            <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ktime_info</span> *<span class="hljs-title">tinfo</span>;</span><br>            <span class="hljs-keyword">if</span> ((tinfo = bpf_map_lookup_elem(&amp;in_timestamps,&amp;pkt_tuple)) == <span class="hljs-literal">NULL</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcp_sock</span> *<span class="hljs-title">ts</span>;</span><br>            u32 srtt;<br>        ts = (<span class="hljs-keyword">struct</span> tcp_sock *)(sk);<br>        srtt = BPF_CORE_READ(ts, srtt_us);<br>            tinfo-&gt;srtt = srtt;<br>        &#125;<br>    &#125;   <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><img src="/2023/05/05/%E5%85%B3%E4%BA%8ETCP-options%E4%B8%AD%E7%9A%84timestamps/image-20230509142727437.png" class title="image-20230509142727437"><h3 id="5-参考资料"><a href="#5-参考资料" class="headerlink" title="5. 参考资料"></a>5. 参考资料</h3><ol><li><a href="https://www.imooc.com/article/29368">深入理解TCP协议（下）：RTT、滑动窗口、拥塞处理</a></li><li><a href="https://www.modb.pro/db/616210">TCP中RTT时延的理解</a></li><li><a href="https://perthcharles.github.io/2015/08/27/timestamp-intro/">TCP timestamp</a></li><li><a href="https://linuxgazette.net/136/pfeiffer.html">Measuring TCP Congestion Windows</a></li><li><a href="https://luoguochun.cn/post/2016-09-23-tcp-fuck/">tcp 协议小结</a></li><li><a href="https://switch-router.gitee.io/blog/tcp-timestamp/">TCP timestamp 选项那点事</a></li></ol><h3 id="6-关于一些TCP知识的补充"><a href="#6-关于一些TCP知识的补充" class="headerlink" title="6.关于一些TCP知识的补充"></a>6.关于一些TCP知识的补充</h3><ul><li>关于 DOFF</li></ul><p>在TCP协议中，DOFF是一个代表TCP头部长度的字段。TCP报文头部的长度是可变长度的，因为TCP头部中可以包括选项，而选项的长度是不固定的。因此，通过DOFF字段来指示TCP头部中实际的长度，以便接收方向正确位置解析TCP数据包。</p><p>TCP头部总长度是由DOFF和TCP选项共同决定的，DOFF字段的长度是一个4位二进制数字，可以最多表示15个单位的长度。因此，TCP头部的最大长度为60个字节（15*4）。在TCP报文中，DOFF值代表TCP头部的长度，而TCP数据则紧随TCP头部之后。</p><p>该字段占据TCP头部的第一个字节的高4位，表示TCP头部的长度，也就是TCP头部的首部长度（Header length），由前四位二进制数值决定，用于解析TCP数据报。</p><p>例如，DOFF&#x3D;5，表示TCP头部的长度为20个字节（5 x 4），而TCP头部中实际长度为20个字节，加上选项长度等于TCP头部的总长度。</p><ul><li>关于TCP option的常见选项</li></ul><table><thead><tr><th>options</th><th>释义</th></tr></thead><tbody><tr><td>TCPOLEN_MSS</td><td>MSS（最大数据段长度）选项长度为4个字节</td></tr><tr><td>TCPOLEN_WINDOW</td><td>窗口选项长度为3个字节</td></tr><tr><td>TCPOLEN_SACK_PERM</td><td>SACK_PERM（选择性确认）选项长度为2个字节</td></tr><tr><td>TCPOLEN_TIMESTAMP</td><td>时间戳选项长度为10个字节</td></tr><tr><td>TCPOLEN_MD5SIG</td><td>使用MD5对TCP报文进行数字签名时选项长度为18个字节</td></tr><tr><td>TCPOLEN_FASTOPEN_BASE</td><td>Fast Open选项长度为2个字节</td></tr><tr><td>TCPOLEN_EXP_FASTOPEN_BASE</td><td>扩展的Fast Open选项长度为4个字节</td></tr><tr><td>TCPOLEN_EXP_SMC_BASE</td><td>扩展的SMC（Server Message Channel）选项长度为6个字节</td></tr><tr><td>TCPOLEN_TSTAMP_ALIGNED</td><td>时间戳选项（timestamp option）按照四字节对齐后的长度为12个字节</td></tr><tr><td>TCPOLEN_WSCALE_ALIGNED</td><td>窗口比例选项（window scale option）按照四字节对齐后的长度为4个字节</td></tr><tr><td>TCPOLEN_SACKPERM_ALIGNED</td><td>选择性确认允许选项（SACK permit option）按照四字节对齐后的长度为4个字节</td></tr><tr><td>TCPOLEN_SACK_BASE</td><td>每个SACK块（selective acknowledgment block）的长度为2个字节</td></tr><tr><td>TCPOLEN_SACK_BASE_ALIGNED</td><td>按照四字节对齐后的每个SACK块的长度为4个字节</td></tr><tr><td>TCPOLEN_SACK_PERBLOCK</td><td>每个SACK块中最多可以包含八个块（selective acknowledgment per-block option），按照八字节对齐后的长度为8个字节</td></tr><tr><td>TCPOLEN_MD5SIG_ALIGNED</td><td>使用MD5对TCP报文进行数字签名时选项按照四字节对齐后的长度为20个字节</td></tr><tr><td>TCPOLEN_MSS_ALIGNED</td><td>最大报文长度（maximum segment size）选项按照四字节对齐后的长度为4个字节</td></tr><tr><td>TCPOLEN_EXP_SMC_BASE_ALIGNED</td><td>扩展服务器消息通道选项（extended server message channel option）按照四字节对齐后的长度为8个字节</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>网络</tag>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>理解muduo之服务端编程</title>
    <link href="/2023/04/26/%E7%90%86%E8%A7%A3muduo%E4%B9%8B%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%BC%96%E7%A8%8B/"/>
    <url>/2023/04/26/%E7%90%86%E8%A7%A3muduo%E4%B9%8B%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="理解muduo之服务端编程"><a href="#理解muduo之服务端编程" class="headerlink" title="理解muduo之服务端编程"></a>理解muduo之服务端编程</h1><blockquote><p>本文例程描述的是muduo单Reactor服务端编程</p></blockquote><h3 id="0-应用服务端程序"><a href="#0-应用服务端程序" class="headerlink" title="0. 应用服务端程序"></a>0. 应用服务端程序</h3><p><code>InetAddress serverAddr(port)</code>j将设置为固定端口，可接收任何连接，即ip地址设置为<code>INADDR_ANY</code>。</p><p>以下为muduo例程asio_chat_server的代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// examples/asio/chat/server.cc</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;examples/asio/chat/codec.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;muduo/base/Logging.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;muduo/base/Mutex.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;muduo/net/EventLoop.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;muduo/net/TcpServer.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;muduo/base/Logging.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> muduo;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> muduo::net;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ChatServer</span> : noncopyable<br>&#123;<br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">ChatServer</span>(EventLoop* loop,<br>             <span class="hljs-type">const</span> InetAddress&amp; listenAddr)<br>  : <span class="hljs-built_in">server_</span>(loop, listenAddr, <span class="hljs-string">&quot;ChatServer&quot;</span>),<br>    <span class="hljs-built_in">codec_</span>(std::<span class="hljs-built_in">bind</span>(&amp;ChatServer::onStringMessage, <span class="hljs-keyword">this</span>, _1, _2, _3))<br>  &#123;<br>    server_.<span class="hljs-built_in">setConnectionCallback</span>(<br>        std::<span class="hljs-built_in">bind</span>(&amp;ChatServer::onConnection, <span class="hljs-keyword">this</span>, _1));<br>    server_.<span class="hljs-built_in">setMessageCallback</span>(<br>        std::<span class="hljs-built_in">bind</span>(&amp;LengthHeaderCodec::onMessage, &amp;codec_, _1, _2, _3));<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">start</span><span class="hljs-params">()</span></span><br><span class="hljs-function">  </span>&#123;<br>    server_.<span class="hljs-built_in">start</span>();<br>  &#125;<br><br> <span class="hljs-keyword">private</span>:<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onConnection</span><span class="hljs-params">(<span class="hljs-type">const</span> TcpConnectionPtr&amp; conn)</span></span><br><span class="hljs-function">  </span>&#123;<br>    LOG_INFO &lt;&lt; conn-&gt;<span class="hljs-built_in">peerAddress</span>().<span class="hljs-built_in">toIpPort</span>() &lt;&lt; <span class="hljs-string">&quot; -&gt; &quot;</span><br>             &lt;&lt; conn-&gt;<span class="hljs-built_in">localAddress</span>().<span class="hljs-built_in">toIpPort</span>() &lt;&lt; <span class="hljs-string">&quot; is &quot;</span><br>             &lt;&lt; (conn-&gt;<span class="hljs-built_in">connected</span>() ? <span class="hljs-string">&quot;UP&quot;</span> : <span class="hljs-string">&quot;DOWN&quot;</span>);<br><br>    <span class="hljs-keyword">if</span> (conn-&gt;<span class="hljs-built_in">connected</span>())<br>    &#123;<br>      connections_.<span class="hljs-built_in">insert</span>(conn);  <span class="hljs-comment">// 插入连接集群</span><br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      connections_.<span class="hljs-built_in">erase</span>(conn);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onStringMessage</span><span class="hljs-params">(<span class="hljs-type">const</span> TcpConnectionPtr&amp;,</span></span><br><span class="hljs-params"><span class="hljs-function">                       <span class="hljs-type">const</span> string&amp; message,</span></span><br><span class="hljs-params"><span class="hljs-function">                       Timestamp)</span></span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-keyword">for</span> (ConnectionList::iterator it = connections_.<span class="hljs-built_in">begin</span>();<br>        it != connections_.<span class="hljs-built_in">end</span>();<br>        ++it)<br>    &#123;<br>      codec_.<span class="hljs-built_in">send</span>(<span class="hljs-built_in">get_pointer</span>(*it), message);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">typedef</span> std::set&lt;TcpConnectionPtr&gt; ConnectionList;<br>  TcpServer server_;<br>  LengthHeaderCodec codec_;<br>  ConnectionList connections_;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>  Logger::<span class="hljs-built_in">setLogLevel</span>(Logger::TRACE);<br>  LOG_INFO &lt;&lt; <span class="hljs-string">&quot;pid = &quot;</span> &lt;&lt; <span class="hljs-built_in">getpid</span>();<br>  <span class="hljs-keyword">if</span> (argc &gt; <span class="hljs-number">1</span>)<br>  &#123;<br>    EventLoop loop;   <span class="hljs-comment">// main reactor</span><br>    <span class="hljs-type">uint16_t</span> port = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">uint16_t</span>&gt;(<span class="hljs-built_in">atoi</span>(argv[<span class="hljs-number">1</span>]));<br>    <span class="hljs-function">InetAddress <span class="hljs-title">serverAddr</span><span class="hljs-params">(port)</span></span>;<br>    <span class="hljs-function">ChatServer <span class="hljs-title">server</span><span class="hljs-params">(&amp;loop, serverAddr)</span></span>;<br>    server.<span class="hljs-built_in">start</span>();<br>    loop.<span class="hljs-built_in">loop</span>();<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Usage: %s port\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-loop初始化"><a href="#1-loop初始化" class="headerlink" title="1. loop初始化"></a>1. loop初始化</h3><p>服务端直接将loop循环绑定到主线程模式，网络模型为单Reactor模型。此时acceptor与TcpCpnnection在同一线程。</p><p>loop循环的建立与客户端基本一致。</p><h3 id="2-服务端如何建立TCP连接"><a href="#2-服务端如何建立TCP连接" class="headerlink" title="2. 服务端如何建立TCP连接"></a>2. 服务端如何建立TCP连接</h3><p>该章节是本文的重点，主要目的为理解acceptor接收器。</p><ul><li>各对象的实例化</li></ul><p><code>TcpServer</code>的实例化，进而初始化了接收器<code>Acceptor</code>与线程池<code>EventLoopThreadPool</code>。</p><p>在接收器中，首先通过<code>sockets::createNonblockingOrDie</code>创建了一个使用TCP的非阻塞socket。并将sockfd绑定到<code>acceptChannel_</code>。然后设置地址地址复用，端口复用，bind绑定地址等。最后设置读事件回调。</p><p>在这一步中，实际上完成了socket中的<code>socket</code>与<code>bind</code>。</p><p>注意，muduo使用了idleFd_来处理当服务端达到最大连接时的情况。具体操作是，事先申请一个<code>/dev/null</code>的文件fd， 然后在<code>errno == EMFILE</code>的情况下，先关闭fd，接收一个TCP连接后，将TCP连接关闭，最后再申请一个<code>/dev/null</code>的文件fd，留着下次备用。这样就可以将服务端无法accept连接转变为接收连接，然后关闭连接。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// muduo/net/Acceptor.cc</span><br>Acceptor::<span class="hljs-built_in">Acceptor</span>(EventLoop* loop, <span class="hljs-type">const</span> InetAddress&amp; listenAddr, <span class="hljs-type">bool</span> reuseport)<br>  : <span class="hljs-built_in">loop_</span>(loop),<br>    <span class="hljs-built_in">acceptSocket_</span>(sockets::<span class="hljs-built_in">createNonblockingOrDie</span>(listenAddr.<span class="hljs-built_in">family</span>())),<br>    <span class="hljs-built_in">acceptChannel_</span>(loop, acceptSocket_.<span class="hljs-built_in">fd</span>()),<br>    <span class="hljs-built_in">listening_</span>(<span class="hljs-literal">false</span>),<br>    <span class="hljs-built_in">idleFd_</span>(::<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/dev/null&quot;</span>, O_RDONLY | O_CLOEXEC))<br>&#123;<br>  <span class="hljs-built_in">assert</span>(idleFd_ &gt;= <span class="hljs-number">0</span>);<br>  acceptSocket_.<span class="hljs-built_in">setReuseAddr</span>(<span class="hljs-literal">true</span>);<br>  acceptSocket_.<span class="hljs-built_in">setReusePort</span>(reuseport);<br>  acceptSocket_.<span class="hljs-built_in">bindAddress</span>(listenAddr);<br>  acceptChannel_.<span class="hljs-built_in">setReadCallback</span>(<br>      std::<span class="hljs-built_in">bind</span>(&amp;Acceptor::handleRead, <span class="hljs-keyword">this</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>另外，在<code>TcpServer</code>中，设置了连接的回调处理函数。</p><ul><li>listen设置被动sockfd</li></ul><p>在服务端应用程序中，将调用<code>ChatServer</code>中的<code>start</code>方法，进而调用<code>TcpServer</code>中的<code>start</code>方法。</p><p><code>get_pointer(acceptor_)</code>为传递类的原始指针。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// muduo/net/TcpServer.cc</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TcpServer::start</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">if</span> (started_.<span class="hljs-built_in">getAndSet</span>(<span class="hljs-number">1</span>) == <span class="hljs-number">0</span>)<br>  &#123;<br>    threadPool_-&gt;<span class="hljs-built_in">start</span>(threadInitCallback_); <span class="hljs-comment">// 若回调函数没有设置将怎么处理</span><br><br>    <span class="hljs-built_in">assert</span>(!acceptor_-&gt;<span class="hljs-built_in">listening</span>());<br>    loop_-&gt;<span class="hljs-built_in">runInLoop</span>(<br>        std::<span class="hljs-built_in">bind</span>(&amp;Acceptor::listen, <span class="hljs-built_in">get_pointer</span>(acceptor_)));  <span class="hljs-comment">// 设置监听模式</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// muduo/net/Acceptor.cc</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Acceptor::listen</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  loop_-&gt;<span class="hljs-built_in">assertInLoopThread</span>();<br>  listening_ = <span class="hljs-literal">true</span>;<br>  acceptSocket_.<span class="hljs-built_in">listen</span>();  <span class="hljs-comment">// 设置被动socket</span><br>  acceptChannel_.<span class="hljs-built_in">enableReading</span>();  <span class="hljs-comment">// 注册读事件</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>accept建立连接</li></ul><p>当客户端<code>connect</code>时，服务端触发读事件，读事件处理函数为接收器的<code>handleRead</code>函数。在建立连接后，执行<code>newConnectionCallback_</code>。该回调处理函数在<code>TcpServer</code>中设置，为<code>TcpServer::newConnection</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// muduo/net/Acceptor.cc</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Acceptor::handleRead</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  loop_-&gt;<span class="hljs-built_in">assertInLoopThread</span>();<br>  InetAddress peerAddr;<br>  <span class="hljs-comment">//FIXME loop until no more</span><br>  <span class="hljs-type">int</span> connfd = acceptSocket_.<span class="hljs-built_in">accept</span>(&amp;peerAddr);  <span class="hljs-comment">// 建立连接</span><br>  <span class="hljs-keyword">if</span> (connfd &gt;= <span class="hljs-number">0</span>)<br>  &#123;<br>    <span class="hljs-comment">// string hostport = peerAddr.toIpPort();</span><br>    <span class="hljs-comment">// LOG_TRACE &lt;&lt; &quot;Accepts of &quot; &lt;&lt; hostport;</span><br>    <span class="hljs-keyword">if</span> (newConnectionCallback_)<br>    &#123;<br>      <span class="hljs-built_in">newConnectionCallback_</span>(connfd, peerAddr);  <span class="hljs-comment">// 连接回调</span><br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      sockets::<span class="hljs-built_in">close</span>(connfd);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    LOG_SYSERR &lt;&lt; <span class="hljs-string">&quot;in Acceptor::handleRead&quot;</span>;<br>    <span class="hljs-comment">// Read the section named &quot;The special problem of</span><br>    <span class="hljs-comment">// accept()ing when you can&#x27;t&quot; in libev&#x27;s doc.</span><br>    <span class="hljs-comment">// By Marc Lehmann, author of libev.</span><br>    <span class="hljs-keyword">if</span> (errno == EMFILE)<br>    &#123;<br>      ::<span class="hljs-built_in">close</span>(idleFd_);<br>      idleFd_ = ::<span class="hljs-built_in">accept</span>(acceptSocket_.<span class="hljs-built_in">fd</span>(), <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br>      ::<span class="hljs-built_in">close</span>(idleFd_);<br>      idleFd_ = ::<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/dev/null&quot;</span>, O_RDONLY | O_CLOEXEC);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>连接成功</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// muduo/net/TcpServer.cc</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TcpServer::newConnection</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd, <span class="hljs-type">const</span> InetAddress&amp; peerAddr)</span></span><br><span class="hljs-function"></span>&#123;<br>  loop_-&gt;<span class="hljs-built_in">assertInLoopThread</span>();<br>  EventLoop* ioLoop = threadPool_-&gt;<span class="hljs-built_in">getNextLoop</span>(); <span class="hljs-comment">// 单Reactor只有一个loop</span><br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">64</span>];<br>  <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-keyword">sizeof</span> buf, <span class="hljs-string">&quot;-%s#%d&quot;</span>, ipPort_.<span class="hljs-built_in">c_str</span>(), nextConnId_);<br>  ++nextConnId_;<br>  string connName = name_ + buf;<br><br>  LOG_INFO &lt;&lt; <span class="hljs-string">&quot;TcpServer::newConnection [&quot;</span> &lt;&lt; name_<br>           &lt;&lt; <span class="hljs-string">&quot;] - new connection [&quot;</span> &lt;&lt; connName<br>           &lt;&lt; <span class="hljs-string">&quot;] from &quot;</span> &lt;&lt; peerAddr.<span class="hljs-built_in">toIpPort</span>();<br>  <span class="hljs-function">InetAddress <span class="hljs-title">localAddr</span><span class="hljs-params">(sockets::getLocalAddr(sockfd))</span></span>;<br>  <span class="hljs-comment">// FIXME poll with zero timeout to double confirm the new connection</span><br>  <span class="hljs-comment">// FIXME use make_shared if necessary</span><br>  <span class="hljs-function">TcpConnectionPtr <span class="hljs-title">conn</span><span class="hljs-params">(<span class="hljs-keyword">new</span> TcpConnection(ioLoop,</span></span><br><span class="hljs-params"><span class="hljs-function">                                          connName,</span></span><br><span class="hljs-params"><span class="hljs-function">                                          sockfd,</span></span><br><span class="hljs-params"><span class="hljs-function">                                          localAddr,</span></span><br><span class="hljs-params"><span class="hljs-function">                                          peerAddr))</span></span>;<br>  connections_[connName] = conn;<br>  conn-&gt;<span class="hljs-built_in">setConnectionCallback</span>(connectionCallback_);<br>  conn-&gt;<span class="hljs-built_in">setMessageCallback</span>(messageCallback_);<br>  conn-&gt;<span class="hljs-built_in">setWriteCompleteCallback</span>(writeCompleteCallback_);<br>  conn-&gt;<span class="hljs-built_in">setCloseCallback</span>(<br>      std::<span class="hljs-built_in">bind</span>(&amp;TcpServer::removeConnection, <span class="hljs-keyword">this</span>, _1)); <span class="hljs-comment">// <span class="hljs-doctag">FIXME:</span> unsafe</span><br>    <span class="hljs-comment">// 连接建立完成</span><br>  ioLoop-&gt;<span class="hljs-built_in">runInLoop</span>(std::<span class="hljs-built_in">bind</span>(&amp;TcpConnection::connectEstablished, conn));<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// muduo/net/TcpConnection.cc</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TcpConnection::connectEstablished</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  loop_-&gt;<span class="hljs-built_in">assertInLoopThread</span>();<br>  <span class="hljs-built_in">assert</span>(state_ == kConnecting);<br>  <span class="hljs-built_in">setState</span>(kConnected);<br>  channel_-&gt;<span class="hljs-built_in">tie</span>(<span class="hljs-built_in">shared_from_this</span>());<br>  channel_-&gt;<span class="hljs-built_in">enableReading</span>();   <span class="hljs-comment">// 将channel加入epoll</span><br><br>  <span class="hljs-built_in">connectionCallback_</span>(<span class="hljs-built_in">shared_from_this</span>());  <span class="hljs-comment">// 在这里真正执行client中的onConnect回调</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-如何发送与接收数据"><a href="#3-如何发送与接收数据" class="headerlink" title="3. 如何发送与接收数据"></a>3. 如何发送与接收数据</h3><p>发送数据与接收数据的流程与客户端差别不大，回显主要是在消息处理函数中，将收到的数据发出去，而且是发送给建立连接的每一个客户端。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// examples/asio/chat/server.cc </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onStringMessage</span><span class="hljs-params">(<span class="hljs-type">const</span> TcpConnectionPtr&amp;,</span></span><br><span class="hljs-params"><span class="hljs-function">                       <span class="hljs-type">const</span> string&amp; message,</span></span><br><span class="hljs-params"><span class="hljs-function">                       Timestamp)</span></span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-keyword">for</span> (ConnectionList::iterator it = connections_.<span class="hljs-built_in">begin</span>();<br>        it != connections_.<span class="hljs-built_in">end</span>();<br>        ++it)<br>    &#123;<br>      codec_.<span class="hljs-built_in">send</span>(<span class="hljs-built_in">get_pointer</span>(*it), message);<br>    &#125;<br>  &#125;<br><br></code></pre></td></tr></table></figure><h3 id="4-日志"><a href="#4-日志" class="headerlink" title="4. 日志"></a>4. 日志</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs bash">fzy@fzy-Lenovo:~/Downloads/03_net_lib/build/release-cpp11/bin$ ./asio_chat_server 18799<br>20230424 05:52:06.629547Z 17693 INFO  pid = 17693 - server.cc:74<br><span class="hljs-comment"># timerQueue</span><br>20230424 05:52:06.629617Z 17693 TRACE updateChannel fd = 4 events = 3 index = -1 - EPollPoller.cc:111<br>20230424 05:52:06.629641Z 17693 TRACE update epoll_ctl op = ADD fd = 4 event = &#123; 4: IN PRI  &#125; - EPollPoller.cc:179<br>20230424 05:52:06.629867Z 17693 DEBUG EventLoop EventLoop created 0x7FFC0780DD80 <span class="hljs-keyword">in</span> thread 17693 - EventLoop.cc:79<br><span class="hljs-comment"># wakeupChannel_-&gt;enableReading()</span><br>20230424 05:52:06.629876Z 17693 TRACE updateChannel fd = 5 events = 3 index = -1 - EPollPoller.cc:111<br>20230424 05:52:06.629882Z 17693 TRACE update epoll_ctl op = ADD fd = 5 event = &#123; 5: IN PRI  &#125; - EPollPoller.cc:179<br><span class="hljs-comment"># acceptChannel_.enableReading();</span><br>20230424 05:52:06.629975Z 17693 TRACE updateChannel fd = 6 events = 3 index = -1 - EPollPoller.cc:111<br>20230424 05:52:06.629984Z 17693 TRACE update epoll_ctl op = ADD fd = 6 event = &#123; 6: IN PRI  &#125; - EPollPoller.cc:179<br><span class="hljs-comment"># loop.loop()</span><br>20230424 05:52:06.629999Z 17693 TRACE loop EventLoop 0x7FFC0780DD80 start looping - EventLoop.cc:111<br>20230424 05:52:06.630005Z 17693 TRACE poll fd total count 3 - EPollPoller.cc:57<br>20230424 05:52:16.631134Z 17693 TRACE poll nothing happened - EPollPoller.cc:75<br>20230424 05:52:16.631180Z 17693 TRACE poll fd total count 3 - EPollPoller.cc:57<br>20230424 05:52:26.641613Z 17693 TRACE poll nothing happened - EPollPoller.cc:75<br>20230424 05:52:26.641659Z 17693 TRACE poll fd total count 3 - EPollPoller.cc:57<br><span class="hljs-comment"># 读事件的发生</span><br>20230424 05:52:28.262505Z 17693 TRACE poll 1 events happened - EPollPoller.cc:66<br>20230424 05:52:28.262555Z 17693 TRACE printActiveChannels &#123;6: IN &#125;  - EventLoop.cc:277<br>20230424 05:52:28.262577Z 17693 TRACE handleEventWithGuard 6: IN  - Channel.cc:86<br>20230424 05:52:28.262619Z 17693 INFO  TcpServer::newConnection [ChatServer] - new connection [ChatServer-0.0.0.0:18799<span class="hljs-comment">#1] from 127.0.0.1:33996 - TcpServer.cc:80</span><br>20230424 05:52:28.262659Z 17693 DEBUG TcpConnection TcpConnection::ctor[ChatServer-0.0.0.0:18799<span class="hljs-comment">#1] at 0x563CE5C6F9B0 fd=8 - TcpConnection.cc:61</span><br><span class="hljs-comment"># 将建立连接的fd（channel）注册进epoll</span><br>20230424 05:52:28.262677Z 17693 TRACE updateChannel fd = 8 events = 3 index = -1 - EPollPoller.cc:111<br>20230424 05:52:28.262691Z 17693 TRACE update epoll_ctl op = ADD fd = 8 event = &#123; 8: IN PRI  &#125; - EPollPoller.cc:179<br><span class="hljs-comment"># 连接建立</span><br>20230424 05:52:28.262711Z 17693 INFO  127.0.0.1:33996 -&gt; 127.0.0.1:18799 is UP - server.cc:39<br><span class="hljs-comment"># 等待事件发生</span><br>20230424 05:52:28.262723Z 17693 TRACE poll fd total count 4 - EPollPoller.cc:57<br>20230424 05:52:38.272934Z 17693 TRACE poll nothing happened - EPollPoller.cc:75<br>20230424 05:52:38.272972Z 17693 TRACE poll fd total count 4 - EPollPoller.cc:57<br><span class="hljs-comment"># 收到客户端发送的数据，读事件发生</span><br>20230424 05:52:47.287853Z 17693 TRACE poll 1 events happened - EPollPoller.cc:66<br>20230424 05:52:47.287885Z 17693 TRACE printActiveChannels &#123;8: IN &#125;  - EventLoop.cc:277<br>20230424 05:52:47.287915Z 17693 TRACE handleEventWithGuard 8: IN  - Channel.cc:86<br>20230424 05:52:47.288136Z 17693 TRACE poll fd total count 4 - EPollPoller.cc:57<br>20230424 05:52:56.887515Z 17693 TRACE poll 1 events happened - EPollPoller.cc:66<br>20230424 05:52:56.887543Z 17693 TRACE printActiveChannels &#123;8: IN &#125;  - EventLoop.cc:277<br>20230424 05:52:56.887567Z 17693 TRACE handleEventWithGuard 8: IN  - Channel.cc:86<br>20230424 05:52:56.887582Z 17693 TRACE handleClose fd = 8 state = kConnected - TcpConnection.cc:411<br>20230424 05:52:56.887589Z 17693 TRACE updateChannel fd = 8 events = 0 index = 1 - EPollPoller.cc:111<br>20230424 05:52:56.887598Z 17693 TRACE update epoll_ctl op = DEL fd = 8 event = &#123; 8:  &#125; - EPollPoller.cc:179<br>20230424 05:52:56.887626Z 17693 INFO  127.0.0.1:33996 -&gt; 127.0.0.1:18799 is DOWN - server.cc:39<br>20230424 05:52:56.887648Z 17693 INFO  TcpServer::removeConnectionInLoop [ChatServer] - connection ChatServer-0.0.0.0:18799<span class="hljs-comment">#1 - TcpServer.cc:109</span><br>20230424 05:52:56.887665Z 17693 TRACE removeChannel fd = 8 - EPollPoller.cc:155<br>20230424 05:52:56.887679Z 17693 DEBUG ~TcpConnection TcpConnection::dtor[ChatServer-0.0.0.0:18799<span class="hljs-comment">#1] at 0x563CE5C6F9B0 fd=8 state=kDisconnected - TcpConnection.cc:68</span><br>20230424 05:52:56.887802Z 17693 TRACE poll fd total count 3 - EPollPoller.cc:57<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>网络</tag>
      
      <tag>原创</tag>
      
      <tag>muduo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>理解muduo之客户端编程</title>
    <link href="/2023/04/25/%E7%90%86%E8%A7%A3muduo%E4%B9%8B%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%BC%96%E7%A8%8B/"/>
    <url>/2023/04/25/%E7%90%86%E8%A7%A3muduo%E4%B9%8B%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="理解muduo之客户端编程"><a href="#理解muduo之客户端编程" class="headerlink" title="理解muduo之客户端编程"></a>理解muduo之客户端编程</h1><h3 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h3><p>本文通过跟踪asio_chat_client程序与muduo网络库，试图回答以下两个问题：</p><ul><li>如何建立TCP连接</li><li>如何发送与接收数据</li></ul><p>以例程为抓手，理解muduo网络库的工作机制与源码。</p><p>请时刻记住以下几张图，它有助于理解muduo工作机制以及一次循环中各种回调发生的顺序。</p><img src="/2023/04/25/%E7%90%86%E8%A7%A3muduo%E4%B9%8B%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%BC%96%E7%A8%8B/image-20230425141742220.png" alt="image-20230425141742220" style="zoom: 67%;"><p><em>muduo网络编程模型之一（默认）：多Reactor，即 one loop per thread</em></p><img src="/2023/04/25/%E7%90%86%E8%A7%A3muduo%E4%B9%8B%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%BC%96%E7%A8%8B/image-20230425141433082.png" alt="image-20230425141433082" style="zoom:67%;"><p><em>muduo网络编程模型之二：多Reactor + 线程池模型（计算线程）</em></p><blockquote><p>另外2种为：单Reactor与单Reactor+线程池</p></blockquote><img src="/2023/04/25/%E7%90%86%E8%A7%A3muduo%E4%B9%8B%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%BC%96%E7%A8%8B/image-20230425140356426.png" alt="image-20230425140356426" style="zoom:50%;"><p><em>三者关系</em></p><img src="/2023/04/25/%E7%90%86%E8%A7%A3muduo%E4%B9%8B%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%BC%96%E7%A8%8B/image-20230425142334050.png" class title="image-20230425142334050"><p><em>网络编程之Reactor模型</em></p><h3 id="1-asio-chat-client客户端程序"><a href="#1-asio-chat-client客户端程序" class="headerlink" title="1. asio_chat_client客户端程序"></a>1. asio_chat_client客户端程序</h3><p>功能：回显，即建立TCP连接后，客户端发送消息，服务端将数据原封发送回来，并显示。</p><p>源码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;examples/asio/chat/codec.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;muduo/base/Logging.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;muduo/base/Mutex.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;muduo/net/EventLoopThread.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;muduo/net/TcpClient.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;muduo/base/Logging.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> muduo;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> muduo::net;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ChatClient</span> : noncopyable<br>&#123;<br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">ChatClient</span>(EventLoop* loop, <span class="hljs-type">const</span> InetAddress&amp; serverAddr)<br>    : <span class="hljs-built_in">client_</span>(loop, serverAddr, <span class="hljs-string">&quot;ChatClient&quot;</span>),<br>      <span class="hljs-built_in">codec_</span>(std::<span class="hljs-built_in">bind</span>(&amp;ChatClient::onStringMessage, <span class="hljs-keyword">this</span>, _1, _2, _3))<br>  &#123;<br>    client_.<span class="hljs-built_in">setConnectionCallback</span>(<br>        std::<span class="hljs-built_in">bind</span>(&amp;ChatClient::onConnection, <span class="hljs-keyword">this</span>, _1));<br>    client_.<span class="hljs-built_in">setMessageCallback</span>(<br>        std::<span class="hljs-built_in">bind</span>(&amp;LengthHeaderCodec::onMessage, &amp;codec_, _1, _2, _3));<br>    client_.<span class="hljs-built_in">enableRetry</span>();<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">connect</span><span class="hljs-params">()</span></span><br><span class="hljs-function">  </span>&#123;<br>    client_.<span class="hljs-built_in">connect</span>();<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">disconnect</span><span class="hljs-params">()</span></span><br><span class="hljs-function">  </span>&#123;<br>    client_.<span class="hljs-built_in">disconnect</span>();<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-type">const</span> StringPiece&amp; message)</span></span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-function">MutexLockGuard <span class="hljs-title">lock</span><span class="hljs-params">(mutex_)</span></span>;<br>    <span class="hljs-keyword">if</span> (connection_)<br>    &#123;<br>      codec_.<span class="hljs-built_in">send</span>(<span class="hljs-built_in">get_pointer</span>(connection_), message);<br>    &#125;<br>  &#125;<br><br> <span class="hljs-keyword">private</span>:<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onConnection</span><span class="hljs-params">(<span class="hljs-type">const</span> TcpConnectionPtr&amp; conn)</span></span><br><span class="hljs-function">  </span>&#123;<br>    LOG_INFO &lt;&lt; conn-&gt;<span class="hljs-built_in">localAddress</span>().<span class="hljs-built_in">toIpPort</span>() &lt;&lt; <span class="hljs-string">&quot; -&gt; &quot;</span><br>             &lt;&lt; conn-&gt;<span class="hljs-built_in">peerAddress</span>().<span class="hljs-built_in">toIpPort</span>() &lt;&lt; <span class="hljs-string">&quot; is &quot;</span><br>             &lt;&lt; (conn-&gt;<span class="hljs-built_in">connected</span>() ? <span class="hljs-string">&quot;UP&quot;</span> : <span class="hljs-string">&quot;DOWN&quot;</span>);<br><br>    <span class="hljs-function">MutexLockGuard <span class="hljs-title">lock</span><span class="hljs-params">(mutex_)</span></span>;<br>    <span class="hljs-keyword">if</span> (conn-&gt;<span class="hljs-built_in">connected</span>())<br>    &#123;<br>      connection_ = conn;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      connection_.<span class="hljs-built_in">reset</span>();<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">onStringMessage</span><span class="hljs-params">(<span class="hljs-type">const</span> TcpConnectionPtr&amp;,</span></span><br><span class="hljs-params"><span class="hljs-function">                       <span class="hljs-type">const</span> string&amp; message,</span></span><br><span class="hljs-params"><span class="hljs-function">                       Timestamp)</span></span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&lt;&lt;&lt; %s\n&quot;</span>, message.<span class="hljs-built_in">c_str</span>());<br>  &#125;<br><br>  TcpClient client_;<br>  LengthHeaderCodec codec_;<br>  MutexLock mutex_;<br>  <span class="hljs-function">TcpConnectionPtr connection_ <span class="hljs-title">GUARDED_BY</span><span class="hljs-params">(mutex_)</span></span>;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>  Logger::<span class="hljs-built_in">setLogLevel</span>(Logger::TRACE);<br>  LOG_INFO &lt;&lt; <span class="hljs-string">&quot;pid = &quot;</span> &lt;&lt; <span class="hljs-built_in">getpid</span>();<br>  <span class="hljs-keyword">if</span> (argc &gt; <span class="hljs-number">2</span>)<br>  &#123;<br>    EventLoopThread loopThread;<br>    <span class="hljs-type">uint16_t</span> port = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">uint16_t</span>&gt;(<span class="hljs-built_in">atoi</span>(argv[<span class="hljs-number">2</span>]));<br>    <span class="hljs-function">InetAddress <span class="hljs-title">serverAddr</span><span class="hljs-params">(argv[<span class="hljs-number">1</span>], port)</span></span>; <span class="hljs-comment">// 设置协议族、IP地址与端口， 默认采用AF_INET</span><br><br>    <span class="hljs-function">ChatClient <span class="hljs-title">client</span><span class="hljs-params">(loopThread.startLoop(), serverAddr)</span></span>;<br>    client.<span class="hljs-built_in">connect</span>();<br>    std::string line;<br>    <span class="hljs-keyword">while</span> (std::<span class="hljs-built_in">getline</span>(std::cin, line))<br>    &#123;<br>      client.<span class="hljs-built_in">write</span>(line);<br>    &#125;<br>    client.<span class="hljs-built_in">disconnect</span>();<br>    CurrentThread::<span class="hljs-built_in">sleepUsec</span>(<span class="hljs-number">1000</span>*<span class="hljs-number">1000</span>);  <span class="hljs-comment">// wait for disconnect, see ace/logging/client.cc</span><br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Usage: %s host_ip port\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-loop循环的建立"><a href="#2-loop循环的建立" class="headerlink" title="2. loop循环的建立"></a>2. loop循环的建立</h3><blockquote><p>主线程：用来读取输入，下述log中的线程ID：17696</p><p>IO线程：处理IO事件，下述log中的线程ID：17697</p></blockquote><p>首先创建loopThread对象， <code>EventLoopThread loopThread</code>，该部分完成的工作是初始化以及绑定线程运行函数threadFunc。</p><p>在设置协议族、IP地址与端口后，开始实例化一个对象<code>client</code>。在获得loop后，在构造函数中，设置了连接回调函数、消息回调函数与解编码回调，解编码本文不做描述，读者感兴趣可看源码。</p><p>这部分传递2个参数，第一个是loop，即<code>loopThread.startLoop()</code>返回的loop， 第二个是服务端地址。</p><p><code>loopThread.startLoop()</code>这个函数做的工作比较多。</p><ul><li><p>首先是创建一个IO线程，然后在IO线程中实例化一个EventLoop，即实现one loop per thread。</p><ul><li>在EventLoop构造函数中，会实例化<code>timerQueue_</code>与<code>wakeupChannel_</code>。</li><li>设置<code>timerQueue_</code>的读事件回调处理函数。</li><li>将<code>timerQueue_</code>设置读事件感兴趣，并将channel注册进epoll。</li><li><code>wakeupChannel_</code>执行同样操作。</li></ul></li><li><p>创建完成后，将IO线程中loop对象的地址传递给主线程。在主线程与IO线程中使用了条件变量作为同步原语。</p></li><li><p>运行<code>loop.loop</code>。</p></li></ul><p>该阶段的运行日志如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">fzy@fzy-Lenovo:~/Downloads/03_net_lib/build/release-cpp11/bin$ ./asio_chat_client localhost 18799<br>20230424 05:52:28.261481Z 17696 INFO  pid = 17696 - client.cc:84<br>20230424 05:52:28.261568Z 17696 ERROR sockets::fromIpPort - SocketsOps.cc:241<br><span class="hljs-comment"># Eventloop构造函数初始化时，：timerQueue_(new TimerQueue(this))，在timerQueue中设置enableRead</span><br><span class="hljs-comment"># timerfdChannel_.enableReading();</span><br>20230424 05:52:28.261943Z 17697 TRACE updateChannel fd = 4 events = 3 index = -1 - EPollPoller.cc:111<br>20230424 05:52:28.261973Z 17697 TRACE update epoll_ctl op = ADD fd = 4 event = &#123; 4: IN PRI  &#125; - EPollPoller.cc:179<br><span class="hljs-comment"># Eventloop构造函数，wakeupChannel_-&gt;enableReading();</span><br>20230424 05:52:28.262045Z 17697 DEBUG EventLoop EventLoop created 0x7FADC3B27B30 <span class="hljs-keyword">in</span> thread 17697 - EventLoop.cc:79<br>20230424 05:52:28.262055Z 17697 TRACE updateChannel fd = 5 events = 3 index = -1 - EPollPoller.cc:111<br>20230424 05:52:28.262062Z 17697 TRACE update epoll_ctl op = ADD fd = 5 event = &#123; 5: IN PRI  &#125; - EPollPoller.cc:179<br><span class="hljs-comment"># loop.loop()</span><br>20230424 05:52:28.262083Z 17697 TRACE loop EventLoop 0x7FADC3B27B30 start looping - EventLoop.cc:111<br>20230424 05:52:28.262097Z 17697 TRACE poll fd total count 2 - EPollPoller.cc:57<br></code></pre></td></tr></table></figure><h3 id="3-如何建立TCP连接"><a href="#3-如何建立TCP连接" class="headerlink" title="3. 如何建立TCP连接"></a>3. 如何建立TCP连接</h3><p>一句话描述：</p><p>main函数中的<code>client.connect()</code>，怎么执行到ChatClient中的<code>void onConnection(const TcpConnectionPtr&amp; conn)</code>。以下是具体的过程：</p><ul><li><code>client.connect()</code>将经过到<code>ChatClient</code>， 调用<code>TcpCient</code>中的<code>connect</code>函数，进而调用<code>start</code>函数。</li></ul><p>此时调用<code>runInLoop</code>的线程不是loop线程，因此需要进行唤醒， <code>startInLoop</code>实际在<code>doPendingFunctors</code>中执行</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// muduo/net/Connector.cc</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Connector::start</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  connect_ = <span class="hljs-literal">true</span>; <br>  <span class="hljs-comment">// 此时调用runInLoop的线程不是loop线程，因此需要进行唤醒， startInLoop实际在doPendingFunctors中执行</span><br>  loop_-&gt;<span class="hljs-built_in">runInLoop</span>(std::<span class="hljs-built_in">bind</span>(&amp;Connector::startInLoop, <span class="hljs-keyword">this</span>)); <span class="hljs-comment">// <span class="hljs-doctag">FIXME:</span> unsafe</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Connector::startInLoop</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  loop_-&gt;<span class="hljs-built_in">assertInLoopThread</span>();<br>  <span class="hljs-built_in">assert</span>(state_ == kDisconnected);<br>  <span class="hljs-keyword">if</span> (connect_)<br>  &#123;<br>    <span class="hljs-built_in">connect</span>(); <span class="hljs-comment">// 开始准备建立连接</span><br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    LOG_DEBUG &lt;&lt; <span class="hljs-string">&quot;do not connect&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>在<code>connect</code>中，将创建非阻塞socket以及调用<code>socket connect</code>，连接建立成功后，调用<code>connecting</code>函数，并将<code>sockfd</code>传递给<code>connecting</code>函数。</li><li>在<code>connecting</code>中，将建立TCP连接阶段时的写回调，注意，当建立连接后，Channel的回调将转到TCP Connection中。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// muduo/net/Connector.cc</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Connector::connecting</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd)</span>   <span class="hljs-comment">// socket连接建立后，处理上层</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-built_in">setState</span>(kConnecting);<br>  <span class="hljs-built_in">assert</span>(!channel_);<br>  channel_.<span class="hljs-built_in">reset</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Channel</span>(loop_, sockfd));<br>  channel_-&gt;<span class="hljs-built_in">setWriteCallback</span>(  <span class="hljs-comment">// 建立TCP连接阶段时的写回调</span><br>      std::<span class="hljs-built_in">bind</span>(&amp;Connector::handleWrite, <span class="hljs-keyword">this</span>)); <span class="hljs-comment">// <span class="hljs-doctag">FIXME:</span> unsafe</span><br>  channel_-&gt;<span class="hljs-built_in">setErrorCallback</span>(<br>      std::<span class="hljs-built_in">bind</span>(&amp;Connector::handleError, <span class="hljs-keyword">this</span>)); <span class="hljs-comment">// <span class="hljs-doctag">FIXME:</span> unsafe</span><br><br>  <span class="hljs-comment">// channel_-&gt;tie(shared_from_this()); is not working,</span><br>  <span class="hljs-comment">// as channel_ is not managed by shared_ptr</span><br>  channel_-&gt;<span class="hljs-built_in">enableWriting</span>();   <span class="hljs-comment">// 最终会把channel添加到epoll中</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>写事件的发生</li></ul><p><code>enableWriting</code>注册写事件，即触发写事件。</p><ul><li>写事件的处理以及连接的建立</li></ul><p>写事件发生后，在<code>EventLoop::loop()</code>中执行<code>currentActiveChannel_-&gt;handleEvent(pollReturnTime_)</code>，此时会去处理写事件。而在连接阶段，channel中的写事件的回调函数是由connector负责的，即<code>Connector::handleWrite()</code>函数。</p><p>在handleWrite函数中，将经历一次<code>removeAndResetChannel()</code>，完成清除channel事件、将channel从epoll中移除、保存建立连接的sockfd（用于后续重新加入epoll）以及重置channel（释放当前指针所拥有的对象，并将channel_置为nullptr）。</p><p>注意，这个<code>channel_.reset()</code>是在<code>handleEvent</code>结束后的<code>doPendingFunctors</code>中处理的。</p><p>之后处理socket错误，即<code>sockets::getSocketError</code>，它的作用是再次确认是否成功建立连接。若有自连接事件发生，就处理自连接。<code>getSocketError</code>没有错误的话，就设置状态为<code>kConnected</code>，并执行连接回调，即执行<code> TcpClient</code>中的 <code>newConnection()</code>。</p><p>在<code>newConnection()</code>中，最重要的事情就是实例化<code>TcpConnection</code>，并设置<code>TcpConnection</code>的回调函数，其中的连接、消息处理以及写完整回调是由上层应用开发者开发的客户端程序中设置的，比如<code>onConnect()</code>。在这个函数的最后，会执行<code>connectEstablished()</code>。它会重新将channel加入epoll，以及执行应用程序<code>onConnect</code>回调。</p><p>至此，客户端与服务端的TCP连接就真正建立了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// muduo/net/TcpClient.cc</span><br><span class="hljs-comment">// 当连接建立后执行， sockfd：已经建立连接后的socket</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TcpClient::newConnection</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd)</span></span><br><span class="hljs-function"></span>&#123;<br>  loop_-&gt;<span class="hljs-built_in">assertInLoopThread</span>();<br>  <span class="hljs-function">InetAddress <span class="hljs-title">peerAddr</span><span class="hljs-params">(sockets::getPeerAddr(sockfd))</span></span>;<br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">32</span>];<br>  <span class="hljs-built_in">snprintf</span>(buf, <span class="hljs-keyword">sizeof</span> buf, <span class="hljs-string">&quot;:%s#%d&quot;</span>, peerAddr.<span class="hljs-built_in">toIpPort</span>().<span class="hljs-built_in">c_str</span>(), nextConnId_);<br>  ++nextConnId_;<br>  string connName = name_ + buf;<br><br>  <span class="hljs-function">InetAddress <span class="hljs-title">localAddr</span><span class="hljs-params">(sockets::getLocalAddr(sockfd))</span></span>;<br>  <span class="hljs-comment">// FIXME poll with zero timeout to double confirm the new connection</span><br>  <span class="hljs-comment">// FIXME use make_shared if necessary</span><br>  <span class="hljs-comment">// 实例化 TcpConnection，后续通信将通过TcpConnection进行</span><br>  <span class="hljs-function">TcpConnectionPtr <span class="hljs-title">conn</span><span class="hljs-params">(<span class="hljs-keyword">new</span> TcpConnection(loop_,</span></span><br><span class="hljs-params"><span class="hljs-function">                                          connName,</span></span><br><span class="hljs-params"><span class="hljs-function">                                          sockfd,</span></span><br><span class="hljs-params"><span class="hljs-function">                                          localAddr,</span></span><br><span class="hljs-params"><span class="hljs-function">                                          peerAddr))</span></span>;<br><br>  conn-&gt;<span class="hljs-built_in">setConnectionCallback</span>(connectionCallback_);  <span class="hljs-comment">// 执行应用程序中的onConnect()</span><br>  conn-&gt;<span class="hljs-built_in">setMessageCallback</span>(messageCallback_);       <span class="hljs-comment">// 这些都是客户端应用程序设置的回调函数</span><br>  conn-&gt;<span class="hljs-built_in">setWriteCompleteCallback</span>(writeCompleteCallback_);<br>  conn-&gt;<span class="hljs-built_in">setCloseCallback</span>(<br>      std::<span class="hljs-built_in">bind</span>(&amp;TcpClient::removeConnection, <span class="hljs-keyword">this</span>, _1)); <span class="hljs-comment">// <span class="hljs-doctag">FIXME:</span> unsafe</span><br>  &#123;<br>    <span class="hljs-function">MutexLockGuard <span class="hljs-title">lock</span><span class="hljs-params">(mutex_)</span></span>;<br>    connection_ = conn;<br>  &#125;<br>  conn-&gt;<span class="hljs-built_in">connectEstablished</span>(); <span class="hljs-comment">// 重新将channel加入epoll，以及执行应用程序onConnect回调</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// muduo/net/TcpClient.cc</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TcpConnection::connectEstablished</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  loop_-&gt;<span class="hljs-built_in">assertInLoopThread</span>();<br>  <span class="hljs-built_in">assert</span>(state_ == kConnecting);<br>  <span class="hljs-built_in">setState</span>(kConnected);<br>  channel_-&gt;<span class="hljs-built_in">tie</span>(<span class="hljs-built_in">shared_from_this</span>());<br>  channel_-&gt;<span class="hljs-built_in">enableReading</span>();   <span class="hljs-comment">// 将channel重新加入epoll</span><br><br>  <span class="hljs-built_in">connectionCallback_</span>(<span class="hljs-built_in">shared_from_this</span>());  <span class="hljs-comment">// 在这里真正执行client中的onConnect回调</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>TcpConnection</code>的构造函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// muduo/net/TcpConnection.cc</span><br>TcpConnection::<span class="hljs-built_in">TcpConnection</span>(EventLoop* loop,<br>                             <span class="hljs-type">const</span> string&amp; nameArg,<br>                             <span class="hljs-type">int</span> sockfd,<br>                             <span class="hljs-type">const</span> InetAddress&amp; localAddr,<br>                             <span class="hljs-type">const</span> InetAddress&amp; peerAddr)<br>  : <span class="hljs-built_in">loop_</span>(<span class="hljs-built_in">CHECK_NOTNULL</span>(loop)),<br>    <span class="hljs-built_in">name_</span>(nameArg),<br>    <span class="hljs-built_in">state_</span>(kConnecting),<br>    <span class="hljs-built_in">reading_</span>(<span class="hljs-literal">true</span>),<br>    <span class="hljs-built_in">socket_</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Socket</span>(sockfd)),<br>    <span class="hljs-built_in">channel_</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Channel</span>(loop, sockfd)),<br>    <span class="hljs-built_in">localAddr_</span>(localAddr),<br>    <span class="hljs-built_in">peerAddr_</span>(peerAddr),<br>    <span class="hljs-built_in">highWaterMark_</span>(<span class="hljs-number">64</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>)   <br>&#123;<br>  <span class="hljs-comment">// 在建立TCP连接以后</span><br>  <span class="hljs-comment">// 处理在loop中运行的channel中的读、写、关闭以及错误回调处理函数</span><br>  channel_-&gt;<span class="hljs-built_in">setReadCallback</span>(<br>      std::<span class="hljs-built_in">bind</span>(&amp;TcpConnection::handleRead, <span class="hljs-keyword">this</span>, _1));  <br>  channel_-&gt;<span class="hljs-built_in">setWriteCallback</span>(<br>      std::<span class="hljs-built_in">bind</span>(&amp;TcpConnection::handleWrite, <span class="hljs-keyword">this</span>));<br>  channel_-&gt;<span class="hljs-built_in">setCloseCallback</span>(<br>      std::<span class="hljs-built_in">bind</span>(&amp;TcpConnection::handleClose, <span class="hljs-keyword">this</span>));<br>  channel_-&gt;<span class="hljs-built_in">setErrorCallback</span>(<br>      std::<span class="hljs-built_in">bind</span>(&amp;TcpConnection::handleError, <span class="hljs-keyword">this</span>));<br>  LOG_DEBUG &lt;&lt; <span class="hljs-string">&quot;TcpConnection::ctor[&quot;</span> &lt;&lt;  name_ &lt;&lt; <span class="hljs-string">&quot;] at &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span><br>            &lt;&lt; <span class="hljs-string">&quot; fd=&quot;</span> &lt;&lt; sockfd;<br>  socket_-&gt;<span class="hljs-built_in">setKeepAlive</span>(<span class="hljs-literal">true</span>);   <span class="hljs-comment">// 设置TCP保活机制</span><br>&#125;<br></code></pre></td></tr></table></figure><p>该阶段日志如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Connector构造</span><br>20230424 05:52:28.262139Z 17696 DEBUG Connector ctor[0x5603D49F74A0] - Connector.cc:31<br><span class="hljs-comment"># TcpClient构造</span><br>20230424 05:52:28.262175Z 17696 INFO  TcpClient::TcpClient[ChatClient] - connector 0x5603D49F74A0 - TcpClient.cc:69<br><span class="hljs-comment"># client.connect();</span><br>20230424 05:52:28.262187Z 17696 INFO  TcpClient::connect[ChatClient] - connecting to 0.0.0.0:18799 - TcpClient.cc:107<br><span class="hljs-comment"># 有上层事件发生，唤醒loop线程</span><br>20230424 05:52:28.262227Z 17697 TRACE poll 1 events happened - EPollPoller.cc:66<br>20230424 05:52:28.262241Z 17697 TRACE printActiveChannels &#123;5: IN &#125;  - EventLoop.cc:277<br>20230424 05:52:28.262262Z 17697 TRACE handleEventWithGuard 5: IN  - Channel.cc:86<br><span class="hljs-comment"># 将建立的channel（socket）更新到epoll中</span><br>20230424 05:52:28.262454Z 17697 TRACE updateChannel fd = 6 events = 4 index = -1 - EPollPoller.cc:111<br>20230424 05:52:28.262470Z 17697 TRACE update epoll_ctl op = ADD fd = 6 event = &#123; 6: OUT  &#125; - EPollPoller.cc:179<br><span class="hljs-comment"># 继续阻塞在epoll_wait</span><br>20230424 05:52:28.262492Z 17697 TRACE poll fd total count 3 - EPollPoller.cc:57<br><span class="hljs-comment"># 写事件发生，刚注册当然可写</span><br>20230424 05:52:28.262503Z 17697 TRACE poll 1 events happened - EPollPoller.cc:66<br>20230424 05:52:28.262508Z 17697 TRACE printActiveChannels &#123;6: OUT &#125;  - EventLoop.cc:277<br>20230424 05:52:28.262516Z 17697 TRACE handleEventWithGuard 6: OUT  - Channel.cc:86<br><span class="hljs-comment"># void Connector::handleWrite()</span><br>20230424 05:52:28.262541Z 17697 TRACE handleWrite Connector::handleWrite 1 - Connector.cc:160<br>20230424 05:52:28.262546Z 17697 TRACE updateChannel fd = 6 events = 0 index = 1 - EPollPoller.cc:111<br>20230424 05:52:28.262559Z 17697 TRACE update epoll_ctl op = DEL fd = 6 event = &#123; 6:  &#125; - EPollPoller.cc:179<br>20230424 05:52:28.262572Z 17697 TRACE removeChannel fd = 6 - EPollPoller.cc:155<br><span class="hljs-comment"># TcpConnection构造函数</span><br>20230424 05:52:28.262610Z 17697 DEBUG TcpConnection TcpConnection::ctor[ChatClient:127.0.0.1:18799<span class="hljs-comment">#1] at 0x7FADBC001120 fd=6 - TcpConnection.cc:61</span><br><span class="hljs-comment"># void TcpConnection::connectEstablished()   enableReading()</span><br>20230424 05:52:28.262626Z 17697 TRACE updateChannel fd = 6 events = 3 index = -1 - EPollPoller.cc:111<br>20230424 05:52:28.262635Z 17697 TRACE update epoll_ctl op = ADD fd = 6 event = &#123; 6: IN PRI  &#125; - EPollPoller.cc:179<br><span class="hljs-comment"># client.cc中的onConnect()</span><br>20230424 05:52:28.262655Z 17697 INFO  127.0.0.1:33996 -&gt; 127.0.0.1:18799 is UP - client.cc:53<br></code></pre></td></tr></table></figure><p>在连接建立的过程中，我们发现channel经历了加入epoll，又移除，后续又加入的过程。即为什么存在<code>removeAndResetChannel</code>这个函数。</p><p>&#x3D;&#x3D;TODO 解答&#x3D;&#x3D;</p><h3 id="4-如何发送与接收数据"><a href="#4-如何发送与接收数据" class="headerlink" title="4. 如何发送与接收数据"></a>4. 如何发送与接收数据</h3><p>一句话描述：</p><p>main函数中的<code>client.write(line)</code>，怎么执行到ChatClient中的<code>void onStringMessage</code>。</p><h4 id="4-1-发送过程"><a href="#4-1-发送过程" class="headerlink" title="4.1 发送过程"></a>4.1 发送过程</h4><ul><li>主线程读取一行用户输入，调用<code>ChatClient</code>的<code>write</code>方法。最终调用<code>TcpConnection::send()</code>发送数据。关于buffer的处理将在后续专题叙述。</li><li>在send方法中，由于此时在主线程上，因此需要唤醒IO线程，并在IO线程中执行发送任务。唤醒与执行如前所述。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// muduo/net/TcpConnection.cc</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TcpConnection::send</span><span class="hljs-params">(Buffer* buf)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">if</span> (state_ == kConnected)<br>  &#123;<br>    <span class="hljs-keyword">if</span> (loop_-&gt;<span class="hljs-built_in">isInLoopThread</span>())<br>    &#123;<br>      <span class="hljs-built_in">sendInLoop</span>(buf-&gt;<span class="hljs-built_in">peek</span>(), buf-&gt;<span class="hljs-built_in">readableBytes</span>());<br>      buf-&gt;<span class="hljs-built_in">retrieveAll</span>();<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;  <span class="hljs-comment">// 定义一个指向sendInLoop的函数指针sendInLoop</span><br>      <span class="hljs-built_in">void</span> (TcpConnection::*fp)(<span class="hljs-type">const</span> StringPiece&amp; message) = &amp;TcpConnection::sendInLoop;<br>      loop_-&gt;<span class="hljs-built_in">runInLoop</span>(   <span class="hljs-comment">// 唤醒后在IO线程中执行</span><br>          std::<span class="hljs-built_in">bind</span>(fp,<br>                    <span class="hljs-keyword">this</span>,     <span class="hljs-comment">// FIXME</span><br>                    buf-&gt;<span class="hljs-built_in">retrieveAllAsString</span>()));<br>                    <span class="hljs-comment">//std::forward&lt;string&gt;(message)));</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>在<code>TcpConnection::sendInLoop(const void* data, size_t len)</code>函数中，如果输出队列上没有数据，将直接将消息发送出去，反之则将数据追加到<code>outputBuffer_</code>。若应用程序设置了写完整回调函数，则会在loop中执行写完整回调函数。</li><li>发送结束</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// muduo/net/TcpConnection.cc</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TcpConnection::sendInLoop</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* data, <span class="hljs-type">size_t</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>  loop_-&gt;<span class="hljs-built_in">assertInLoopThread</span>();<br>  <span class="hljs-comment">// if no thing in output queue, try writing directly</span><br>  <span class="hljs-comment">// 直接写</span><br>  <span class="hljs-keyword">if</span> (!channel_-&gt;<span class="hljs-built_in">isWriting</span>() &amp;&amp; outputBuffer_.<span class="hljs-built_in">readableBytes</span>() == <span class="hljs-number">0</span>)<br>  &#123;<br>      <span class="hljs-comment">// 返回共发出去多少字节，或者返回-1（出错）</span><br>    nwrote = sockets::<span class="hljs-built_in">write</span>(channel_-&gt;<span class="hljs-built_in">fd</span>(), data, len);<br>    <span class="hljs-keyword">if</span> (nwrote &gt;= <span class="hljs-number">0</span>)<br>    &#123;<br>      remaining = len - nwrote;<br>      <span class="hljs-keyword">if</span> (remaining == <span class="hljs-number">0</span> &amp;&amp; writeCompleteCallback_) <span class="hljs-comment">// // 全发出去了</span><br>      &#123;<br>        loop_-&gt;<span class="hljs-built_in">queueInLoop</span>(std::<span class="hljs-built_in">bind</span>(writeCompleteCallback_, <span class="hljs-built_in">shared_from_this</span>()));<br>      &#125;<br>    &#125;<br>      <span class="hljs-comment">// ...</span><br> &#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-接收过程"><a href="#4-2-接收过程" class="headerlink" title="4.2 接收过程"></a>4.2 接收过程</h4><ul><li>epoll触发读回调</li><li>执行<code> Channel::handleEventWithGuard</code>，并根据事件回调类型选择具体回调函数，本次Wie读回调处理函数，实际处理函数为<code>TcpConnection::handleRead</code>。</li><li>将数据放回到<code>inputBuffer_</code>后，执行消息回调<code>messageCallback_</code>。改回调函数经<code>TcpClient</code>，最终实际执行的是应用程序的消息回调函数。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// muduo/net/TcpConnection.cc</span><br><span class="hljs-comment">// 处理在loop中handleEvent事件之读事件</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TcpConnection::handleRead</span><span class="hljs-params">(Timestamp receiveTime)</span></span><br><span class="hljs-function"></span>&#123;<br>  loop_-&gt;<span class="hljs-built_in">assertInLoopThread</span>();<br>  <span class="hljs-type">int</span> savedErrno = <span class="hljs-number">0</span>;<br>  <span class="hljs-type">ssize_t</span> n = inputBuffer_.<span class="hljs-built_in">readFd</span>(channel_-&gt;<span class="hljs-built_in">fd</span>(), &amp;savedErrno);<br>  <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">0</span>)<br>  &#123;<br>    <span class="hljs-built_in">messageCallback_</span>(<span class="hljs-built_in">shared_from_this</span>(), &amp;inputBuffer_, receiveTime);  <span class="hljs-comment">// 消息回调</span><br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>)<br>  &#123;<br>    <span class="hljs-built_in">handleClose</span>();<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    errno = savedErrno;<br>    LOG_SYSERR &lt;&lt; <span class="hljs-string">&quot;TcpConnection::handleRead&quot;</span>;<br>    <span class="hljs-built_in">handleError</span>();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>在本例程中，上述代码中的<code>messageCallback_</code>是<code>LengthHeaderCodec</code>中的<code>onMessage</code>， 经过处理后最终回调到<code>ChatClient</code>中的<code>onStringMessage</code>函数。</li><li>接收消息并显示，在结束后，loop将继续阻塞在poll处，等待下次事件发生。</li></ul><p>该阶段日志如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 写入数据</span><br>helloworld<br><span class="hljs-comment"># 写事件发生，唤醒</span><br>20230424 05:52:47.287685Z 17697 TRACE poll 1 events happened - EPollPoller.cc:66<br>20230424 05:52:47.287713Z 17697 TRACE printActiveChannels &#123;5: IN &#125;  - EventLoop.cc:277<br>20230424 05:52:47.287737Z 17697 TRACE handleEventWithGuard 5: IN  - Channel.cc:86<br><span class="hljs-comment"># -------------------------------------------------------------------------------</span><br><span class="hljs-comment"># 接收阶段</span><br><span class="hljs-comment"># 读事件发生</span><br>20230424 05:52:47.287839Z 17697 TRACE poll fd total count 3 - EPollPoller.cc:57<br>20230424 05:52:47.288177Z 17697 TRACE poll 1 events happened - EPollPoller.cc:66<br>20230424 05:52:47.288197Z 17697 TRACE printActiveChannels &#123;6: IN &#125;  - EventLoop.cc:277<br>20230424 05:52:47.288213Z 17697 TRACE handleEventWithGuard 6: IN  - Channel.cc:86<br>&lt;&lt;&lt; <span class="hljs-string">helloworld</span><br><span class="hljs-string"># 继续阻塞在epoll_wait</span><br><span class="hljs-string">20230424 05:52:47.288315Z 17697 TRACE poll fd total count 3 - EPollPoller.cc:57</span><br></code></pre></td></tr></table></figure><h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h3><p>本文的主要内容，在陈硕的《Linux多线程服务端编程》一书中均有体现。陈书全面之余，有些许零散，初次阅读可能会很难从整体把握muduo工作流。因此尝试以应用开发者的角度，跟踪源码，将整个过程串起来。</p><p>本文可能有错误之处，敬请批评指正。</p>]]></content>
    
    
    
    <tags>
      
      <tag>网络</tag>
      
      <tag>原创</tag>
      
      <tag>muduo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux内核TCP三次握手过程及在wireshark中的观测</title>
    <link href="/2023/04/19/%E4%BB%8Ewireshark%E4%B8%AD%E7%9C%8BTCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/"/>
    <url>/2023/04/19/%E4%BB%8Ewireshark%E4%B8%AD%E7%9C%8BTCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux内核TCP三次握手过程及在wireshark中的观测"><a href="#Linux内核TCP三次握手过程及在wireshark中的观测" class="headerlink" title="Linux内核TCP三次握手过程及在wireshark中的观测"></a>Linux内核TCP三次握手过程及在wireshark中的观测</h1><h3 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h3><img src="https://zorrozou.github.io/docs/tcp/handshake/image-20200426133103189.png" alt="TCP三次握手过程" style="zoom:50%;"><p>从应用角度看TCP三次握手过程</p><blockquote><p>图片出处：<a href="https://wenfh2020.com/2021/08/17/kernel-tcp-handshakes/">[内核源码] 网络协议栈 - tcp 三次握手状态</a></p></blockquote><img src="/2023/04/19/%E4%BB%8Ewireshark%E4%B8%AD%E7%9C%8BTCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/2021-08-18-13-26-18.png" class title="img"><img src="/2023/04/19/%E4%BB%8Ewireshark%E4%B8%AD%E7%9C%8BTCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/2021-08-18-15-42-54.png" class title="img"><h3 id="1-Linux内核中TCP三次握手的过程"><a href="#1-Linux内核中TCP三次握手的过程" class="headerlink" title="1. Linux内核中TCP三次握手的过程"></a>1. Linux内核中TCP三次握手的过程</h3><blockquote><p>内核版本：5.10.104</p></blockquote><h4 id="1-1-客户端connect（SYN的发出）"><a href="#1-1-客户端connect（SYN的发出）" class="headerlink" title="1.1 客户端connect（SYN的发出）"></a>1.1 客户端connect（SYN的发出）</h4><p>客户端使用<code>socket API</code>中的<code>connect</code>函数来进行TCP三次握手。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// net/socket.c</span><br><span class="hljs-comment">// connect系统调用，发起三次握手</span><br>SYSCALL_DEFINE3(connect, <span class="hljs-type">int</span>, fd, <span class="hljs-keyword">struct</span> sockaddr __user *, uservaddr,<br><span class="hljs-type">int</span>, addrlen)<br>&#123;<br><span class="hljs-keyword">return</span> __sys_connect(fd, uservaddr, addrlen);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// net/socket.c</span><br><span class="hljs-type">int</span> __sys_connect(<span class="hljs-type">int</span> fd, <span class="hljs-keyword">struct</span> sockaddr __user *uservaddr, <span class="hljs-type">int</span> addrlen)<br>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-comment">// 地址从用户空间拷贝到内核空间</span><br>ret = move_addr_to_kernel(uservaddr, addrlen, &amp;address); <br><span class="hljs-keyword">if</span> (!ret)<br>ret = __sys_connect_file(f.file, &amp;address, addrlen, <span class="hljs-number">0</span>); <span class="hljs-comment">// 开始连接</span><br>fdput(f);<br>    <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-type">int</span> __sys_connect_file(<span class="hljs-keyword">struct</span> file *file, <span class="hljs-keyword">struct</span> sockaddr_storage *address,<br>       <span class="hljs-type">int</span> addrlen, <span class="hljs-type">int</span> file_flags)<br>&#123;<br>    <span class="hljs-comment">// ...</span><br>err =<br>    security_socket_connect(sock, (<span class="hljs-keyword">struct</span> sockaddr *)address, addrlen);  <span class="hljs-comment">// 没启用</span><br><span class="hljs-keyword">if</span> (err)<br><span class="hljs-keyword">goto</span> out;<br>    <span class="hljs-comment">// 函数指针，TCP协议，选择TCP的connect处理函数</span><br>err = sock-&gt;ops-&gt;connect(sock, (<span class="hljs-keyword">struct</span> sockaddr *)address, addrlen,<br> sock-&gt;file-&gt;f_flags | file_flags); <br>out:<br><span class="hljs-keyword">return</span> err;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们选择的是TCP协议，因此在<code>sock-&gt;ops</code>中的<code>connect</code>实际上是指向了<code>tcp_v4_connect</code>，代码如下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// net/ipv4/tcp_ipv4.c</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proto</span> <span class="hljs-title">tcp_prot</span> =</span> &#123;<br>.name= <span class="hljs-string">&quot;TCP&quot;</span>,<br>.owner= THIS_MODULE,<br>.close= tcp_close,<br>.pre_connect= tcp_v4_pre_connect,<br>.connect= tcp_v4_connect,  <span class="hljs-comment">// connect连接处理函数</span><br>.disconnect= tcp_disconnect,<br>.accept= inet_csk_accept, <span class="hljs-comment">// accept处理函数</span><br>.ioctl= tcp_ioctl,<br>.init= tcp_v4_init_sock,<br>.destroy= tcp_v4_destroy_sock,<br>.shutdown= tcp_shutdown,<br>.setsockopt= tcp_setsockopt,<br>.getsockopt= tcp_getsockopt,<br>.keepalive= tcp_set_keepalive,<br>.recvmsg= tcp_recvmsg,<br>.sendmsg= tcp_sendmsg,<br>.sendpage= tcp_sendpage,<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>tcp_v4_connect</code>中，通过<code>tcp_set_state</code>设置<code>socket</code>状态为<code>TCP_SYN_SENT</code>，并在<code>tcp_connect</code>中构造完整报文，并发送。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// net/ipv4/tcp_ipv4.c</span><br><span class="hljs-comment">/* This will initiate an outgoing connection. */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">tcp_v4_connect</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> sock *sk, <span class="hljs-keyword">struct</span> sockaddr *uaddr, <span class="hljs-type">int</span> addr_len)</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-comment">/* Socket identity is still unknown (sport may be zero).</span><br><span class="hljs-comment"> * However we set state to SYN-SENT and not releasing socket</span><br><span class="hljs-comment"> * lock select source port, enter ourselves into the hash tables and</span><br><span class="hljs-comment"> * complete initialization after this.</span><br><span class="hljs-comment"> */</span><br>tcp_set_state(sk, TCP_SYN_SENT);  <span class="hljs-comment">// 设置socket状态为TCP_SYN_SENT</span><br>    <span class="hljs-comment">// ...</span><br>    err = tcp_connect(sk);  <span class="hljs-comment">// 构建完整的syn报文，并发送</span><br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>tcp_connect</code>中，构造了一个SYN包，并在<code>tcp_send_syn_data</code>函数中将包添加到发送队列</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// net/ipv4/tcp_output.c</span><br><span class="hljs-comment">/* Build a SYN and send it off. */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">tcp_connect</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> sock *sk)</span><br>&#123;<br><span class="hljs-comment">// ...</span><br>    <span class="hljs-comment">// 申请 skb，并构造为一个SYN包</span><br>buff = sk_stream_alloc_skb(sk, <span class="hljs-number">0</span>, sk-&gt;sk_allocation, <span class="hljs-literal">true</span>);<br><span class="hljs-keyword">if</span> (unlikely(!buff))<br><span class="hljs-keyword">return</span> -ENOBUFS;<br><span class="hljs-comment">// ...</span><br><span class="hljs-comment">/* Send off SYN; include data in Fast Open. */</span><br>    <span class="hljs-comment">// 添加到发送队列</span><br>err = tp-&gt;fastopen_req ? tcp_send_syn_data(sk, buff) :<br>      tcp_transmit_skb(sk, buff, <span class="hljs-number">1</span>, sk-&gt;sk_allocation);<br><span class="hljs-keyword">if</span> (err == -ECONNREFUSED)<br><span class="hljs-keyword">return</span> err;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-comment">/* Timer for repeating the SYN until an answer. */</span><br>    <span class="hljs-comment">// 启动重传计时器</span><br>inet_csk_reset_xmit_timer(sk, ICSK_TIME_RETRANS,<br>  inet_csk(sk)-&gt;icsk_rto, TCP_RTO_MAX);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>EXPORT_SYMBOL(tcp_connect);<br></code></pre></td></tr></table></figure><p>使用<code>tcp_transmit_skb</code>函数将包发送出去</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// net/ipv4/tcp_output.c</span><br><span class="hljs-comment">/* Build and send a SYN with data and (cached) Fast Open cookie. However,</span><br><span class="hljs-comment"> * queue a data-only packet after the regular SYN, such that regular SYNs</span><br><span class="hljs-comment"> * are retransmitted on timeouts. Also if the remote SYN-ACK acknowledges</span><br><span class="hljs-comment"> * only the SYN sequence, the data are retransmitted in the first ACK.</span><br><span class="hljs-comment"> * If cookie is not cached or other error occurs, falls back to send a</span><br><span class="hljs-comment"> * regular SYN with Fast Open cookie request option.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tcp_send_syn_data</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> sock *sk, <span class="hljs-keyword">struct</span> sk_buff *syn)</span><br>&#123;<br><span class="hljs-comment">// ...</span><br>    <span class="hljs-comment">// 发送SYN报文</span><br>    err = tcp_transmit_skb(sk, syn_data, <span class="hljs-number">1</span>, sk-&gt;sk_allocation);<br><span class="hljs-comment">// ...</span><br><span class="hljs-comment">/* data was not sent, put it in write_queue */</span><br>__skb_queue_tail(&amp;sk-&gt;sk_write_queue, syn_data);  <span class="hljs-comment">// 没发送，添加到发送队列</span><br>tp-&gt;packets_out -= tcp_skb_pcount(syn_data);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>tcp_transmit_skb</code>调用到<code>__tcp_transmit_skb</code>，完成TCP header的构建后，调用<code>ip_queue_xmit</code>，移交IP层处理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// net/ipv4/tcp_output.c</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> __tcp_transmit_skb(<span class="hljs-keyword">struct</span> sock *sk, <span class="hljs-keyword">struct</span> sk_buff *skb,<br>      <span class="hljs-type">int</span> clone_it, <span class="hljs-type">gfp_t</span> gfp_mask, u32 rcv_nxt)<br>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">if</span> (unlikely(tcb-&gt;tcp_flags &amp; TCPHDR_SYN)) &#123;<br>        <span class="hljs-comment">// 建立连接时的SYN包， TCP options构造</span><br>tcp_options_size = tcp_syn_options(sk, skb, &amp;opts, &amp;md5);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 已连接的TCP连接， TCP options构造</span><br>tcp_options_size = tcp_established_options(sk, skb, &amp;opts,<br>   &amp;md5);<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-comment">/* BPF prog is the last one writing header option */</span><br>    <span class="hljs-comment">// 用BPF技术也可以造TCP options包（开启相关配置）</span><br>bpf_skops_write_hdr_opt(sk, skb, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, &amp;opts);<br>    <span class="hljs-comment">// ...</span><br>    err = INDIRECT_CALL_INET(icsk-&gt;icsk_af_ops-&gt;queue_xmit,<br>                                 inet6_csk_xmit, ip_queue_xmit, <span class="hljs-comment">// 发送到IP层</span><br>                                 sk, skb, &amp;inet-&gt;cork.fl);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-2-服务端accept（SYN-ACK的发出）"><a href="#1-2-服务端accept（SYN-ACK的发出）" class="headerlink" title="1.2 服务端accept（SYN+ACK的发出）"></a>1.2 服务端accept（SYN+ACK的发出）</h4><p>&#x3D;&#x3D;TODO&#x3D;&#x3D;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// net/ipv4/tcp_ipv4.c</span><br><span class="hljs-comment">/* The socket must have it&#x27;s spinlock held when we get</span><br><span class="hljs-comment"> * here, unless it is a TCP_LISTEN socket.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * We have a potential double-lock case here, so even when</span><br><span class="hljs-comment"> * doing backlog processing we use the BH locking scheme.</span><br><span class="hljs-comment"> * This is because we cannot sleep with the original spinlock</span><br><span class="hljs-comment"> * held.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">tcp_v4_do_rcv</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> sock *sk, <span class="hljs-keyword">struct</span> sk_buff *skb)</span><br>&#123;<br><span class="hljs-comment">// ...</span><br><span class="hljs-keyword">if</span> (sk-&gt;sk_state == TCP_LISTEN) &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sock</span> *<span class="hljs-title">nsk</span> =</span> tcp_v4_cookie_check(sk, skb);<br><br><span class="hljs-keyword">if</span> (!nsk)<br><span class="hljs-keyword">goto</span> discard;<br><span class="hljs-keyword">if</span> (nsk != sk) &#123;<br><span class="hljs-keyword">if</span> (tcp_child_process(sk, nsk, skb)) &#123;  <span class="hljs-comment">// 被动监听模式</span><br>rsk = nsk;<br><span class="hljs-keyword">goto</span> reset;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span><br>sock_rps_save_rxhash(sk, skb);<br><br><span class="hljs-keyword">if</span> (tcp_rcv_state_process(sk, skb)) &#123;<br>rsk = sk;<br><span class="hljs-keyword">goto</span> reset;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>EXPORT_SYMBOL(tcp_v4_do_rcv);<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// net/ipv4/tcp_minisocks.c</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Queue segment on the new socket if the new socket is active,</span><br><span class="hljs-comment"> * otherwise we just shortcircuit this and continue with</span><br><span class="hljs-comment"> * the new socket.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * For the vast majority of cases child-&gt;sk_state will be TCP_SYN_RECV</span><br><span class="hljs-comment"> * when entering. But other states are possible due to a race condition</span><br><span class="hljs-comment"> * where after __inet_lookup_established() fails but before the listener</span><br><span class="hljs-comment"> * locked is obtained, other packets cause the same connection to</span><br><span class="hljs-comment"> * be created.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">tcp_child_process</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> sock *parent, <span class="hljs-keyword">struct</span> sock *child,</span><br><span class="hljs-params">      <span class="hljs-keyword">struct</span> sk_buff *skb)</span><br>__<span class="hljs-title function_">releases</span><span class="hljs-params">(&amp;((child)-&gt;sk_lock.slock))</span><br>&#123;<br><span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> state = child-&gt;sk_state;<br><br><span class="hljs-comment">/* record NAPI ID of child */</span><br>sk_mark_napi_id(child, skb);<br><br>tcp_segs_in(tcp_sk(child), skb);<br><span class="hljs-keyword">if</span> (!sock_owned_by_user(child)) &#123;<br>ret = tcp_rcv_state_process(child, skb);<br><span class="hljs-comment">/* Wakeup parent, send SIGIO */</span><br><span class="hljs-keyword">if</span> (state == TCP_SYN_RECV &amp;&amp; child-&gt;sk_state != state)<br>parent-&gt;sk_data_ready(parent);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">/* Alas, it is possible again, because we do lookup</span><br><span class="hljs-comment"> * in main socket hash table and lock on listening</span><br><span class="hljs-comment"> * socket does not protect us more.</span><br><span class="hljs-comment"> */</span><br>__sk_add_backlog(child, skb);<br>&#125;<br><br>bh_unlock_sock(child);<br>sock_put(child);<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br>EXPORT_SYMBOL(tcp_child_process);<br></code></pre></td></tr></table></figure><p>在<code>tcp_rcv_state_process</code>中的函数<code>tcp_rcv_synsent_state_process</code>中， 通过<code>tcp_parse_options</code>解析TCP options。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// net/ipv4/tcp_input.c</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *This function implements the receiving procedure of RFC 793 for</span><br><span class="hljs-comment"> *all states except ESTABLISHED and TIME_WAIT.</span><br><span class="hljs-comment"> *It&#x27;s called from both tcp_v4_rcv and tcp_v6_rcv and should be</span><br><span class="hljs-comment"> *address independent.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">tcp_rcv_state_process</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> sock *sk, <span class="hljs-keyword">struct</span> sk_buff *skb)</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">case</span> TCP_SYN_SENT:<br>tp-&gt;rx_opt.saw_tstamp = <span class="hljs-number">0</span>;<br>tcp_mstamp_refresh(tp);<br>queued = tcp_rcv_synsent_state_process(sk, skb, th);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tcp_rcv_synsent_state_process</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> sock *sk, <span class="hljs-keyword">struct</span> sk_buff *skb,</span><br><span class="hljs-params"> <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> tcphdr *th)</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-comment">// 解析TCP options</span><br>    tcp_parse_options(sock_net(sk), skb, &amp;tp-&gt;rx_opt, <span class="hljs-number">0</span>, &amp;foc);<br><span class="hljs-keyword">if</span> (tp-&gt;rx_opt.saw_tstamp &amp;&amp; tp-&gt;rx_opt.rcv_tsecr)<br>tp-&gt;rx_opt.rcv_tsecr -= tp-&gt;tsoffset;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>send_synack</code>的实际执行函数为<code>tcp_v4_send_synack</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// net/ipv4/tcp_ipv4.c</span><br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcp_request_sock_ops</span> <span class="hljs-title">tcp_request_sock_ipv4_ops</span> =</span> &#123;<br>.mss_clamp=TCP_MSS_DEFAULT,<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_TCP_MD5SIG</span><br>.req_md5_lookup=tcp_v4_md5_lookup,<br>.calc_md5_hash=tcp_v4_md5_hash_skb,<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>.init_req=tcp_v4_init_req,<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_SYN_COOKIES</span><br>.cookie_init_seq =cookie_v4_init_sequence,<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>.route_req=tcp_v4_route_req,<br>.init_seq=tcp_v4_init_seq,<br>.init_ts_off=tcp_v4_init_ts_off,<br>.send_synack=tcp_v4_send_synack,   <span class="hljs-comment">// syncak处理函数</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>构造 SYN-ACK包，并发出。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// net/ipv4/tcp_ipv4.c</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *Send a SYN-ACK after having received a SYN.</span><br><span class="hljs-comment"> *This still operates on a request_sock only, not on a big</span><br><span class="hljs-comment"> *socket.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tcp_v4_send_synack</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> sock *sk, <span class="hljs-keyword">struct</span> dst_entry *dst,</span><br><span class="hljs-params">      <span class="hljs-keyword">struct</span> flowi *fl,</span><br><span class="hljs-params">      <span class="hljs-keyword">struct</span> request_sock *req,</span><br><span class="hljs-params">      <span class="hljs-keyword">struct</span> tcp_fastopen_cookie *foc,</span><br><span class="hljs-params">      <span class="hljs-keyword">enum</span> tcp_synack_type synack_type,</span><br><span class="hljs-params">      <span class="hljs-keyword">struct</span> sk_buff *syn_skb)</span><br>&#123;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-comment">// 构造 SYN-ACK包</span><br>    skb = tcp_make_synack(sk, dst, req, foc, synack_type, syn_skb);<br>    <span class="hljs-comment">// ...</span><br>    err = ip_build_and_send_pkt(skb, sk, ireq-&gt;ir_loc_addr,<br>    ireq-&gt;ir_rmt_addr,<br>    rcu_dereference(ireq-&gt;ireq_opt),<br>    tos);<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-3-服务端accept（客户端-ACK的发出）"><a href="#1-3-服务端accept（客户端-ACK的发出）" class="headerlink" title="1.3 服务端accept（客户端 ACK的发出）"></a>1.3 服务端accept（客户端 ACK的发出）</h4><p>&#x3D;&#x3D;TODO&#x3D;&#x3D;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// net/ipv4/tcp_ipv4.c</span><br><span class="hljs-comment">/* The code following below sending ACKs in SYN-RECV and TIME-WAIT states</span><br><span class="hljs-comment">   outside socket context is ugly, certainly. What can I do?</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">tcp_v4_send_ack</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> sock *sk,</span><br><span class="hljs-params">    <span class="hljs-keyword">struct</span> sk_buff *skb, u32 seq, u32 ack,</span><br><span class="hljs-params">    u32 win, u32 tsval, u32 tsecr, <span class="hljs-type">int</span> oif,</span><br><span class="hljs-params">    <span class="hljs-keyword">struct</span> tcp_md5sig_key *key,</span><br><span class="hljs-params">    <span class="hljs-type">int</span> reply_flags, u8 tos)</span><br>&#123;<br></code></pre></td></tr></table></figure><h3 id="2-在wireshark中观测三次握手"><a href="#2-在wireshark中观测三次握手" class="headerlink" title="2. 在wireshark中观测三次握手"></a>2. 在wireshark中观测三次握手</h3><p><strong>客户端</strong>向<strong>服务端</strong>发起连接（第一次）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs bash">Transmission Control Protocol, Src Port: 49630, Dst Port: 19780, Seq: 0, Len: 0<br>    Source Port: 49630  <span class="hljs-comment"># 源端口 客户端</span><br>    Destination Port: 19780  <span class="hljs-comment"># 目标端口 服务端</span><br>    [Stream index: 4]<br>    [TCP Segment Len: 0]<br>    Sequence number: 0    (relative sequence number) <span class="hljs-comment"># 相对序列号</span><br>    Sequence number (raw): 3180787438   <span class="hljs-comment"># 序列号</span><br>    [Next sequence number: 1    (relative sequence number)]  <br>    Acknowledgment number: 0 <span class="hljs-comment"># 确认应答号</span><br>    Acknowledgment number (raw): 0<br>    1010 .... = Header Length: 40 bytes (10)<br>    Flags: 0x002 (SYN)<br>        000. .... .... = Reserved: Not <span class="hljs-built_in">set</span><br>        ...0 .... .... = Nonce: Not <span class="hljs-built_in">set</span><br>        .... 0... .... = Congestion Window Reduced (CWR): Not <span class="hljs-built_in">set</span><br>        .... .0.. .... = ECN-Echo: Not <span class="hljs-built_in">set</span><br>        .... ..0. .... = Urgent: Not <span class="hljs-built_in">set</span><br>        .... ...0 .... = Acknowledgment: Not <span class="hljs-built_in">set</span><br>        .... .... 0... = Push: Not <span class="hljs-built_in">set</span><br>        .... .... .0.. = Reset: Not <span class="hljs-built_in">set</span><br>        .... .... ..1. = Syn: Set    <span class="hljs-comment"># SYN = 1 即希望建立连接</span><br>        .... .... ...0 = Fin: Not <span class="hljs-built_in">set</span><br>        [TCP Flags: ··········S·]<br>    Window size value: 65495<br>    [Calculated window size: 65495]<br>    Checksum: 0xfe30 [unverified]<br>    [Checksum Status: Unverified]<br>    Urgent pointer: 0<br>    Options: (20 bytes), Maximum segment size, SACK permitted, Timestamps, No-Operation (NOP), Window scale<br>        TCP Option - Maximum segment size: 65495 bytes   <span class="hljs-comment"># 默认 MSS大小</span><br>        TCP Option - SACK permitted<br>        TCP Option - Timestamps: TSval 1728527822, TSecr 0   <span class="hljs-comment"># 记录 tcp timestamp</span><br>            Kind: Time Stamp Option (8)<br>            Length: 10<br>            Timestamp value: 1728527822<br>            Timestamp <span class="hljs-built_in">echo</span> reply: 0<br>        TCP Option - No-Operation (NOP)<br>        TCP Option - Window scale: 7 (multiply by 128)<br>            Kind: Window Scale (3)<br>            Length: 3<br>            Shift count: 7<br>            [Multiplier: 128]<br>    [Timestamps]<br>        [Time since first frame <span class="hljs-keyword">in</span> this TCP stream: 0.000000000 seconds]<br>        [Time since previous frame <span class="hljs-keyword">in</span> this TCP stream: 0.000000000 seconds]<br><br></code></pre></td></tr></table></figure><p><strong>服务端</strong>向<strong>客户端</strong>发送ACK（第二次）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs bash">Transmission Control Protocol, Src Port: 19780, Dst Port: 49630, Seq: 0, Ack: 1, Len: 0<br>    Source Port: 19780   <span class="hljs-comment"># 源端口 服务端</span><br>    Destination Port: 49630  <span class="hljs-comment"># 目标端口 客户端</span><br>    [Stream index: 4]<br>    [TCP Segment Len: 0]<br>    Sequence number: 0    (relative sequence number) <span class="hljs-comment"># 序列号</span><br>    Sequence number (raw): 1952202579  <br>    [Next sequence number: 1    (relative sequence number)]  <br>    Acknowledgment number: 1    (relative ack number) <span class="hljs-comment"># 确认应答号，0 + 1</span><br>    Acknowledgment number (raw): 3180787439<br>    1010 .... = Header Length: 40 bytes (10)<br>    Flags: 0x012 (SYN, ACK)<br>        000. .... .... = Reserved: Not <span class="hljs-built_in">set</span><br>        ...0 .... .... = Nonce: Not <span class="hljs-built_in">set</span><br>        .... 0... .... = Congestion Window Reduced (CWR): Not <span class="hljs-built_in">set</span><br>        .... .0.. .... = ECN-Echo: Not <span class="hljs-built_in">set</span><br>        .... ..0. .... = Urgent: Not <span class="hljs-built_in">set</span><br>        .... ...1 .... = Acknowledgment: Set     <span class="hljs-comment"># ack = 1</span><br>        .... .... 0... = Push: Not <span class="hljs-built_in">set</span><br>        .... .... .0.. = Reset: Not <span class="hljs-built_in">set</span><br>        .... .... ..1. = Syn: Set<span class="hljs-comment"># syn = 1</span><br>        .... .... ...0 = Fin: Not <span class="hljs-built_in">set</span><br>        [TCP Flags: ·······A··S·]<br>    Window size value: 65483<br>    [Calculated window size: 65483]<br>    Checksum: 0xfe30 [unverified]<br>    [Checksum Status: Unverified]<br>    Urgent pointer: 0<br>    Options: (20 bytes), Maximum segment size, SACK permitted, Timestamps, No-Operation (NOP), Window scale<br>        TCP Option - Maximum segment size: 65495 bytes<br>        TCP Option - SACK permitted<br>        <span class="hljs-comment"># tcp timestamp</span><br>        TCP Option - Timestamps: TSval 1728527822, TSecr 1728527822  <br>            Kind: Time Stamp Option (8)<br>            Length: 10<br>            Timestamp value: 1728527822<br>            Timestamp <span class="hljs-built_in">echo</span> reply: 1728527822<br>        TCP Option - No-Operation (NOP)<br>        TCP Option - Window scale: 7 (multiply by 128)<br>            Kind: Window Scale (3)<br>            Length: 3<br>            Shift count: 7<br>            [Multiplier: 128]<br>    [SEQ/ACK analysis]<br>        [This is an ACK to the segment <span class="hljs-keyword">in</span> frame: 9]<br>        [The RTT to ACK the segment was: 0.000037392 seconds]<br>        [iRTT: 0.000068221 seconds]<br>    [Timestamps]<br>        [Time since first frame <span class="hljs-keyword">in</span> this TCP stream: 0.000037392 seconds]<br>        [Time since previous frame <span class="hljs-keyword">in</span> this TCP stream: 0.000037392 seconds]<br><br></code></pre></td></tr></table></figure><p><strong>客户端</strong>响应<strong>服务端</strong>（第三次）</p><blockquote><p>第三次可携带数据</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs bash">Transmission Control Protocol, Src Port: 49630, Dst Port: 19780, Seq: 1, Ack: 1, Len: 0<br>    Source Port: 49630  <span class="hljs-comment"># 源端口，客户端</span><br>    Destination Port: 19780 <span class="hljs-comment"># 目标端口， 服务端</span><br>    [Stream index: 4]<br>    [TCP Segment Len: 0]<br>    Sequence number: 1    (relative sequence number)  <span class="hljs-comment"># 序列号</span><br>    Sequence number (raw): 3180787439<br>    [Next sequence number: 1    (relative sequence number)]<br>    Acknowledgment number: 1    (relative ack number)   <span class="hljs-comment"># 确认应答号</span><br>    Acknowledgment number (raw): 1952202580<br>    1000 .... = Header Length: 32 bytes (8)<br>    Flags: 0x010 (ACK)<br>        000. .... .... = Reserved: Not <span class="hljs-built_in">set</span><br>        ...0 .... .... = Nonce: Not <span class="hljs-built_in">set</span><br>        .... 0... .... = Congestion Window Reduced (CWR): Not <span class="hljs-built_in">set</span><br>        .... .0.. .... = ECN-Echo: Not <span class="hljs-built_in">set</span><br>        .... ..0. .... = Urgent: Not <span class="hljs-built_in">set</span><br>        .... ...1 .... = Acknowledgment: Set   <span class="hljs-comment"># ack = 1</span><br>        .... .... 0... = Push: Not <span class="hljs-built_in">set</span><br>        .... .... .0.. = Reset: Not <span class="hljs-built_in">set</span><br>        .... .... ..0. = Syn: Not <span class="hljs-built_in">set</span><br>        .... .... ...0 = Fin: Not <span class="hljs-built_in">set</span><br>        [TCP Flags: ·······A····]<br>    Window size value: 512<br>    [Calculated window size: 65536]<br>    [Window size scaling <span class="hljs-built_in">factor</span>: 128]<br>    Checksum: 0xfe28 [unverified]<br>    [Checksum Status: Unverified]<br>    Urgent pointer: 0<br>    Options: (12 bytes), No-Operation (NOP), No-Operation (NOP), Timestamps<br>        TCP Option - No-Operation (NOP)<br>        TCP Option - No-Operation (NOP)<br>        TCP Option - Timestamps: TSval 1728527822, TSecr 1728527822<br>            Kind: Time Stamp Option (8)<br>            Length: 10<br>            Timestamp value: 1728527822<br>            Timestamp <span class="hljs-built_in">echo</span> reply: 1728527822<br>    [SEQ/ACK analysis]<br>        [This is an ACK to the segment <span class="hljs-keyword">in</span> frame: 10]<br>        [The RTT to ACK the segment was: 0.000030829 seconds]<br>        [iRTT: 0.000068221 seconds]<br>    [Timestamps]<br>        [Time since first frame <span class="hljs-keyword">in</span> this TCP stream: 0.000068221 seconds]<br>        [Time since previous frame <span class="hljs-keyword">in</span> this TCP stream: 0.000030829 seconds]<br><br></code></pre></td></tr></table></figure><h3 id="3-参考文档"><a href="#3-参考文档" class="headerlink" title="3. 参考文档"></a>3. 参考文档</h3><ol><li><a href="https://zorrozou.github.io/docs/tcp/handshake/tcp_three_way_handshake.html">Linux的TCP实现之：三次握手</a></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>网络</tag>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NXP_S32G域控制器BSP入门</title>
    <link href="/2023/04/17/NXP-S32G%E5%9F%9F%E6%8E%A7%E5%88%B6%E5%99%A8BSP%E5%85%A5%E9%97%A8/"/>
    <url>/2023/04/17/NXP-S32G%E5%9F%9F%E6%8E%A7%E5%88%B6%E5%99%A8BSP%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="NXP-S32G-域控制器BSP入门"><a href="#NXP-S32G-域控制器BSP入门" class="headerlink" title="NXP S32G 域控制器BSP入门"></a>NXP S32G 域控制器BSP入门</h1><blockquote><p><strong>硬件型号： S32G274A-RDB2</strong></p><p>参考文档：S32G2_BSP29.0.0_HF1_User_Manual.pdf（官网下载）</p><p>撰写时间：2021-11</p></blockquote><h2 id="1-简述"><a href="#1-简述" class="headerlink" title="1. 简述"></a>1. 简述</h2><ul><li>Quad Arm ® Cortex ® -A53 内核采用 Arm Neon ™ 技术，组织成两个集群，每两个内核具有用于应用程序和服务的可选集群同步</li><li>用于实时应用的三重 Arm Cortex-M7 锁步内核</li><li>用于汽车网络加速的低延迟通信引擎 (LLCE)</li><li>用于以太网网络加速的数据包转发引擎 (PFE)</li><li>用于安全启动和加速安全服务的硬件安全引擎 (HSE)</li><li>用于 ASIL D 系统的高级功能安全硬件和软件</li><li>AEC-Q100 2 级设备：-40 °C 至 105 °C</li></ul><img src="https://www.nxp.com/assets/images/en/block-diagrams/S32G2-PROCESSORS-BD.svg" alt="S32G2处理器" style="zoom:50%;"><p><em>图1 S32G处理器规格</em></p><h2 id="2-启动"><a href="#2-启动" class="headerlink" title="2. 启动"></a>2. 启动</h2><h3 id="2-1-电源选择"><a href="#2-1-电源选择" class="headerlink" title="2.1 电源选择"></a>2.1 电源选择</h3><p>如图2所示，SW15为电源开关。当拨码开关位于左侧ON（ON1）时，开发板由J176口AC&#x2F;DC12V电源连接供电；当拨码开关位于右侧ON（ON2）时，开发板由J5口引脚2（12V）、引脚3（接地）连接供电。当拨码开关位于OFF时，开发板下电。</p><img src="/2023/04/17/NXP-S32G%E5%9F%9F%E6%8E%A7%E5%88%B6%E5%99%A8BSP%E5%85%A5%E9%97%A8/image-20230417155148137.png" class title="image-20230417155148137"><p><em>图2 S32G274A-RDB2 电源模式设置</em></p><h3 id="2-2-启动方式"><a href="#2-2-启动方式" class="headerlink" title="2.2 启动方式"></a>2.2 启动方式</h3><p>S32G274A-RDB2支持4种启动方式，分别为：</p><ul><li>SD卡启动</li><li>eMMC启动</li><li>NOR Flash启动</li><li>Serial 启动</li></ul><p>通过SD卡启动的开关设置如图3。</p><img src="/2023/04/17/NXP-S32G%E5%9F%9F%E6%8E%A7%E5%88%B6%E5%99%A8BSP%E5%85%A5%E9%97%A8/image-20230417155335638.png" class title="image-20230417155335638"><p><em>图3 通过 SD 启动的开关设置</em></p><h3 id="2-3-设置超级终端并登录"><a href="#2-3-设置超级终端并登录" class="headerlink" title="2.3 设置超级终端并登录"></a>2.3 设置超级终端并登录</h3><h4 id="2-3-1-开发板设置与连接"><a href="#2-3-1-开发板设置与连接" class="headerlink" title="2.3.1 开发板设置与连接"></a>2.3.1 开发板设置与连接</h4><p>图4为S32G274A-RDB2开发板的元件概貌图。</p><img src="/2023/04/17/NXP-S32G%E5%9F%9F%E6%8E%A7%E5%88%B6%E5%99%A8BSP%E5%85%A5%E9%97%A8/image-20230417155438297.png" alt="image-20230417155438297" style="zoom:80%;"><p><em>图4 S32G274A-RDB2开发板元件概貌</em></p><ul><li>将开关设置为SD卡启动方式，同时将SD卡插入卡槽。</li><li>通过UART0口连接开发板与PC机。</li><li>连接电源，打开开关。</li></ul><h4 id="2-3-2-Putty设置与登录"><a href="#2-3-2-Putty设置与登录" class="headerlink" title="2.3.2 Putty设置与登录"></a>2.3.2 Putty设置与登录</h4><p>使用Putty或其他方式登录开发板是为了可以看到开发板的打印信息，类似于ubuntu主机下的terminal一样；Putty登录的优点是：可以在没有调试网络端口的情况下登录；Putty登录的缺点是：界面中无法使用鼠标保存。</p><ul><li>确认设备权限</li></ul><p>通过<code>ls -al /dev/ttyUSB</code>查看设备号及权限。</p><p>通过<code>sudo chmod a+x /dev/ttyUSB0</code>打开执行权限。</p><img src="/2023/04/17/NXP-S32G%E5%9F%9F%E6%8E%A7%E5%88%B6%E5%99%A8BSP%E5%85%A5%E9%97%A8/image-20230417155618677.png" class title="image-20230417155618677"><p><em>图5 确认设备权限</em></p><ul><li>打开Putty进行如下设置</li></ul><img src="/2023/04/17/NXP-S32G%E5%9F%9F%E6%8E%A7%E5%88%B6%E5%99%A8BSP%E5%85%A5%E9%97%A8/image-20230417155706909.png" class title="image-20230417155706909"><p><em>图6 Putty登录设置</em></p><ul><li>登录连接</li></ul><p>在S32G274A-RDB2启动后，输入“root”登录。</p><img src="/2023/04/17/NXP-S32G%E5%9F%9F%E6%8E%A7%E5%88%B6%E5%99%A8BSP%E5%85%A5%E9%97%A8/image-20230417155717615.png" class title="image-20230417155717615"><p><em>图7 Putty登录连接</em></p><ul><li>退出登录</li></ul><p>在结束使用后，通过“Ctrl+d”或输入“<strong>exit</strong>”退出登录。</p><img src="/2023/04/17/NXP-S32G%E5%9F%9F%E6%8E%A7%E5%88%B6%E5%99%A8BSP%E5%85%A5%E9%97%A8/image-20230417155731508.png" class title="image-20230417155731508"><p><em>图8 Putty退出登录</em></p><p>注意：除上述Putty登录开发板方式外，还可通过其他方式登录。如图9可通过ssh登录开发板。</p><img src="/2023/04/17/NXP-S32G%E5%9F%9F%E6%8E%A7%E5%88%B6%E5%99%A8BSP%E5%85%A5%E9%97%A8/image-20230417155747178.png" class title="image-20230417155747178"><p><em>图9 通过SSH登录开发板</em></p><h2 id="3-构建Linux-BSP"><a href="#3-构建Linux-BSP" class="headerlink" title="3. 构建Linux BSP"></a>3. 构建Linux BSP</h2><h3 id="3-1-构建原因"><a href="#3-1-构建原因" class="headerlink" title="3.1 构建原因"></a>3.1 构建原因</h3><p>Linux BSP包含了uboot，kernel等内容，其中的也包含了设备的驱动。</p><p>构建Linux BSP的原因如下：</p><ul><li><p><strong>原厂驱动不完善，影响开发板上一些设备的使用。</strong>在开发板发布的初期，存在一种普遍的情况是：原厂提供的BSP仅能驱动开发板上一部分设备，有一些设备（网口等）的驱动部分不包含在原厂的BSP中。如果开发人员不能自己构建BSP驱动设备的话会导致开发板上部分设备无法使用，影响项目中的功能开发。</p></li><li><p><strong>开发时需要对部分设备进行自定义设定。</strong>有时需要对部分设备的驱动做更改以适应项目开发需求。</p></li><li><p><strong>BSP版本需要自己更新。</strong>存在部分情况是更新的BSP会解决上一版本BSP出现的问题，此时需要更新BSP中uboot，kernel版本（可单独更新uboot或kernel）。不过这里需要注意保持版本间互相匹配（uboot与kernel版本），BSP与开发板互相匹配。</p></li></ul><h3 id="3-2-构建方式"><a href="#3-2-构建方式" class="headerlink" title="3.2 构建方式"></a>3.2 构建方式</h3><p>可通过YOCTO或者交叉编译工具链两种方式构建Linux BSP。</p><blockquote><p>请参见“S32G2_BSP29.0.0_HF1_User_Manual.pdf”中P7-P9中“2.1 Building the Linux BSP using YOCTO”内容。</p></blockquote><h4 id="3-2-1-通过YOCTO构建Linux-BSP"><a href="#3-2-1-通过YOCTO构建Linux-BSP" class="headerlink" title="3.2.1 通过YOCTO构建Linux BSP"></a>3.2.1 通过YOCTO构建Linux BSP</h4><p>步骤</p><ul><li>构建默认YOCTO</li></ul><p>首先更新包管理器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo &lt;pkg-mgr&gt; update<br></code></pre></td></tr></table></figure><p>其次安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># python 2.x - 2.6或更高版本：</span><br>sudo &lt;pkg-mgr&gt; install python<br><span class="hljs-comment"># git 1.8.3或更高版本：</span><br>sudo &lt;pkg-mgr&gt; install git<br><span class="hljs-comment">#curl：</span><br>sudo &lt;pkg-mgr&gt; install curl<br><br><span class="hljs-comment"># 注：其中&lt;pkg-mgr&gt;是系统的包管理器（Debian/Ubuntu：apt-get或apt；CentOS/Fedora：yum或dnf；Suse：zypper）。</span><br></code></pre></td></tr></table></figure><p>接着，安装repo，命令如下(仅需操作一次)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> ~/bin<br>curl http://commondatastorage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo<br><span class="hljs-built_in">chmod</span> a+x ~/bin/repo<br>PATH=<span class="hljs-variable">$&#123;PATH&#125;</span>:~/bin<br></code></pre></td></tr></table></figure><p>配置git环境，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.email <span class="hljs-string">&quot;you@example.com&quot;</span><br>git config --global user.name <span class="hljs-string">&quot;Your Name&quot;</span><br></code></pre></td></tr></table></figure><p>最后下载YOCTO环境至编译路径，以下以fsl-auto-yocto-bsp为例，实际可配置base，auto以及ubuntu等多种BSP。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> fsl-auto-yocto-bsp<br><span class="hljs-built_in">cd</span> fsl-auto-yocto-bsp<br>repo init -u https://source.codeaurora.org/external/autobsps32/auto_yocto_bsp -b hotfix/bsp29.0.hf1<br>repo <span class="hljs-built_in">sync</span><br></code></pre></td></tr></table></figure><p>注：Yocto 构建需要至少50GB的可用空间并需要大量时间（2到10小时，取决于系统配置）。建议使用多核和快速存储介质的强大系统（推荐使用SSD）。 推荐的RAM大小为8GB。</p><ul><li>BSP的YOCTO构建</li></ul><p>BSP的YOCTO构建分为三步：</p><ol><li>首次设置（需要有权限在不输入密码的情况下执行 <code>sudo apt-get &lt;cmd&gt;</code>）。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./sources/meta-alb/scripts/host-prepare.sh<br></code></pre></td></tr></table></figure><ol start="2"><li>创建构建目录并测试安装。在 SDK 根目录中创建一个构建目录。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> nxp-setup-alb.sh -m &lt;machine&gt;<br></code></pre></td></tr></table></figure><ol start="3"><li>运用bitbake指令编译</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bitbake &lt;imagename&gt;<br></code></pre></td></tr></table></figure><p>注：其中的<code>&lt;machine&gt;</code>即为s32g274ardb2；<code>&lt;imagename&gt;</code>可选择fsl-image-base，或fsl-image-auto；编译生成的结果放置于路径：<code>fsl-auto-yocto-bsp/build_s32g274ardb2/tmp/deploy/images/s32g274ardb2</code>，如图10所示。</p><img src="/2023/04/17/NXP-S32G%E5%9F%9F%E6%8E%A7%E5%88%B6%E5%99%A8BSP%E5%85%A5%E9%97%A8/image-20230417160214352.png" class title="image-20230417160214352"><p><em>图10 YOCTO 构建 BSP 路径内容</em></p><ul><li>注意事项</li></ul><p>将repo更换为国内源，使用以下命令即设置清华源。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> | grep REPO_URL <span class="hljs-built_in">declare</span> -x REPO_URL=<span class="hljs-string">&quot;https://mirrors.tuna.tsinghua.edu.cn/git/git-repo/&quot;</span><br></code></pre></td></tr></table></figure><p>设置主机中<code>/etc/sudoers</code> 文档， 使 <code>sudo apt-get &lt;cmd&gt;</code>时， 不需要输入密码。 修改方式如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">fzy ALL=NOPASSWD: /usr/bin/apt-get<br></code></pre></td></tr></table></figure><h4 id="3-2-2-基于交叉编译工具链构建Linux-BSP"><a href="#3-2-2-基于交叉编译工具链构建Linux-BSP" class="headerlink" title="3.2.2 基于交叉编译工具链构建Linux BSP"></a>3.2.2 基于交叉编译工具链构建Linux BSP</h4><table><thead><tr><th>说明</th><th>版本</th></tr></thead><tbody><tr><td>host PC</td><td>Ubuntu-18.04 LTS</td></tr><tr><td>Uboot 源码</td><td>bsp29.0.hf1-2020.04</td></tr><tr><td>Kernel 源码</td><td>bsp29.0.hf1-5.4-rt</td></tr><tr><td>交叉编译工具链</td><td>gcc-arm-10.2-2020.11-x86_64-aarch64-none-linuxgnu</td></tr></tbody></table><p><a href="https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-a/downloads">交叉编译工具链下载地址</a></p><ul><li>选择uboot</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 网站失效啦？？</span><br>git <span class="hljs-built_in">clone</span> https://source.codeaurora.org/external/autobsps32/u-boot<br><span class="hljs-built_in">cd</span> u-boot<br>git branch<br>git checkout -b &lt;branch_name&gt;<br>git branch<br></code></pre></td></tr></table></figure><p>在通过 <code>git clone </code>获取 uboot 后， 通过<code> git branch -a</code> 指令查看所有分支； 之后可通过 <code>git checkout -b </code>指令切换至<code>remotes/origin/hotfix/bsp29.0.hf1-2020.04</code> 分支， 最后通过 <code>git branch</code> 指令查看当前分支 。</p><ul><li>构建uboot</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">make CROSS_COMPILE=/path/to/your/toolchain/dir/bin/aarch64-linux-gnu- &lt;board&gt;_defconfig<br>make CROSS_COMPILE=/path/to/your/toolchain/dir/bin/aarch64-linux-gnu-<br></code></pre></td></tr></table></figure><p>可以通过查看uboot文件夹中config内信息，如图11所示。针对<code>S32G274ARDB2</code>来说，<code>defconfig</code>为<code>s32g274ardb2_defconfig</code>。</p><img src="/2023/04/17/NXP-S32G%E5%9F%9F%E6%8E%A7%E5%88%B6%E5%99%A8BSP%E5%85%A5%E9%97%A8/image-20230417163243755.png" class title="image-20230417163243755"><p><em>图11 通过uboot中config查看deconfig版本</em></p><p>生成文档为可执行文件u-boot：</p><p>生成可执行文件u-boot的路径为<code>~/S32G_LinuxBSP/u-boot</code>，可通过<code>ls</code>命令查看，如图13所示。</p><img src="/2023/04/17/NXP-S32G%E5%9F%9F%E6%8E%A7%E5%88%B6%E5%99%A8BSP%E5%85%A5%E9%97%A8/image-20230417163335387.png" class title="image-20230417163335387"><p><em>图13 使用ls命令查看生成的uboot文件</em></p><ul><li>编译内核</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 获取源码</span><br>git <span class="hljs-built_in">clone</span> https://source.codeaurora.org/external/autobsps32/linux<br><span class="hljs-built_in">cd</span> linux<br>git checkout -b &lt;branch_name&gt; hotfix/bsp29.0.hf1-5.4-rt<br><span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p>同样，在通过<code>git clone</code>获取uboot后，通过<code>git branch -a</code>指令查看所有分支；之后可通过<code>git checkout -b</code>指令切换至<code>remotes/origin/hotfix/bsp29.0.hf1-5.4-rt</code>分支，最后通过<code>git branch</code>指令查看当前分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">make ARCH=arm64 CROSS_COMPILE=/path/to/your/toolchain/dir/bin/aarch64-linux-gnu- &lt;soc_name&gt;_defconfig<br>make ARCH=arm64 CROSS_COMPILE=/path/to/your/toolchain/dir/bin/aarch64-linux-gnu-<br></code></pre></td></tr></table></figure><p>对于S32G274ARDB2开发板defconfig为<code>s32gen1_defconfig</code>。</p><p>生成文档及位置：</p><table><thead><tr><th>文档名称</th><th>路径</th></tr></thead><tbody><tr><td>Image</td><td>arch&#x2F;arm64&#x2F;boot&#x2F;Image</td></tr><tr><td>fsl-s32g274a-evb.dtb</td><td>arch&#x2F;arm64&#x2F;boot&#x2F;dts&#x2F;freescale&#x2F;fsl-s32g274a-evb.dtb</td></tr></tbody></table><ul><li>构建ARM可信固件（the ARM Trusted Firmware）</li></ul><blockquote><p>内容详见“S32G2_BSP29.0.0_HF1_User_Manual.pdf”中“2.2.4 Building the ARM Trusted Firmware”内容。</p></blockquote><h2 id="4-SD卡烧写"><a href="#4-SD卡烧写" class="headerlink" title="4. SD卡烧写"></a>4. SD卡烧写</h2><p>为启动S32G274A-RDB2开发板，需准备一张SD4或SD10（这里的数字指SD卡读写速度）。</p><h3 id="4-1-YOCTO方式"><a href="#4-1-YOCTO方式" class="headerlink" title="4.1 YOCTO方式"></a>4.1 YOCTO方式</h3><p>在成功构建Yocto后，会生成格式为<code>.sdcard</code>的文件。该<code>.sdcard</code>文件创建了一个包含有必要分区、bootloader、kernel以及根文件系统的镜像文件。</p><p>通过如下命令烧写Image文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=./fsl-image-auto-s32g274ardb2.sdcard of=<span class="hljs-variable">$&#123;DEVSD&#125;</span> bs=1M &amp;&amp; <span class="hljs-built_in">sync</span><br></code></pre></td></tr></table></figure><p>注意：烧写会覆盖SD卡中原分区与数据，请确保烧写前SD卡已做好相应备份。</p><p>其中，<code>&#123;DEVSD&#125;</code>指<code>SD/MMC</code>卡的设备节点，可通过指令<code>cat /proc/partitions</code>查看，通常为<code>/dev/sda</code>；若通过<code>bitbake fsl-image-base</code>编译镜像，则需替换对应的<code>.sdcard</code>镜像文件。烧写完成后，如图14所示。</p><img src="/2023/04/17/NXP-S32G%E5%9F%9F%E6%8E%A7%E5%88%B6%E5%99%A8BSP%E5%85%A5%E9%97%A8/image-20230417163948738.png" class title="image-20230417163948738"><p><em>图14 使用dd命令烧写SD卡</em></p><h3 id="4-2-交叉编译工具链方式"><a href="#4-2-交叉编译工具链方式" class="headerlink" title="4.2 交叉编译工具链方式"></a>4.2 交叉编译工具链方式</h3><p>基于交叉编译工具链烧写SD卡主要分为两步骤：</p><ul><li>对SD卡分区</li><li>烧写bootloader, kernel以及根文件系统</li></ul><h4 id="4-2-1-交叉编译工具链烧写前准备"><a href="#4-2-1-交叉编译工具链烧写前准备" class="headerlink" title="4.2.1 交叉编译工具链烧写前准备"></a>4.2.1 交叉编译工具链烧写前准备</h4><p>首先，将SD卡通过读卡器插入PC机；</p><p>其次，通过图15所示的命令行找到SD读卡器在Linux主机上的设备号。假设SD卡存储空间为4G，则图3.2中SD读卡器被标记为<code>/dev/sdb</code>。</p><p>设置<code>export DEVSD=/dev/sdb</code>。</p><img src="/2023/04/17/NXP-S32G%E5%9F%9F%E6%8E%A7%E5%88%B6%E5%99%A8BSP%E5%85%A5%E9%97%A8/image-20230417164054715.png" class title="image-20230417164054715"><p><em>图15 通过命令行查看设备号举例</em></p><p><strong>注意：</strong>请务必于烧写前确认SD卡的正确的设备号，否则有可能在烧写过程中损坏其他设备或数据！</p><h4 id="4-2-2-交叉编译工具链—SD卡的烧写"><a href="#4-2-2-交叉编译工具链—SD卡的烧写" class="headerlink" title="4.2.2 交叉编译工具链—SD卡的烧写"></a>4.2.2 交叉编译工具链—SD卡的烧写</h4><p>由BSP二进制文件烧写SD卡分为两个步骤：</p><p>首先，需要对SD卡分区；</p><p>将SD卡分为主要两个区：</p><ul><li><p>boot：放置kernel，设备树；</p></li><li><p>rootfs：放置根文件系统。</p></li></ul><p>具体步骤如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo fdisk <span class="hljs-variable">$&#123;DEVSD&#125;</span><br>d [repeat this until no partition is reported by the <span class="hljs-string">&#x27;p&#x27;</span> <span class="hljs-built_in">command</span>]<br>n [create a new partition]<br>p [create a primary partition]<br>1 [the first partition]<br>8192 [create a partition that starts at offset 8192; this leaves 4MB of unpartitioned space <span class="hljs-keyword">for</span> the bootloader]<br>+255M [size of the actual partition = 255 MB]<br>[It may be that fdisk detects a previous filesystem signature and asks <span class="hljs-keyword">for</span> confirmation of erase: <span class="hljs-string">&quot;Partition #1 contains a vfat signature. Do you want to remove the signature?</span><br><span class="hljs-string">[Y]es/[N]o:&quot;</span>. Answer Y <span class="hljs-keyword">in</span> this <span class="hljs-keyword">case</span>.]<br>p [list the parameters of the previously created partition, look at the number of the End sector: 530431]<br>n [create a new partition]<br>p [create a primary partition]<br>2 [the second partition]<br>530432 [Start sector of the new partition; partition will be adjacent to the previous one]<br>&lt;enter&gt;[using the default value will create a partition that uses the remaining space on the card]<br>t [<span class="hljs-built_in">set</span> partition <span class="hljs-built_in">type</span>]<br>1 [partition <span class="hljs-comment">#1]</span><br>c [FAT32]<br>t [<span class="hljs-built_in">set</span> partition <span class="hljs-built_in">type</span>]<br>2 [partition <span class="hljs-comment">#2]</span><br>83 [Linux]<br>w [ this writes the partition table to the medium and fdisk exits]<br>sudo mkfs.vfat -n boot <span class="hljs-variable">$&#123;DEVSD&#125;</span>1<br>sudo mkfs.ext3 -L rootfs <span class="hljs-variable">$&#123;DEVSD&#125;</span>2<br></code></pre></td></tr></table></figure><p>分区完成后，重新插入SD卡至主机，即可看到两个分区（boot，rootfs）。同时需要再次使用</p><p><code>cat /proc/partitions</code>确定设备号。</p><p>其次，烧写&#x2F;复制文件至相应分区。</p><p>按照如下指令将相应文件烧写&#x2F;复制至对应分区：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> SD_MOUNT_POINT=/media/public<br><span class="hljs-built_in">cd</span> &lt;builddirectory&gt;/tmp/deploy/images/&lt;board_name&gt;<br>sudo <span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=u-boot-s32g274ardb2.s32 of=<span class="hljs-variable">$&#123;DEVSD&#125;</span> conv=notrunc bs=256 count=1 seek=0<br>sudo <span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=u-boot-s32g274ardb2.s32 of=<span class="hljs-variable">$&#123;DEVSD&#125;</span> conv=notrunc bs=512 seek=1 skip=1<br>sudo <span class="hljs-built_in">cp</span> Image <span class="hljs-variable">$&#123;SD_MOUNT_POINT&#125;</span>/boot/<br>sudo <span class="hljs-built_in">cp</span> &lt;dtb_file&gt; <span class="hljs-variable">$&#123;SD_MOUNT_POINT&#125;</span>/boot/&lt;dtb_file&gt;<br>sudo tar xf &lt;rootfs&gt; -C <span class="hljs-variable">$&#123;SD_MOUNT_POINT&#125;</span>/rootfs<br><span class="hljs-built_in">sync</span><br></code></pre></td></tr></table></figure><p>其中，</p><p>DEVSD指SD读卡器的设备号，如<code>/dev/sdb</code>；</p><p>SD_MOUNT_POINT指SD卡挂载的点，如<code>/media/public</code>；</p><p>Image为镜像，如<code>&lt;linux src&gt;/arch/arm64/boot/Image</code>；</p><p><dtb_file>指格式为<code>.dtb</code>的设备树文件，如<code>&lt;linux src&gt;/arch/arm64/boot/dts/freescale/fsl-s32g274a-rdb2.dtb</code>；</dtb_file></p><p><code>&lt;rootfs&gt;</code>指根文件系统文件夹。</p><p>在实践过程中，通过第二种方式，即“由BSP二进制文件烧写SD卡”，会缺少部分firmware支持，导致pfe0，pfe2口不可见；因此，推荐使用方式1所述，通过“.sdcard”烧写SD卡，版本为binaries_auto_linux_bsp29.0.hf1_s32g274_pfe，Linux版本为Ubuntu-20.04 LTS。</p><h2 id="5-以太网设置与使用说明"><a href="#5-以太网设置与使用说明" class="headerlink" title="5. 以太网设置与使用说明"></a>5. 以太网设置与使用说明</h2><h3 id="5-1-以太网接口"><a href="#5-1-以太网接口" class="headerlink" title="5.1 以太网接口"></a>5.1 以太网接口</h3><p>S32G274ARDB2中以太网接口如图16，图17所示，目前P5口无软件支持。</p><img src="/2023/04/17/NXP-S32G%E5%9F%9F%E6%8E%A7%E5%88%B6%E5%99%A8BSP%E5%85%A5%E9%97%A8/image-20230417164251650.png" alt="image-20230417164251650" style="zoom: 50%;"><p><em>图16 以太网接口</em></p><h3 id="5-2-S32G274ARDB2以太网连接"><a href="#5-2-S32G274ARDB2以太网连接" class="headerlink" title="5.2 S32G274ARDB2以太网连接"></a>5.2 S32G274ARDB2以太网连接</h3><h4 id="5-2-1-uboot配置"><a href="#5-2-1-uboot配置" class="headerlink" title="5.2.1 uboot配置"></a>5.2.1 uboot配置</h4><p>首先需要通过在uboot中设置hwconfig值。hwconfig设置项如下。</p><img src="/2023/04/17/NXP-S32G%E5%9F%9F%E6%8E%A7%E5%88%B6%E5%99%A8BSP%E5%85%A5%E9%97%A8/image-20230417171709771.png" class title="image-20230417171709771"><p>对于S32G274A RDB2开发板，以<code>PCIeX2 serdes0; EMAC0 1G</code> 在<code>serdes1 lane0, EMAC0 1G </code>在 <code>serdes1 lane1</code>这种方式工作时，可在uboot中做如下设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">setenv hwconfig <span class="hljs-string">&quot;pcie0: mode=pcie, clock=ext; pcie1: mode=sgmii, clock=int, fmhz=125, xpcs_mode=both&quot;</span><br></code></pre></td></tr></table></figure><img src="/2023/04/17/NXP-S32G%E5%9F%9F%E6%8E%A7%E5%88%B6%E5%99%A8BSP%E5%85%A5%E9%97%A8/image-20230417171136287.png" alt="image-20230417171136287" style="zoom:67%;"><p><em>图17 S32G-VNP-RDB2以太网接口图示</em></p><p>在完成设置后，可以通过<code>printenv hwconfig</code>查看设置后的值，如图18所示。</p><img src="/2023/04/17/NXP-S32G%E5%9F%9F%E6%8E%A7%E5%88%B6%E5%99%A8BSP%E5%85%A5%E9%97%A8/image-20230417171852866.png" class title="image-20230417171852866"><p><em>图18 在uboot中设置并查看hwconfig</em></p><h4 id="5-2-2-Linux-kernel配置"><a href="#5-2-2-Linux-kernel配置" class="headerlink" title="5.2.2 Linux kernel配置"></a>5.2.2 Linux kernel配置</h4><p>根据NXP文档所述，Linux SerDes 驱动程序根据设备树重新配置 SerDes。 设备树从 u-boot 自动更新以对应 hwconfig 变量。</p><h4 id="5-2-3-连接"><a href="#5-2-3-连接" class="headerlink" title="5.2.3 连接"></a>5.2.3 连接</h4><ul><li>设置S32G274ARDB2的IP地址</li></ul><p>以下是具体步骤：</p><ol><li>关闭DHCP服务</li></ol><p>通过vi修改文件<code>/etc/network/interfaces</code>，将eth0，pfe0，pfe2的配置中“dhcp”修改为“static”，如图19所示。</p><img src="/2023/04/17/NXP-S32G%E5%9F%9F%E6%8E%A7%E5%88%B6%E5%99%A8BSP%E5%85%A5%E9%97%A8/image-20230417172021347.png" class title="image-20230417172021347"><p><em>图19 关闭S32G274ARDB2的DHCP服务</em></p><ol start="2"><li>为网卡设置不同的IP网段地址</li></ol><img src="/2023/04/17/NXP-S32G%E5%9F%9F%E6%8E%A7%E5%88%B6%E5%99%A8BSP%E5%85%A5%E9%97%A8/image-20230417172045785.png" class title="image-20230417172045785"><p><em>图20 通过ifconfig命令查看网口信息</em></p><p>为确保个网口正常使用，需将eth0，pfe0，pfe2三个网卡分别设置为不同网段（将三个网卡设置为同一网段下不同地址时会导致某一个或两个网卡无法正常ping通主机，原因待排查）。</p><p>可以采用如图19所示，通过修改<code>/etc/network/interfaces</code>文档中网口地址，掩码等内容，设置三个网口的IP地址；或者可以通过<code>ifconfig+网卡名称+IP地址</code>命令，依次修改上述三个网卡的IP地址（临时）。</p><p>在修改后，首先通过s<code>ervice network stop</code>, <code>service network start</code>重启网络，使interfaces文件生效；接着，通过<code>ifconfig</code>命令查看是否设置成功，如图20所示。</p><h4 id="5-2-4-测试"><a href="#5-2-4-测试" class="headerlink" title="5.2.4 测试"></a>5.2.4 测试</h4><p>通过5.2.3所述方法，将主机IP地址与相连网卡的IP地址设置在同一网段，举例如下。</p><table><thead><tr><th>网卡</th><th>IP地址</th></tr></thead><tbody><tr><td>S32G274A 网卡： eth0</td><td>192.168.90.90</td></tr><tr><td>主机网卡：</td><td>192.168.90.10</td></tr></tbody></table><p>接着， 通过 Ping 命令测试能否连通， 如图21所示；</p><img src="/2023/04/17/NXP-S32G%E5%9F%9F%E6%8E%A7%E5%88%B6%E5%99%A8BSP%E5%85%A5%E9%97%A8/image-20230417172431495.png" class title="image-20230417172431495"><p><em>图21 通过PING连接S32G与主机</em></p><h2 id="6-问题及解决方案"><a href="#6-问题及解决方案" class="headerlink" title="6. 问题及解决方案"></a>6. 问题及解决方案</h2><ul><li><strong>使用 putty 登录时发现无法登录或打开 putty 后无任何打印信息</strong></li></ul><p>问题分析：<br>在打开 Putty 前没有打开 USB 口的可执行权限（ “x”），同时也没有用 root账户打开 putty。 在这两种情况下， 可能会由于没有权限导致上述问题的发生。<br>解决方法：<br>按照 2.3.2 的步骤打开并登录 Putty。<br>具体可分为： 1） 打开 USB 端口权限； 2） 以 ROOT 账户打开 Putty。</p><ul><li><strong>构建 Linux BSP， SD 卡烧写的问题与解决方法</strong></li></ul><p>使用主机烧写 SD 卡后， 将 SD 卡插入开发板并打开电源。 但是启动过程中，u-boot 无法引导 kernel， 开发板启动失败。<br>问题分析：<br>启动失败后打印的信息为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">Retry time exceeded; starting again<br>Bad linux ARM64 Image magic!<br></code></pre></td></tr></table></figure><p>打印的信息可以分析出是烧写入 SD 卡的镜像有问题，因此使用官方提供的镜像烧写（ 确保镜像没有问题） 再次尝试使用 dd 命令烧写。 启动后同样报错。 接着考虑烧写时出错， 排查后发现是因为烧写时忽略了 SD 卡分区导致kernel 所在分区没有 uboot。 修改烧写命令后成功启动。<br>解决方法：<br>将编译得到的 uboot 镜像使用 dd 命令烧写进 SD 卡的两个分区内，需要分别设置参数 seek&#x3D;0, seek&#x3D;1。即，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=u-boot.s32 of=<span class="hljs-variable">$&#123;DEVSD&#125;</span> conv=notrunc bs=256 count=1 seek=0<br>sudo <span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=u-boot.s32 of=<span class="hljs-variable">$&#123;DEVSD&#125;</span> conv=notrunc bs=512 seek=1 skip=1<br></code></pre></td></tr></table></figure><p>● <strong>在使用 SD 卡启动开发板的过程中， 偶尔会出现 kernel 无法挂载 rootfs 的情况</strong><br>问题分析：<br>通过 kenerl 打印的错误信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Kernel panic – not syncing: VFS: Unable to mount root fs on unkown-block(179,2)<br></code></pre></td></tr></table></figure><p>可以看到报错信息中显示在未知块上无法挂载 rootfs。接着在 uboot 中尝试找 rootfs 的地址查看当中的值， 因无法挂载 rootfs所在分区而无法查看；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">=&gt; fatinfo mmc 0:2<br>** Unable to use mmc 0:2 <span class="hljs-keyword">for</span> fatinfo **<br></code></pre></td></tr></table></figure><p>最后将 SD 卡放置于主机手动挂载， 显示挂载失败。<br>解决方法：<br>SD 卡硬件本身某一个块在烧写时出了问题， 导致 SD 卡该分区不可挂载。可以在出现这个问题后重新格式化 SD 卡，重新分区烧写，即可解决该问题。</p>]]></content>
    
    
    
    <tags>
      
      <tag>合作</tag>
      
      <tag>ARM64</tag>
      
      <tag>智能网联汽车</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SOMEIP协议理解</title>
    <link href="/2023/04/17/SOMEIP%E5%8D%8F%E8%AE%AE%E7%90%86%E8%A7%A3/"/>
    <url>/2023/04/17/SOMEIP%E5%8D%8F%E8%AE%AE%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="SOME-x2F-IP协议理解"><a href="#SOME-x2F-IP协议理解" class="headerlink" title="SOME&#x2F;IP协议理解"></a>SOME&#x2F;IP协议理解</h2><blockquote><p>参考文献：</p><ol><li><a href="https://some-ip.com/standards.shtml">AUTOSAR_PRS_SOMEIPProtocol</a></li><li>AUTOSAR_PRS_SOMEIPServiceDiscoveryProtocol</li></ol><hr><p>非官方：</p><p><a href="https://blog.csdn.net/AgingMoon/article/details/104166715#t12">关于SOME&#x2F;IP的理解</a></p><p><a href="https://blog.csdn.net/xllhd100s/article/details/112171880">SOME&#x2F;IP 协议介绍</a></p><p><a href="https://blog.csdn.net/xllhd100s/article/details/112309194?spm=1001.2014.3001.5502">SOME&#x2F;IP-SD 深入浅出</a></p></blockquote><h3 id="1-SOME-x2F-IP"><a href="#1-SOME-x2F-IP" class="headerlink" title="1. SOME&#x2F;IP"></a>1. SOME&#x2F;IP</h3><p>报文：</p><p><img src="https://raw.githubusercontent.com/ziyangfu/my-image-hosting/master/someip_procotol_header.4sjip61cms60.webp" alt="someip_procotol_header"></p><p>message ID</p><ul><li><p>唯一标识消息，**method &#x2F; event **</p></li><li><p>消息类型为 method</p><ul><li>service ID + method ID</li></ul></li><li><p>消息类型为 event</p><ul><li>service ID + event ID</li></ul></li></ul><p>length</p><ul><li>用于识别 SOME&#x2F;IP消息的结束</li></ul><p>request ID</p><ul><li>Client ID + Session ID</li><li>Client ID 唯一标识客户端，client ID 仅 client 需要定义，服务端根据 client ID 区分不同客户端对同一方法的调用</li><li>Session ID ，区分同一发送者的消息顺序，最大值 0xFFFF， 0x01 - 0xFFFF 循环</li></ul><p>message type</p><ul><li>标识消息的类型（5 + 5 种）<ul><li>request &#x2F; request_no_return &#x2F; notification &#x2F; response &#x2F; error</li><li>TP-request &#x2F; TP-request_no_return &#x2F; TP-notification &#x2F; TP-response &#x2F; TP-error</li></ul></li></ul><img src="https://raw.githubusercontent.com/ziyangfu/my-image-hosting/master/someip_header_messagetype_01.6dsgwgmvkbk0.webp" alt="someip_header_messagetype_01" style="zoom:80%;"><img src="https://raw.githubusercontent.com/ziyangfu/my-image-hosting/master/someip_header_messagetype_02.3iefjfz4l0g0.webp" alt="someip_header_messagetype_02" style="zoom:80%;"><p>return type</p><img src="https://raw.githubusercontent.com/ziyangfu/my-image-hosting/master/someip_procotol_header_returntype.1q44tak2wsm8.webp" alt="someip_procotol_header_returntype" style="zoom:80%;"><ul><li>标识请求是否成功处理</li><li>一般为 E_OK</li></ul><p>payload</p><ul><li>UDP (0 - 1400 byte)</li><li>TCP (无限制)</li></ul><blockquote><p>直接确定：service ID、method ID、client ID、message type、interface Version &#x3D;&#x3D; 0x01(由用户定义)</p><p>间接确定：return type、length</p><p>存在默认值：protocol version &#x3D;&#x3D; 0x01,</p></blockquote><p>序列化</p><ul><li>必须内存对齐</li><li>结构体深度优先搜索</li><li>基本数据类型</li></ul><img src="https://raw.githubusercontent.com/ziyangfu/my-image-hosting/master/DeepinScreenshot_select-area_20220125145220.5fbbwm03utg0.webp" alt="DeepinScreenshot_select-area_20220125145220" style="zoom:67%;"><p>关于 service instance</p><ol><li>同一个service的service-instance 通过不同的 instance ID 标识</li><li>正常来说，不同服务的多个 service-instance 共享传输层协议的同一端口，不过，单ECU上同一服务的多个service-instance使用每个服务实例的不同端口，原因是 instance ID用于服务发现，但他们不包含在 SOME&#x2F;IP header 中</li></ol><p>request&#x2F;response 通信</p><ul><li>客户端：<ul><li>构建有效载荷</li><li>设置message ID 和 request ID</li><li>length &#x3D; 8 byte ？？</li><li>设置协议版本，接口版本</li><li>message type &#x3D; 0x00（request）</li><li>return type &#x3D; 0x00</li></ul></li><li>服务端：<ul><li>构建有效负载</li><li>接管客户端请求中的 request ID</li><li>message type &#x3D; 0x80 (response) or 0x81(error)</li><li>return type</li></ul></li></ul><p> Notification Events</p><ul><li>SOMEIP负责传输，发布订阅机制由SOMEIP-SD实现</li><li>服务端：<ul><li>根据服务端发送时间设置 message ID</li><li>message type &#x3D; 0x02 (notification)</li><li>return type &#x3D; 0x00 (E_OK)</li></ul></li><li>策略<ul><li>以固定时间间隔发送数据</li><li>一旦某值改变即发送数据</li><li>当连续发送的某序列值之间差异大于阈值时发送数据</li></ul></li></ul><p>Fields</p><ul><li>getter (读取访问，method)、setter (写访问，method)、notification event (event)</li></ul><p>协议选择指南</p><ul><li>传输数据块 &gt; 1400 byte，并且出错时<strong>没有</strong>硬延迟要求，使用TCP</li><li>传输数据块 &gt; 1400 byte，并且出错时<strong>有</strong>硬延迟要求，使用UDP+SOMEIP-TP</li><li>数据延迟要求 &lt; 100 ms，使用UDP</li></ul><h3 id="2-SOME-x2F-IP-SD"><a href="#2-SOME-x2F-IP-SD" class="headerlink" title="2. SOME&#x2F;IP-SD"></a>2. SOME&#x2F;IP-SD</h3><p>描述</p><ul><li>首要问题：服务实例的状态</li><li>次要问题：服务的位置（IP地址、传输协议以及端口号）</li></ul><p>功能</p><ul><li>定位服务实例</li><li>检测服务实例是否运行</li><li>实现发布&#x2F;订阅机制</li></ul><p>报文</p><img src="https://raw.githubusercontent.com/ziyangfu/my-image-hosting/master/SOMEIP-SD_header.29o8zr2zt5z4.webp" alt="SOMEIP-SD_header" style="zoom: 70%;"><center>SOME/IP-SD header</center><p>SOMEIP部分</p><ul><li>message ID &#x3D; 0xFFFF 0x8100</li><li>client ID &#x3D; 0x0000</li><li>protocol type &#x3D; 0x01</li><li>interface type &#x3D; 0x01</li><li>message type &#x3D; 0x02 (notification)</li><li>return type &#x3D; 0x00 (E_OK)</li></ul><p>SOMEIP-SD部分</p><ul><li>Flags<ul><li>0-1-2-3-4-5-6-7  ( 8 bit)</li><li>0，reboot flag：重启标识。重新启动置1，session ID 经过一轮循环后，置0</li><li>1，unicast flag：单播标识。置1，表明支持使用单播接受消息，因为兼容性才保留</li><li>2，explicit initial data control flag。显示初始化数据控制标识，置1，表明ECU支持显式初始数据控制</li><li>3-7，置0</li></ul></li></ul><img src="https://raw.githubusercontent.com/ziyangfu/my-image-hosting/master/DeepinScreenshot_select-area_20220126163452.3y5dy2sxu2w0.webp" alt="DeepinScreenshot_select-area_20220126163452" style="zoom:80%;"><center>entries array 报文</center><ul><li>entries array<ul><li>service entry type (16 byte)</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/ziyangfu/my-image-hosting/master/DeepinScreenshot_select-area_20220126172341.3iuhbrn1so80.webp" alt="DeepinScreenshot_select-area_20220126172341"></p><ul><li>type<ul><li>0x00 &#x3D; FindService (客户端) </li><li>0x01 &#x3D; OfferService (服务端)  &#x2F; StopOfferService (服务端)</li></ul></li></ul><blockquote><p>客户端主动查找</p><p>客户端    —— FindService ——-&gt; 服务端</p><p>若服务可用</p><p>客户端    &lt;—— OfferService ——- 服务端</p><hr><p>服务端服务后续不可用，主动发出StopOfferService报文，通知客户端停止发送请求，取消订阅</p><p>客户端    &lt;—— StopOfferService（TTL &#x3D; 0） ——- 服务端</p><hr><p>问：type一致，如何区分OfferService &#x2F; StopOfferService ？</p><p>答：通过 TTL 值进行区分，当TTL &#x3D; 0 时，表示此时为 StopOfferService，后面的 StopSubscribeEventgroup以及SubscribeEventgroupNack原理一致，注意区分报文中的TTL与TCP&#x2F;IP协议栈中的TTL，不是一个概念</p></blockquote><ul><li><p>service ID</p><ul><li>关于哪个服务，0xFFFF &#x3D; 所有服务</li></ul></li><li><p>instance ID</p><ul><li>关于服务的哪个实例，0xFFFF &#x3D; 所有实例</li></ul></li><li><p>major version</p><ul><li>服务主版本号</li></ul></li><li><p>TTL</p><ul><li>entries 生命周期，可理解为发现服务时的搜索时间，提供服务时的有效时间</li></ul></li><li><p>Eventgroup entry type (16 byte)</p></li></ul><p><img src="https://raw.githubusercontent.com/ziyangfu/my-image-hosting/master/DeepinScreenshot_select-area_20220126172426.25f8itn1k5hc.webp" alt="DeepinScreenshot_select-area_20220126172426"></p><ul><li><p>type</p><ul><li>0x06 &#x3D; SubscribeEventgroup (客户端) &#x2F; StopSubscribeEventgroup (客户端)</li><li>0x07 &#x3D; SubscribeEventgroupAck (服务端) &#x2F; SubscribeEventgroupNack (服务端)</li></ul><blockquote><p>客户端    —— SubscribeEventgroup ——-&gt; 服务端</p><p>符合订阅条件，订阅成功</p><p>客户端    &lt;—— SubscribeEventgroupAck ——- 服务端</p><p>不符合订阅条件，订阅不成功</p><p>客户端    &lt;—— SubscribeEventgroupNack （TTL &#x3D; 0）——- 服务端</p><hr><p>客户端取消订阅</p><p>客户端    —— StopSubscribeEventgroup（TTL &#x3D; 0） ——-&gt; 服务端</p></blockquote></li><li><p>reserved &amp; reserved2</p><ul><li>0x00</li></ul></li><li><p>initial data requested flag</p><ul><li>初始数据请求标志，若初始数据由服务端发出，则设置为1</li></ul></li><li><p>counter</p><ul><li>用于区分同一订阅者的订阅请求</li></ul></li><li><p>eventgroup ID</p><ul><li>事件组ID，也就是说SOME&#x2F;IP事件订阅和取消订阅的颗粒度到一个<strong>事件组</strong>，而不是一个事件</li></ul></li><li><p>options部分</p><ul><li>附加信息，包括如何访问服务实例信息（IP地址、传输协议、端口号）</li><li>配置选项&#x2F;负载平衡&#x2F;endpoint</li></ul></li></ul><h3 id="3-SOME-x2F-IP-TP"><a href="#3-SOME-x2F-IP-TP" class="headerlink" title="3. SOME&#x2F;IP-TP"></a>3. SOME&#x2F;IP-TP</h3><p>未完待续</p><h3 id="4-示例"><a href="#4-示例" class="headerlink" title="4. 示例"></a>4. 示例</h3><img src="https://raw.githubusercontent.com/ziyangfu/my-image-hosting/master/DeepinScreenshot_select-area_20220127115435.6iumlrca0000.webp" alt="DeepinScreenshot_select-area_20220127115435" style="zoom:67%;"><h3 id="5-SOMEIP-SD-状态机"><a href="#5-SOMEIP-SD-状态机" class="headerlink" title="5. SOMEIP-SD 状态机"></a>5. SOMEIP-SD 状态机</h3><img src="https://raw.githubusercontent.com/ziyangfu/my-image-hosting/master/DeepinScreenshot_select-area_20220127120603.6at1mnuy39s0.webp" alt="DeepinScreenshot_select-area_20220127120603" style="zoom: 80%;"><img src="https://raw.githubusercontent.com/ziyangfu/my-image-hosting/master/DeepinScreenshot_select-area_20220127121252.3rgcie36s2w0.webp" alt="DeepinScreenshot_select-area_20220127121252" style="zoom:67%;"><h3 id="6-通过wireshark识别与解析SOME-x2F-IP协议"><a href="#6-通过wireshark识别与解析SOME-x2F-IP协议" class="headerlink" title="6. 通过wireshark识别与解析SOME&#x2F;IP协议"></a>6. 通过wireshark识别与解析SOME&#x2F;IP协议</h3><p>wireshark识别应用层协议采用 端口号-应用层协议绑定（例如：port 80 &#x3D; HTTP）及自启发识别机制，而SOMEIP协议 wireshark无法通过端口号识别，自启发识别算法失效，因此为了解析SOMEIP协议分组，需手动设置。</p><ol><li>选择数据包，右键选择 <code>Decode As</code></li><li>协议选择SOME&#x2F;IP协议</li><li>过滤器键入<code>someip</code>或<code>someipsd</code>可以过滤协议</li></ol><blockquote><p>保持永久设置，实质是绑定端口与协议</p><p>点击菜单栏-&gt;edit-&gt;preference-&gt;protocol,选择SOMEIP协议</p><p>SOMEIP 及SOMEIP-SD 解析</p></blockquote><img src="/2023/04/17/SOMEIP%E5%8D%8F%E8%AE%AE%E7%90%86%E8%A7%A3/image-20230417151307817.png" alt="image-20230417151307817" style="zoom: 50%;">]]></content>
    
    
    
    <tags>
      
      <tag>网络</tag>
      
      <tag>原创</tag>
      
      <tag>车载以太网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ARM64架构Linux内核启动过程分析_上</title>
    <link href="/2023/04/14/ARM64%E6%9E%B6%E6%9E%84Linux%E5%86%85%E6%A0%B8%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90_%E4%B8%8A/"/>
    <url>/2023/04/14/ARM64%E6%9E%B6%E6%9E%84Linux%E5%86%85%E6%A0%B8%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90_%E4%B8%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="ARM64架构Linux内核启动过程分析（上）"><a href="#ARM64架构Linux内核启动过程分析（上）" class="headerlink" title="ARM64架构Linux内核启动过程分析（上）"></a>ARM64架构Linux内核启动过程分析（上）</h1><ul><li>Linux内核版本：5.10.90</li><li>硬件：NXP S32G-VNP-RDB2 (4 * A53，ARM64)</li></ul><img src="/2023/04/14/ARM64%E6%9E%B6%E6%9E%84Linux%E5%86%85%E6%A0%B8%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90_%E4%B8%8A/image-20230414155940183.png" alt="image-20230414155940183" style="zoom:67%;"><h2 id="1-ROM-code"><a href="#1-ROM-code" class="headerlink" title="1. ROM code"></a>1. ROM code</h2><p>从外部设备（串口、网络、NAND flash、USB磁盘设备或者其他磁盘设备）加载 Linux bootloader。</p><h2 id="2-BootLoader"><a href="#2-BootLoader" class="headerlink" title="2. BootLoader"></a>2. BootLoader</h2><ul><li>初始化系统中的RAM并将RAM的信息告知kernel</li><li>准备好device tree blob的信息并将dtb的首地址告知kernel</li><li>解压内核（可选）</li><li>加载Linux内核,将控制权转交给内核</li></ul><p>在跳入内核之前，必须满足以下条件：</p><ul><li>停止所有支持 DMA 的设备，这样内存就不会被占用被伪造的网络数据包或磁盘数据损坏。</li><li>主 CPU 通用寄存器设置<br>x0 &#x3D; 系统 RAM 中设备树 blob (dtb) 的物理地址。<br>x1 &#x3D; 0（留作将来使用）<br>x2 &#x3D; 0（留作将来使用）<br>x3 &#x3D; 0（留作将来使用）</li><li>CPU模式<br>所有形式的中断都必须在 PSTATE.DAIF (Debug,  SError, IRQ 和 FIQ）。<br>CPU 必须处于 EL2 中（推荐以便访问虚拟化扩展）或非安全 EL1。</li><li>缓存、MMU<br>MMU 必须关闭。<br>指令缓存可能打开或关闭。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># @file: arch/arm64/kernel/head.S</span><br><span class="hljs-comment"># 内存管理单元关闭，数据缓存关闭，指令缓存可开可闭</span><br>The requirements are:<br>   MMU = off, D-cache = off, I-cache = on or off,<br>   x0 = physical address to the FDT blob.<br>   <br><span class="hljs-comment"># bootloader为了性能，很可能是打开了MMU以及各种cache，</span><br><span class="hljs-comment"># 只是在进入kernel的时候，受限于ARM64 boot protocol而将CPU以及cache、</span><br><span class="hljs-comment"># MMU等硬件状态设定为指定的状态。因此，实际上这时候，instruction cache</span><br><span class="hljs-comment"># 以及TLB中很可能有残留的数据，因此后续需要将其清除</span><br></code></pre></td></tr></table></figure><h2 id="3-Linux内核启动"><a href="#3-Linux内核启动" class="headerlink" title="3. Linux内核启动"></a>3. Linux内核启动</h2><h3 id="3-1-Linux内核从哪里启动"><a href="#3-1-Linux内核从哪里启动" class="headerlink" title="3.1 Linux内核从哪里启动"></a>3.1 Linux内核从哪里启动</h3><p>Linux内核的image有以下几种形式，目前开发板使用未压缩的image。</p><ul><li>vmlinux：<strong>原始内核文件</strong>，可引导的、未压缩、可压缩的内核镜像，ELF格式</li><li>image：<strong>未压缩</strong>，调用 objcopy -o binary生成原始二进制文件，本质是将符号与重定位信息舍弃，只剩二进制数据。</li><li>zImage：<strong>压缩</strong>，二进制文件+gzip压缩</li></ul><p>欲知Linux内核的startup entry， 最简单的办法是网上查看相关文章，而且启动点有<code>Kernel startup entry point</code>的注释，可以通过搜索找到head.S文件。</p><p>本文尝试通过反汇编 vmlinux，查找Linux内核运行的第一条指令，然后通过第一条指令找到Linux内核启动点。</p><h4 id="3-1-1-反汇编vmlinux查找Linux内核启动点"><a href="#3-1-1-反汇编vmlinux查找Linux内核启动点" class="headerlink" title="3.1.1 反汇编vmlinux查找Linux内核启动点"></a>3.1.1 反汇编vmlinux查找Linux内核启动点</h4><p>首先查看 vmlinux ELF header，可知 入口地址为 <code>0xffffffc010000000</code></p><blockquote><p>ps:<br>入口地址在哪里设置？<br>offset（TEXT_OFFSET），偏移 256MB</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">fzy@fzy-Lenovo:~/Documents/05_NXP_S32G/linux_kernel$ readelf -h ./vmlinux<br>ELF Header:<br>Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 <br>Class:                             ELF64<br>OS/ABI:                            UNIX - System V<br>Machine:                           AArch64<br>Entry point address:               0xffffffc010000000<br></code></pre></td></tr></table></figure><p>反编译 vmlinux。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;path to&gt;/gcc-arm-10.2-2020.11-x86_64-aarch64-none-linux-gnu/bin/aarch64-none-linux-gnu-objdump -dxh ./vmlinux &gt; ./vmlinux.S<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># @file: vmlinux.S</span><br><span class="hljs-comment"># 符号表</span><br>SYMBOL TABLE:<br>ffffffc010000000 l    d  .head.text     0000000000000000 .head.text<br>......<br>0000000000000000 l    <span class="hljs-built_in">df</span> *ABS*  0000000000000000 <span class="hljs-built_in">arch</span>/arm64/kernel/head.o<br>ffffffc010000000 l       .head.text     0000000000000000 _head<br>ffffffc010b40020 l       .init.text     0000000000000020 preserve_boot_args<br><span class="hljs-comment"># ------------------------------------------------------------</span><br>Disassembly of section .head.text:<br><br>ffffffc010000000 &lt;_text&gt;:<br>ffffffc010000000:       142d0000        b       ffffffc010b40000 &lt;primary_entry&gt;<br>        ...<br>ffffffc010000010:       00d70000        .word   0x00d70000<br>ffffffc010000014:       00000000        .word   0x00000000<br>ffffffc010000018:       0000000a        .word   0x0000000a<br>        ...<br>ffffffc010000038:       644d5241        .word   0x644d5241<br>ffffffc01000003c:       00000000        .word   0x00000000<br><br></code></pre></td></tr></table></figure><p>从 vmlinux.S可知，内核启动的第一条指令是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ffffffc010000000:       142d0000        b       ffffffc010b40000 &lt;primary_entry&gt;<br></code></pre></td></tr></table></figure><p>对应的section为：<code>.head.text_text</code>,，同时还能看到 <code>arch/arm64/kernel/head.o</code>， head.o的源文件为head.S。</p><p>由此我们可知，程序从<code>arch/arm64/kernel/head.S</code>处开始运行，且第一条指令为 <code>bprimary_entry</code></p><blockquote><p>查看<code>System.map</code>也可以知道启动点</p><p>ffffffc010000000 t _head<br>ffffffc010000000 T _text</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// @file: arch/arm64/kernel/head.S</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* Kernel startup entry point.</span><br><span class="hljs-comment">* ---------------------------</span><br><span class="hljs-comment">*/</span><br>__HEAD<br>    _head:<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* DO NOT MODIFY. Image header expected by Linux boot-loaders.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_EFI</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* This add instruction has no meaningful effect except that</span><br><span class="hljs-comment">* its opcode forms the magic &quot;MZ&quot; signature required by UEFI.</span><br><span class="hljs-comment">*/</span><br>addx13, x18, #<span class="hljs-number">0x16</span><br>bprimary_entry<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>bprimary_entry<span class="hljs-comment">// branch to kernel start, magic 从这里开始,跳转</span><br>.<span class="hljs-type">long</span><span class="hljs-number">0</span><span class="hljs-comment">// reserved</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>注意，我们确实没有设置CONFIG_EFI。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Boot options </span><br><span class="hljs-comment"># </span><br>CONFIG_CMDLINE=<span class="hljs-string">&quot;console=ttyLF0&quot;</span> <br><span class="hljs-comment"># CONFIG_CMDLINE_FORCE is not set </span><br><span class="hljs-comment"># CONFIG_EFI is not set    # 我们确实没有设置CONFIG_EFI</span><br><span class="hljs-comment"># end of Boot options</span><br></code></pre></td></tr></table></figure><h3 id="3-2-第一阶段（汇编语言）"><a href="#3-2-第一阶段（汇编语言）" class="headerlink" title="3.2 第一阶段（汇编语言）"></a>3.2 第一阶段（汇编语言）</h3><h4 id="3-2-1-primary-entry"><a href="#3-2-1-primary-entry" class="headerlink" title="3.2.1 primary_entry"></a>3.2.1 primary_entry</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// @file: arch/arm64/kernel/head.S</span><br><span class="hljs-comment">// 105 行</span><br>SYM_CODE_START(primary_entry)<br>    blpreserve_boot_args<br>    blel2_setup<span class="hljs-comment">// Drop to EL1, w0=cpu_boot_mode</span><br>    adrpx23, __PHYS_OFFSET<br>    andx23, x23, MIN_KIMG_ALIGN - <span class="hljs-number">1</span><span class="hljs-comment">// KASLR offset, defaults to 0</span><br>    blset_cpu_boot_mode_flag<br>    bl__create_page_tables<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * The following calls CPU setup code, see arch/arm64/mm/proc.S for</span><br><span class="hljs-comment">    * details.</span><br><span class="hljs-comment">    * On return, the CPU will be ready for the MMU to be turned on and</span><br><span class="hljs-comment">    * the TCR will have been set.</span><br><span class="hljs-comment">    */</span><br>    bl__cpu_setup<span class="hljs-comment">// initialise processor</span><br>    b__primary_switch<br><span class="hljs-title function_">SYM_CODE_END</span><span class="hljs-params">(primary_entry)</span><br></code></pre></td></tr></table></figure><h4 id="3-2-2-preserve-boot-args"><a href="#3-2-2-preserve-boot-args" class="headerlink" title="3.2.2 preserve_boot_args"></a>3.2.2 preserve_boot_args</h4><p>功能：保存从bootloader传递过来的x0 ~ x3寄存器这四个寄存器</p><ul><li><p>ARM64 boot protocol对这4个寄存器严格限制。x0保存dtb物理地址，x1~x3 &#x3D; 0。x0是boot_args这段内存的首地址，X1是末地址。后续setup_arch函数会访问boot_args，并进行校验。</p></li><li><p>使用DMB来保证stp指令在dc ivac指令之前执行完成</p></li><li><p>将boot_args变量对应的cache line进行清除并设置无效</p></li></ul><blockquote><p>关于 __inval_dcache_area，可参考：<a href="https://elixir.bootlin.com/linux/v5.10.90/source/arch/arm64/mm/cache.S#L142">&#x2F;arch&#x2F;arm64&#x2F;mm&#x2F;cache.S</a><br>Ensure that any D-cache lines for the interval [kaddr, kaddr+size)are invalidated. Any partial lines at the ends of the interval are also cleaned to PoC to prevent data loss</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* Preserve the arguments passed by the bootloader in x0 .. x3</span><br><span class="hljs-comment">*/</span><br>SYM_CODE_START_LOCAL(preserve_boot_args)<br>    movx21, x0<span class="hljs-comment">// x21=FDT   // 将dtb的地址暂存在x21寄存器，释放出x0使用</span><br>    <span class="hljs-comment">// x0保存boot_args变量的地址</span><br>    adr_lx0, boot_args<span class="hljs-comment">// record the contents of</span><br>    stpx21, x1, [x0]<span class="hljs-comment">// x0 .. x3 at kernel entry</span><br>    stpx2, x3, [x0, #<span class="hljs-number">16</span>]<br>    <br>    dmbsy<span class="hljs-comment">// needed before dc ivac with</span><br>    <span class="hljs-comment">// MMU off</span><br>    <br>    movx1, #<span class="hljs-number">0x20</span><span class="hljs-comment">// 4 x 8 bytes</span><br>    b__inval_dcache_area<span class="hljs-comment">// tail call</span><br>    SYM_CODE_END(preserve_boot_args)<br></code></pre></td></tr></table></figure><h4 id="3-2-3-el2-setup"><a href="#3-2-3-el2-setup" class="headerlink" title="3.2.3 el2_setup"></a>3.2.3 <a href="https://elixir.bootlin.com/linux/v5.10.90/C/ident/el2_setup">el2_setup</a></h4><p>若处于EL2模式，需要将CPU退回EL1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* If we&#x27;re fortunate enough to boot at EL2, ensure that the world is</span><br><span class="hljs-comment">* sane before dropping to EL1.</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* Returns either BOOT_CPU_MODE_EL1 or BOOT_CPU_MODE_EL2 in w0 if</span><br><span class="hljs-comment">* booted in EL1 or EL2 respectively.</span><br><span class="hljs-comment">*/</span><br>SYM_FUNC_START(el2_setup)<br>    msrSPsel, #<span class="hljs-number">1</span><span class="hljs-comment">// We want to use SP_EL&#123;1,2&#125;</span><br>    mrsx0, CurrentEL<br>    cmpx0, #CurrentEL_EL2<br>    b.eq<span class="hljs-number">1f</span><br>    mov_qx0, (SCTLR_EL1_RES1 | ENDIAN_SET_EL1)<br>    msrsctlr_el1, x0<br>    movw0, #BOOT_CPU_MODE_EL1<span class="hljs-comment">// This cpu booted in EL1</span><br>    isb<br>    ret<br>    <br>    <span class="hljs-number">1</span>:mov_qx0, (SCTLR_EL2_RES1 | ENDIAN_SET_EL2)<br>msrsctlr_el2, x0<br></code></pre></td></tr></table></figure><h4 id="3-2-4-set-cpu-boot-mode-flag"><a href="#3-2-4-set-cpu-boot-mode-flag" class="headerlink" title="3.2.4 set_cpu_boot_mode_flag"></a>3.2.4 set_cpu_boot_mode_flag</h4><p>设置全局变量<code>__boot_cpu_mode</code>，前提是CPU退回EL1模式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Sets the __boot_cpu_mode flag depending on the CPU boot mode passed</span><br><span class="hljs-comment"> * in w0. See arch/arm64/include/asm/virt.h for more info.</span><br><span class="hljs-comment"> */</span><br>SYM_FUNC_START_LOCAL(set_cpu_boot_mode_flag)<br>adr_lx1, __boot_cpu_mode<br>cmpw0, #BOOT_CPU_MODE_EL2<br>b.ne<span class="hljs-number">1f</span><br>addx1, x1, #<span class="hljs-number">4</span><br><span class="hljs-number">1</span>:strw0, [x1]<span class="hljs-comment">// This CPU has booted in EL1</span><br>dmbsy<br>dcivac, x1<span class="hljs-comment">// Invalidate potentially stale cache line</span><br>ret<br><span class="hljs-title function_">SYM_FUNC_END</span><span class="hljs-params">(set_cpu_boot_mode_flag)</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * We need to find out the CPU boot mode long after boot, so we need to</span><br><span class="hljs-comment"> * store it in a writable variable.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * This is not in .bss, because we set it sufficiently early that the boot-time</span><br><span class="hljs-comment"> * zeroing of .bss would clobber it.</span><br><span class="hljs-comment"> */</span><br>SYM_DATA_START(__boot_cpu_mode)<br>.<span class="hljs-type">long</span>BOOT_CPU_MODE_EL2<br>.<span class="hljs-type">long</span>BOOT_CPU_MODE_EL1<br><span class="hljs-title function_">SYM_DATA_END</span><span class="hljs-params">(__boot_cpu_mode)</span><br></code></pre></td></tr></table></figure><h4 id="3-2-5-create-page-tables"><a href="#3-2-5-create-page-tables" class="headerlink" title="3.2.5 __create_page_tables"></a>3.2.5 <a href="https://elixir.bootlin.com/linux/v5.10.90/C/ident/__create_page_tables">__create_page_tables</a></h4><p>页表初始化</p><ul><li>identity mapping<ul><li>建立整个内核（从KERNEL_START到KERNEL_END）的一致性mapping，将物理地址所在的虚拟地址段mapping到物理地址</li><li>一致性映射可以保证在在 <strong>打开MMU 那一点附近的程序代码</strong>可以平滑切换</li></ul></li></ul><blockquote><p><a href="https://stackoverflow.com/questions/16688540/page-table-in-linux-kernel-space-during-boot/27266309#27266309">https://stackoverflow.com/questions/16688540/page-table-in-linux-kernel-space-during-boot/27266309#27266309</a><br>1）在使能 mmu 之前，CPU 产生的地址都是物理地址，使能 mmu 之后，产生的都是虚拟地址。<br>2）CPU 是 pipeline 工作的，在执行当前指令时，CPU 很可能已经做了一个动作，就是产生了下一条指令的地址（也就是计算出来了下一条指令在那里）。如果是在 mmu 打开之前，那这个地址就是物理地址。<br>因此，假设当前指令就是在打开 mmu，那么，在执行打开 mmu 这条指令时，CPU 已经产生了一个地址（下一条指令的地址），如上 2) 所讲，此时这个地址是物理地址。那么 打开mmu这条指令执行完毕，mmu 生效后，CPU会把刚才产生的物理地址当成虚拟地址，去 mmu 表中查找对应的物理地址</p></blockquote><ul><li>Map the kernel image<ul><li>仅从系统内存起始物理地址开始的一小段内存mapping</li></ul></li></ul><blockquote><p>虚拟地址总线宽度最大可设置52，（36 39 42 47 48 52）</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Setup the initial page tables. We only setup the barest amount which is</span><br><span class="hljs-comment"> * required to get the kernel running. The following sections are required:</span><br><span class="hljs-comment"> *   - identity mapping to enable the MMU (low address, TTBR0)</span><br><span class="hljs-comment"> *   - first few MB of the kernel linear mapping to jump to once the MMU has</span><br><span class="hljs-comment"> *     been enabled</span><br><span class="hljs-comment"> */</span><br>SYM_FUNC_START_LOCAL(__create_page_tables)<br>movx28, lr<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Invalidate the init page tables to avoid potential dirty cache lines</span><br><span class="hljs-comment"> * being evicted. Other page tables are allocated in rodata as part of</span><br><span class="hljs-comment"> * the kernel image, and thus are clean to the PoC per the boot</span><br><span class="hljs-comment"> * protocol.</span><br><span class="hljs-comment"> */</span><br>adrpx0, init_pg_dir<br>adrpx1, init_pg_end<br>subx1, x1, x0<br>bl__inval_dcache_area<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Clear the init page tables.</span><br><span class="hljs-comment"> */</span><br>adrpx0, init_pg_dir<br>adrpx1, init_pg_end<br>subx1, x1, x0<br><span class="hljs-number">1</span>:stpxzr, xzr, [x0], #<span class="hljs-number">16</span><br>stpxzr, xzr, [x0], #<span class="hljs-number">16</span><br>stpxzr, xzr, [x0], #<span class="hljs-number">16</span><br>stpxzr, xzr, [x0], #<span class="hljs-number">16</span><br>subsx1, x1, #<span class="hljs-number">64</span><br>b.ne<span class="hljs-number">1b</span><br><br>movx7, SWAPPER_MM_MMUFLAGS<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Create the identity mapping.</span><br><span class="hljs-comment"> */</span><br>adrpx0, idmap_pg_dir<br>adrpx3, __idmap_text_start<span class="hljs-comment">// __pa(__idmap_text_start)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_ARM64_VA_BITS_52</span><br>mrs_sx6, SYS_ID_AA64MMFR2_EL1<br>andx6, x6, #(<span class="hljs-number">0xf</span> &lt;&lt; ID_AA64MMFR2_LVA_SHIFT)<br>movx5, #<span class="hljs-number">52</span><br>cbnzx6, <span class="hljs-number">1f</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>movx5, #VA_BITS_MIN<br><span class="hljs-number">1</span>:<br>adr_lx6, vabits_actual<br>strx5, [x6]<br>dmbsy<br>dcivac, x6<span class="hljs-comment">// Invalidate potentially stale cache line</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * VA_BITS may be too small to allow for an ID mapping to be created</span><br><span class="hljs-comment"> * that covers system RAM if that is located sufficiently high in the</span><br><span class="hljs-comment"> * physical address space. So for the ID map, use an extended virtual</span><br><span class="hljs-comment"> * range in that case, and configure an additional translation level</span><br><span class="hljs-comment"> * if needed.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Calculate the maximum allowed value for TCR_EL1.T0SZ so that the</span><br><span class="hljs-comment"> * entire ID map region can be mapped. As T0SZ == (64 - #bits used),</span><br><span class="hljs-comment"> * this number conveniently equals the number of leading zeroes in</span><br><span class="hljs-comment"> * the physical address of __idmap_text_end.</span><br><span class="hljs-comment"> */</span><br>adrpx5, __idmap_text_end<br>clzx5, x5<br>cmpx5, TCR_T0SZ(VA_BITS_MIN) <span class="hljs-comment">// default T0SZ small enough?</span><br>b.ge<span class="hljs-number">1f</span><span class="hljs-comment">// .. then skip VA range extension</span><br><br>adr_lx6, idmap_t0sz<br>strx5, [x6]<br>dmbsy<br>dcivac, x6<span class="hljs-comment">// Invalidate potentially stale cache line</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> (VA_BITS &lt; 48)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EXTRA_SHIFT(PGDIR_SHIFT + PAGE_SHIFT - 3)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EXTRA_PTRS(1 &lt;&lt; (PHYS_MASK_SHIFT - EXTRA_SHIFT))</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * If VA_BITS &lt; 48, we have to configure an additional table level.</span><br><span class="hljs-comment"> * First, we have to verify our assumption that the current value of</span><br><span class="hljs-comment"> * VA_BITS was chosen such that all translation levels are fully</span><br><span class="hljs-comment"> * utilised, and that lowering T0SZ will always result in an additional</span><br><span class="hljs-comment"> * translation level to be configured.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> VA_BITS != EXTRA_SHIFT</span><br><span class="hljs-meta">#<span class="hljs-keyword">error</span> <span class="hljs-string">&quot;Mismatch between VA_BITS and page size/number of translation levels&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>movx4, EXTRA_PTRS<br>create_table_entry x0, x3, EXTRA_SHIFT, x4, x5, x6<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * If VA_BITS == 48, we don&#x27;t have to configure an additional</span><br><span class="hljs-comment"> * translation level, but the top-level table has more entries.</span><br><span class="hljs-comment"> */</span><br>movx4, #<span class="hljs-number">1</span> &lt;&lt; (PHYS_MASK_SHIFT - PGDIR_SHIFT)<br>str_lx4, idmap_ptrs_per_pgd, x5<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-number">1</span>:<br>ldr_lx4, idmap_ptrs_per_pgd<br>movx5, x3<span class="hljs-comment">// __pa(__idmap_text_start)</span><br>adr_lx6, __idmap_text_end<span class="hljs-comment">// __pa(__idmap_text_end)</span><br><br>map_memory x0, x1, x3, x6, x7, x3, x4, x10, x11, x12, x13, x14<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Map the kernel image (starting with PHYS_OFFSET).</span><br><span class="hljs-comment"> */</span><br>adrpx0, init_pg_dir<br>mov_qx5, KIMAGE_VADDR<span class="hljs-comment">// compile time __va(_text)</span><br>addx5, x5, x23<span class="hljs-comment">// add KASLR displacement</span><br>movx4, PTRS_PER_PGD<br>adrpx6, _end<span class="hljs-comment">// runtime __pa(_end)</span><br>adrpx3, _text<span class="hljs-comment">// runtime __pa(_text)</span><br>subx6, x6, x3<span class="hljs-comment">// _end - _text</span><br>addx6, x6, x5<span class="hljs-comment">// runtime __va(_end)</span><br><br>map_memory x0, x1, x5, x6, x7, x3, x4, x10, x11, x12, x13, x14<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Since the page tables have been populated with non-cacheable</span><br><span class="hljs-comment"> * accesses (MMU disabled), invalidate those tables again to</span><br><span class="hljs-comment"> * remove any speculatively loaded cache lines.</span><br><span class="hljs-comment"> */</span><br>dmbsy<br><br>adrpx0, idmap_pg_dir<br>adrpx1, idmap_pg_end<br>subx1, x1, x0<br>bl__inval_dcache_area<br><br>adrpx0, init_pg_dir<br>adrpx1, init_pg_end<br>subx1, x1, x0<br>bl__inval_dcache_area<br><br>retx28<br><span class="hljs-title function_">SYM_FUNC_END</span><span class="hljs-params">(__create_page_tables)</span><br></code></pre></td></tr></table></figure><h4 id="3-2-6-cpu-setup"><a href="#3-2-6-cpu-setup" class="headerlink" title="3.2.6 __cpu_setup"></a>3.2.6 __cpu_setup</h4><p>CPU初始化设置</p><ul><li>cache和TLB的处理<ul><li>清空</li></ul></li><li>设置TCR_EL1、SCTLR_EL1<ul><li>kernel space和user space使用不同的页表，因此有两个Translation Table Base Registers，形成两套地址翻译系统，TCR_EL1寄存器主要用来控制这两套地址翻译系统</li><li>SCTLR_EL1是一个对整个系统（包括memory system）进行控制的寄存器</li></ul></li><li>CPU做好MMU打开的准备</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *__cpu_setup</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *Initialise the processor for turning the MMU on.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Output:</span><br><span class="hljs-comment"> *Return in x0 the value of the SCTLR_EL1 register.</span><br><span class="hljs-comment"> */</span><br>.pushsection <span class="hljs-string">&quot;.idmap.text&quot;</span>, <span class="hljs-string">&quot;awx&quot;</span><br>SYM_FUNC_START(__cpu_setup)<br>tlbivmalle1<span class="hljs-comment">// Invalidate local TLB</span><br>dsbnsh<br><br>movx1, #<span class="hljs-number">3</span> &lt;&lt; <span class="hljs-number">20</span><br>msrcpacr_el1, x1<span class="hljs-comment">// Enable FP/ASIMD</span><br>movx1, #<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">12</span><span class="hljs-comment">// Reset mdscr_el1 and disable</span><br>msrmdscr_el1, x1<span class="hljs-comment">// access to the DCC from EL0</span><br>isb<span class="hljs-comment">// Unmask debug exceptions now,</span><br>enable_dbg<span class="hljs-comment">// since this is per-cpu</span><br>reset_pmuserenr_el0 x1<span class="hljs-comment">// Disable PMU access from EL0</span><br>reset_amuserenr_el0 x1<span class="hljs-comment">// Disable AMU access from EL0</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Memory region attributes</span><br><span class="hljs-comment"> */</span><br>mov_qx5, MAIR_EL1_SET<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_ARM64_MTE</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Update MAIR_EL1, GCR_EL1 and TFSR*_EL1 if MTE is supported</span><br><span class="hljs-comment"> * (ID_AA64PFR1_EL1[11:8] &gt; 1).</span><br><span class="hljs-comment"> */</span><br>mrsx10, ID_AA64PFR1_EL1<br>ubfxx10, x10, #ID_AA64PFR1_MTE_SHIFT, #<span class="hljs-number">4</span><br>cmpx10, #ID_AA64PFR1_MTE<br>b.lt<span class="hljs-number">1f</span><br><br><span class="hljs-comment">/* Normal Tagged memory type at the corresponding MAIR index */</span><br>movx10, #MAIR_ATTR_NORMAL_TAGGED<br>bfix5, x10, #(<span class="hljs-number">8</span> *  MT_NORMAL_TAGGED), #<span class="hljs-number">8</span><br><br><span class="hljs-comment">/* initialize GCR_EL1: all non-zero tags excluded by default */</span><br>movx10, #(SYS_GCR_EL1_RRND | SYS_GCR_EL1_EXCL_MASK)<br>msr_sSYS_GCR_EL1, x10<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * If GCR_EL1.RRND=1 is implemented the same way as RRND=0, then</span><br><span class="hljs-comment"> * RGSR_EL1.SEED must be non-zero for IRG to produce</span><br><span class="hljs-comment"> * pseudorandom numbers. As RGSR_EL1 is UNKNOWN out of reset, we</span><br><span class="hljs-comment"> * must initialize it.</span><br><span class="hljs-comment"> */</span><br>mrsx10, CNTVCT_EL0<br>andsx10, x10, #SYS_RGSR_EL1_SEED_MASK<br>csincx10, x10, xzr, ne<br>lslx10, x10, #SYS_RGSR_EL1_SEED_SHIFT<br>msr_sSYS_RGSR_EL1, x10<br><br><span class="hljs-comment">/* clear any pending tag check faults in TFSR*_EL1 */</span><br>msr_sSYS_TFSR_EL1, xzr<br>msr_sSYS_TFSRE0_EL1, xzr<br><span class="hljs-number">1</span>:<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>msrmair_el1, x5<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Set/prepare TCR and TTBR. We use 512GB (39-bit) address range for</span><br><span class="hljs-comment"> * both user and kernel.</span><br><span class="hljs-comment"> */</span><br>mov_qx10, TCR_TxSZ(VA_BITS) | TCR_CACHE_FLAGS | TCR_SMP_FLAGS | \<br>TCR_TG_FLAGS | TCR_KASLR_FLAGS | TCR_ASID16 | \<br>TCR_TBI0 | TCR_A1 | TCR_KASAN_FLAGS<br>tcr_clear_errata_bits x10, x9, x5<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_ARM64_VA_BITS_52</span><br>ldr_lx9, vabits_actual<br>subx9, xzr, x9<br>addx9, x9, #<span class="hljs-number">64</span><br>tcr_set_t1szx10, x9<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>ldr_lx9, idmap_t0sz<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>tcr_set_t0szx10, x9<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Set the IPS bits in TCR_EL1.</span><br><span class="hljs-comment"> */</span><br>tcr_compute_pa_size x10, #TCR_IPS_SHIFT, x5, x6<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_ARM64_HW_AFDBM</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Enable hardware update of the Access Flags bit.</span><br><span class="hljs-comment"> * Hardware dirty bit management is enabled later,</span><br><span class="hljs-comment"> * via capabilities.</span><br><span class="hljs-comment"> */</span><br>mrsx9, ID_AA64MMFR1_EL1<br>andx9, x9, #<span class="hljs-number">0xf</span><br>cbzx9, <span class="hljs-number">1f</span><br>orrx10, x10, #TCR_HA<span class="hljs-comment">// hardware Access flag update</span><br><span class="hljs-number">1</span>:<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span><span class="hljs-comment">/* CONFIG_ARM64_HW_AFDBM */</span></span><br>msrtcr_el1, x10<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Prepare SCTLR</span><br><span class="hljs-comment"> */</span><br>mov_qx0, SCTLR_EL1_SET<br>ret<span class="hljs-comment">// return to head.S</span><br>SYM_FUNC_END(__cpu_setup)<br></code></pre></td></tr></table></figure><h4 id="3-2-7-primary-switch"><a href="#3-2-7-primary-switch" class="headerlink" title="3.2.7  __primary_switch"></a>3.2.7  <a href="https://elixir.bootlin.com/linux/v5.10.90/C/ident/__primary_switch">__primary_switch</a></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c">SYM_FUNC_START_LOCAL(__primary_switch)<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_RANDOMIZE_BASE</span><br>movx19, x0<span class="hljs-comment">// preserve new SCTLR_EL1 value</span><br>mrsx20, sctlr_el1<span class="hljs-comment">// preserve old SCTLR_EL1 value</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>adrpx1, init_pg_dir<br>bl__enable_mmu         <span class="hljs-comment">// 跳转，开启 MMU</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_RELOCATABLE</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_RELR</span><br>movx24, #<span class="hljs-number">0</span><span class="hljs-comment">// no RELR displacement yet</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>bl__relocate_kernel<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_RANDOMIZE_BASE</span><br>ldrx8, =__primary_switched<br>adrpx0, __PHYS_OFFSET<br>blrx8<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * If we return here, we have a KASLR displacement in x23 which we need</span><br><span class="hljs-comment"> * to take into account by discarding the current kernel mapping and</span><br><span class="hljs-comment"> * creating a new one.</span><br><span class="hljs-comment"> */</span><br>pre_disable_mmu_workaround<br>msrsctlr_el1, x20<span class="hljs-comment">// disable the MMU</span><br>isb<br>bl__create_page_tables<span class="hljs-comment">// recreate kernel mapping</span><br><br>tlbivmalle1<span class="hljs-comment">// Remove any stale TLB entries</span><br>dsbnsh<br>isb<br><br>msrsctlr_el1, x19<span class="hljs-comment">// re-enable the MMU</span><br>isb<br>iciallu<span class="hljs-comment">// flush instructions fetched</span><br>dsbnsh<span class="hljs-comment">// via old mapping</span><br>isb<br><br>bl__relocate_kernel<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>ldrx8, =__primary_switched<br>adrpx0, __PHYS_OFFSET<br>brx8<br>SYM_FUNC_END(__primary_switch)<br></code></pre></td></tr></table></figure><h4 id="3-2-8-enable-mmu"><a href="#3-2-8-enable-mmu" class="headerlink" title="3.2.8 __enable_mmu"></a>3.2.8 __enable_mmu</h4><p>开启MMU</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Enable the MMU.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *  x0  = SCTLR_EL1 value for turning on the MMU.</span><br><span class="hljs-comment"> *  x1  = TTBR1_EL1 value</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Returns to the caller via x30/lr. This requires the caller to be covered</span><br><span class="hljs-comment"> * by the .idmap.text section.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Checks if the selected granule size is supported by the CPU.</span><br><span class="hljs-comment"> * If it isn&#x27;t, park the CPU</span><br><span class="hljs-comment"> */</span><br>SYM_FUNC_START(__enable_mmu)<br>mrsx2, ID_AA64MMFR0_EL1<br>ubfxx2, x2, #ID_AA64MMFR0_TGRAN_SHIFT, <span class="hljs-number">4</span><br>cmpx2, #ID_AA64MMFR0_TGRAN_SUPPORTED<br>b.ne__no_granule_support<br>update_early_cpu_boot_status <span class="hljs-number">0</span>, x2, x3<br>adrpx2, idmap_pg_dir<br>phys_to_ttbr x1, x1<br>phys_to_ttbr x2, x2<br>msrttbr0_el1, x2<span class="hljs-comment">// load TTBR0</span><br>offset_ttbr1 x1, x3<br>msrttbr1_el1, x1<span class="hljs-comment">// load TTBR1</span><br>isb<br>msrsctlr_el1, x0<br>isb<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Invalidate the local I-cache so that any instructions fetched</span><br><span class="hljs-comment"> * speculatively from the PoC are discarded, since they may have</span><br><span class="hljs-comment"> * been dynamically patched at the PoU.</span><br><span class="hljs-comment"> */</span><br>iciallu<br>dsbnsh<br>isb<br>ret<br><span class="hljs-title function_">SYM_FUNC_END</span><span class="hljs-params">(__enable_mmu)</span><br></code></pre></td></tr></table></figure><h4 id="3-2-9-primary-switched"><a href="#3-2-9-primary-switched" class="headerlink" title="3.2.9 __primary_switched"></a>3.2.9 __primary_switched</h4><p>C环境准备</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * The following fragment of code is executed with the MMU enabled.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *   x0 = __PHYS_OFFSET</span><br><span class="hljs-comment"> */</span><br>SYM_FUNC_START_LOCAL(__primary_switched)<br>adrpx4, init_thread_union<br>addsp, x4, #THREAD_SIZE<br>adr_lx5, init_task<br>msrsp_el0, x5<span class="hljs-comment">// Save thread_info</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_ARM64_PTR_AUTH</span><br>__ptrauth_keys_init_cpux5, x6, x7, x8<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>adr_lx8, vectors<span class="hljs-comment">// load VBAR_EL1 with virtual</span><br>msrvbar_el1, x8<span class="hljs-comment">// vector table address</span><br>isb<br><br>stpxzr, x30, [sp, #<span class="hljs-number">-16</span>]!<br>movx29, sp<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_SHADOW_CALL_STACK</span><br>adr_lscs_sp, init_shadow_call_stack<span class="hljs-comment">// Set shadow call stack</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>str_lx21, __fdt_pointer, x5<span class="hljs-comment">// Save FDT pointer</span><br><br>ldr_lx4, kimage_vaddr<span class="hljs-comment">// Save the offset between</span><br>subx4, x4, x0<span class="hljs-comment">// the kernel virtual and</span><br>str_lx4, kimage_voffset, x5<span class="hljs-comment">// physical mappings</span><br><br><span class="hljs-comment">// Clear BSS</span><br>adr_lx0, __bss_start<br>movx1, xzr<br>adr_lx2, __bss_stop<br>subx2, x2, x0<br>bl__pi_memset<br>dsbishst<span class="hljs-comment">// Make zero page visible to PTW</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_KASAN</span><br>blkasan_early_init<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_RANDOMIZE_BASE</span><br>tstx23, ~(MIN_KIMG_ALIGN - <span class="hljs-number">1</span>)<span class="hljs-comment">// already running randomized?</span><br>b.ne<span class="hljs-number">0f</span><br>movx0, x21<span class="hljs-comment">// pass FDT address in x0</span><br>blkaslr_early_init<span class="hljs-comment">// parse FDT for KASLR options</span><br>cbzx0, <span class="hljs-number">0f</span><span class="hljs-comment">// KASLR disabled? just proceed</span><br>orrx23, x23, x0<span class="hljs-comment">// record KASLR offset</span><br>ldpx29, x30, [sp], #<span class="hljs-number">16</span><span class="hljs-comment">// we must enable KASLR, return</span><br>ret<span class="hljs-comment">// to __primary_switch()</span><br><span class="hljs-number">0</span>:<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>addsp, sp, #<span class="hljs-number">16</span><br>movx29, #<span class="hljs-number">0</span><br>movx30, #<span class="hljs-number">0</span><br>bstart_kernel<br><span class="hljs-title function_">SYM_FUNC_END</span><span class="hljs-params">(__primary_switched)</span><br><br></code></pre></td></tr></table></figure><h4 id="3-2-10-start-kernel"><a href="#3-2-10-start-kernel" class="headerlink" title="3.2.10 start_kernel"></a>3.2.10 <a href="https://elixir.bootlin.com/linux/v5.10.90/C/ident/start_kernel">start_kernel</a></h4><p>汇编阶段结束，第二阶段开始，第二阶段开发语言为C语言。</p><h3 id="3-3-第一阶段总结"><a href="#3-3-第一阶段总结" class="headerlink" title="3.3 第一阶段总结"></a>3.3 第一阶段总结</h3><p><code>TODO</code></p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ol><li><a href="https://www.cnblogs.com/lcw/p/3337937.html">Linux内核启动流程-博客园</a></li><li><a href="https://mshrimp.github.io/2020/04/19/Linux%E5%86%85%E6%A0%B8%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B-%E5%9F%BA%E4%BA%8EARM64/">Linux内核启动流程-基于ARM64</a> （推荐阅读）</li><li><a href="https://blog.csdn.net/yangguoyu8023/article/details/121246788">Linux内核4.14版本：ARM64的内核启动过程（一）——start_kernel之前</a></li><li><a href="https://blog.csdn.net/yangguoyu8023/article/details/121452085">Linux内核4.14版本：ARM64的内核启动过程（二）——start_kernel</a></li><li><a href="https://www.cnblogs.com/lemaden/p/10438499.html">Linux内核镜像文件格式与生成过程</a></li><li><a href="http://wiki.csie.ncku.edu.tw/embedded/ARMv8">ARMv8，某台湾高校教师做的wiki</a></li><li><a href="http://www.wowotech.net/armv8a_arch/armv8-a_overview.html">ARMv8-a架构简介</a></li><li><a href="http://www.wowotech.net/armv8a_arch/arm64_initialize_1.html">ARM64的启动过程之（一）：内核第一个脚印</a> （系列文章，推荐阅读）</li><li><a href="http://www.wowotech.net/armv8a_arch/create_page_tables.html">ARM64的启动过程之（二）：创建启动阶段的页表</a></li><li><a href="http://www.wowotech.net/armv8a_arch/__cpu_setup.html">ARM64的启动过程之（三）：为打开MMU而进行的CPU初始化</a></li><li><a href="http://www.wowotech.net/armv8a_arch/turn-on-mmu.html">ARM64的启动过程之（四）：打开MMU</a></li><li><a href="http://www.wowotech.net/armv8a_arch/UEFI.html">ARM64的启动过程之（五）：UEFI</a></li><li><a href="http://www.wowotech.net/armv8a_arch/238.html">ARM64的启动过程之（六）：异常向量表的设定</a></li><li><a href="https://zhuanlan.zhihu.com/p/147481736">ARM-汇编指令集（总结）</a></li><li><a href="https://zhuanlan.zhihu.com/p/84951062">ARM汇编语言 - 简介 [三]</a></li><li><a href="http://blog.shenyuanluo.com/Arm64PushAndPopStack.html">arm64 架构之入栈&#x2F;出栈操作</a> （汇编指令集，推荐阅读）</li><li><a href="https://cloud.tencent.com/developer/article/1856474">MMU是如何完成地址翻译的？</a></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>Linux内核</tag>
      
      <tag>ARM64</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vsomeip与commonAPI的移植与应用</title>
    <link href="/2023/04/14/vsomeip%E4%B8%8EcommonAPI%E7%9A%84%E7%A7%BB%E6%A4%8D%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
    <url>/2023/04/14/vsomeip%E4%B8%8EcommonAPI%E7%9A%84%E7%A7%BB%E6%A4%8D%E4%B8%8E%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="vsomeip与CommonAPI的移植与应用"><a href="#vsomeip与CommonAPI的移植与应用" class="headerlink" title="vsomeip与CommonAPI的移植与应用"></a>vsomeip与CommonAPI的移植与应用</h1><h3 id="1-vsomeip-交叉编译与安装"><a href="#1-vsomeip-交叉编译与安装" class="headerlink" title="1. vsomeip 交叉编译与安装"></a>1. vsomeip 交叉编译与安装</h3><h4 id="1-1-说明"><a href="#1-1-说明" class="headerlink" title="1.1 说明"></a>1.1 说明</h4><p>vsomeip是一个SOME&#x2F;IP开源协议栈。如图1所示，boost库为vsomeip的必须依赖项，因此编译安装vsomeip的前提是将boost依赖库交叉编译完成。</p><img src="/2023/04/14/vsomeip%E4%B8%8EcommonAPI%E7%9A%84%E7%A7%BB%E6%A4%8D%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230414132002059.png" class title="image-20230414132002059"><p><em>图1 vsomeip编译安装步骤</em></p><h4 id="1-2-安装版本与资源下载"><a href="#1-2-安装版本与资源下载" class="headerlink" title="1.2 安装版本与资源下载"></a>1.2 安装版本与资源下载</h4><p>本次编译安装的软件版本是boost1.74和vsomeip3.1.20。如图2所示。</p><blockquote><p> <a href="https://boostorg.jfrog.io/ui/native/main/release/1.74.0/source">boost库下载地址</a></p></blockquote><img src="/2023/04/14/vsomeip%E4%B8%8EcommonAPI%E7%9A%84%E7%A7%BB%E6%A4%8D%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230414132216749.png" class title="image-20230414132216749"><p><em>图2 下载boost库</em></p><p>进入boost压缩包放置文件夹，使用以下指令解压boost压缩包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -zxvf ./boost1_74_0.tar.gz<br></code></pre></td></tr></table></figure><p>打开终端，输入以下指令下载vsomeip源文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/GENIVI/vsomeip.git<br></code></pre></td></tr></table></figure><h4 id="1-3-交叉编译boost库"><a href="#1-3-交叉编译boost库" class="headerlink" title="1.3 交叉编译boost库"></a>1.3 交叉编译boost库</h4><p>运行 <code>sh ./bootstrap.sh</code>，程序将在boost文件夹生成b2可执行程序和配置文件project-config.jam</p><img src="/2023/04/14/vsomeip%E4%B8%8EcommonAPI%E7%9A%84%E7%A7%BB%E6%A4%8D%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230414144307974.png" alt="image-20230414144307974" style="zoom:50%;"><p><em>图3 在终端中运行bootstrap.sh</em></p><p>然后编辑project-config.jam，修改地方有两处，第一处为将工具链设置为S32G处理器的arm64编译工具链；第二处为简化安装，只编译vsomeip所依赖的库，log，thread和system。</p><blockquote><p>tips：请注意空格</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># @file :project-config.jam</span><br><span class="hljs-comment"># ......</span><br><span class="hljs-keyword">if</span> ! gcc <span class="hljs-keyword">in</span> [ feature.values &lt;toolset&gt; ]<br>&#123;<br>    <span class="hljs-comment">#using gcc ;</span><br>    <span class="hljs-comment"># 修改处1:使用S32G的arm-g++编译器</span><br>    <span class="hljs-comment"># 注意空格</span><br>    using gcc : arm  : &lt;your <span class="hljs-built_in">dir</span>&gt;/gcc-arm-10.2-2020.11-x86_64-aarch64-none-linux-gnu/bin/aarch64-none-linux-gnu-g++ ;  <br>&#125;<br><span class="hljs-comment"># ......</span><br><span class="hljs-comment"># 修改处2：只编译vsomeip需要用到的库，log thread system</span><br>libraries = --with-log --with-thread --with-system ;<br><span class="hljs-comment"># ......</span><br></code></pre></td></tr></table></figure><p>运行b2程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">./b2 abi=aapcs toolset=gcc-arm<br><span class="hljs-comment"># 最后将boost库安装到你的目标文件夹</span><br><span class="hljs-built_in">mkdir</span> install<br>./b2 install --prefix=./install<br></code></pre></td></tr></table></figure><p>安装完成后，install文件夹将包含include与lib两个文件夹。</p><blockquote><p>使用file指令可以查看是否正确编译为arm架构boost库</p></blockquote><h4 id="1-4-交叉编译vsomeip库"><a href="#1-4-交叉编译vsomeip库" class="headerlink" title="1.4 交叉编译vsomeip库"></a>1.4 交叉编译vsomeip库</h4><p>修改CMakeLists.txt，如下所示，也可以将boost库的安装路径添加到环境变量PATH中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># @file: CMakeList.txt</span><br><br><span class="hljs-comment"># step1 指定boost路径</span><br><span class="hljs-comment"># 修改 cmakelists.txt</span><br><br><span class="hljs-comment"># Boost</span><br><span class="hljs-comment"># 指定 ARM libboost库路径</span><br><span class="hljs-comment"># &lt;PackageName&gt;_ROOT  优先在当前路径下找</span><br><span class="hljs-built_in">set</span>(BOOST_ROOT &lt;your libboost_1.74_installed <span class="hljs-built_in">dir</span>&gt;)<br></code></pre></td></tr></table></figure><p>然后将工具链设置为S32G处理器的arm64编译工具链，可以在终端中输入如下指令，临时修改系统默认编译器，这种方法在关闭终端后，需要重新设置。用户也可以修改<code>.bashrc</code>文件来永久将S32G编译器设置为系统默认编译器。使用指令<code>sudo vim ~/.bashrc</code>，然后在bashrc中输入上述指令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># step2：修改编译器</span><br><span class="hljs-comment"># 在 terminal</span><br><span class="hljs-built_in">export</span> CC=&lt;your <span class="hljs-built_in">dir</span>&gt;/gcc-arm-10.2-2020.11-x86_64-aarch64-none-linux-gnu/bin/aarch64-none-linux-gnu-gcc<br><span class="hljs-built_in">export</span> CXX=&lt;your <span class="hljs-built_in">dir</span>&gt;/gcc-arm-10.2-2020.11-x86_64-aarch64-none-linux-gnu/bin/aarch64-none-linux-gnu-g++<br></code></pre></td></tr></table></figure><p>cmake编译，编译安装完成后，install文件夹包含 etc， include与lib三个文件夹。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># step3 cmake</span><br><span class="hljs-built_in">mkdir</span> build install<br><span class="hljs-built_in">cd</span> ./build<br>cmake -DENABLE_SIGNAL_HANDLING=1 -DDIAGNOSIS_ADDRESS=0x10 -DCMAKE_INSTALL_PREFIX=./install ..<br><span class="hljs-comment"># step4 make</span><br>make<br></code></pre></td></tr></table></figure><p>编译测试例程并测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在helloworld文件夹</span><br>make<br><br><span class="hljs-comment"># 可以通过 file 指令 查看 可执行文件是否为 arm 架构</span><br>file ./hello_world_service<br><span class="hljs-comment"># 结果：</span><br>./hello_world_service: ELF 64-bit LSB shared object, ARM aarch64, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux-aarch64.so.1, <span class="hljs-keyword">for</span> GNU/Linux 3.7.0, with debug_info, not stripped<br></code></pre></td></tr></table></figure><h4 id="1-5-S32G开发板例程演示"><a href="#1-5-S32G开发板例程演示" class="headerlink" title="1.5 S32G开发板例程演示"></a>1.5 S32G开发板例程演示</h4><p> 将文件导入开发板有两种方式，用户选择其中之一即可，如图4所示。（scp命令亦可）</p><img src="/2023/04/14/vsomeip%E4%B8%8EcommonAPI%E7%9A%84%E7%A7%BB%E6%A4%8D%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230414134333961.png" class title="image-20230414134333961"> <p><em>图4 传输文件的两种方式</em></p><p>通过filezilla传输文件时，连接网线后，输入开发板的IP地址和登录用户名，点击下方的连接即可，如图5。需要注意的是，开发板IP地址和PC的IP地址需要在同一网段。与此同时，建议将需传输文件打包成压缩包，否则可能会出现程序动态链接库强制转换为静态库问题。</p><img src="/2023/04/14/vsomeip%E4%B8%8EcommonAPI%E7%9A%84%E7%A7%BB%E6%A4%8D%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230414134456367.png" class title="image-20230414134456367"><p><em>图5 filezilla连接设置</em></p><p>将boost和vsomeip中的库文件添加到系统 &#x2F;usr&#x2F;lib下，然后分终端同时打开hello_world_service和hello_world_client，运行结果如图6所示。</p><img src="/2023/04/14/vsomeip%E4%B8%8EcommonAPI%E7%9A%84%E7%A7%BB%E6%A4%8D%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230414134538447.png" alt="image-20230414134538447" style="zoom:50%;"><p><em>图6 例程运行结果</em></p><h3 id="2-vsomeip跨设备通信"><a href="#2-vsomeip跨设备通信" class="headerlink" title="2. vsomeip跨设备通信"></a>2. vsomeip跨设备通信</h3><h4 id="2-1-说明"><a href="#2-1-说明" class="headerlink" title="2.1 说明"></a>2.1 说明</h4><p>vsomeip的通信过程如图7所示。在上一节的例程中，服务端与客户端位于同一台主机上，两者的通信过程即图中的左半部分，底层为通过socket完成的进程间通信。本节将简述使用vsomeip进行两台嵌入式linux设备之间的通信例程，演示真正意义上的SOME&#x2F;IP通信。</p><img src="/2023/04/14/vsomeip%E4%B8%8EcommonAPI%E7%9A%84%E7%A7%BB%E6%A4%8D%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230414134804582.png" alt="image-20230414134804582" style="zoom:50%;"><p><em>图7 vsomeip通信过程</em></p><p>本次使用的两台嵌入式设备分别为NXP S32G开发板以及基于NXP iMX8芯片的飞凌嵌入式开发板。S32G作为客户端，iMX8作为服务端。使用一台TP-Link路由器将两者连接，再使用一根网线连接路由器至电脑，如图8所示。</p><img src="/2023/04/14/vsomeip%E4%B8%8EcommonAPI%E7%9A%84%E7%A7%BB%E6%A4%8D%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230414134854586.png" alt="image-20230414134854586" style="zoom:50%;"><p><em>图8 设备连接图</em></p><h4 id="2-2-IP设置与通信测试"><a href="#2-2-IP设置与通信测试" class="headerlink" title="2.2 IP设置与通信测试"></a>2.2 IP设置与通信测试</h4><p>将各设备分别设置为以下IP地址：</p><ul><li><p>笔记本电脑：192.168.100.50</p></li><li><p>S32G开发板：192.168.100.100</p></li><li><p>iMX8开发板：192.168.100.60</p></li></ul><p>IP地址可通过ifconfig设置。硬件连接与IP地址设置完成后，使用ping和arping指令进行通信测试，然后使用ssh指令分别远程登录2台嵌入式linux设备。</p><h4 id="2-3-vsomeip通信参数设置"><a href="#2-3-vsomeip通信参数设置" class="headerlink" title="2.3 vsomeip通信参数设置"></a>2.3 vsomeip通信参数设置</h4><p>服务端与客户端分别需要配置一个json文件。以iMX8服务端为例，service.json文件如下。其中<code>192.168.100.50</code>为当前嵌入式设备的IP地址。</p><p> “name” : “World”：名称需要与VSOMEIP_APPLICATION_NAME读入的名称一致，注意不是程序文件名称。</p><p>“service” : “0x1234”, “instance” : “0x5678” ：需要与程序中的地址对应。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;unicast&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;192.168.100.50&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;logging&quot;</span> <span class="hljs-punctuation">:</span><br>    <span class="hljs-punctuation">&#123;</span> <br>        <span class="hljs-attr">&quot;level&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;debug&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;console&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;true&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;file&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;enable&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;false&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;path&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/tmp/vsomeip.log&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;dlt&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;false&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;applications&quot;</span> <span class="hljs-punctuation">:</span> <br>    <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;World&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;id&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0x1212&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;services&quot;</span> <span class="hljs-punctuation">:</span><br>    <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;service&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0x1234&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;instance&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0x5678&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;unreliable&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;30509&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;routing&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;World&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;service-discovery&quot;</span> <span class="hljs-punctuation">:</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;enable&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;true&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;multicast&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;224.224.224.245&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;port&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;30490&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;protocol&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;udp&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;initial_delay_min&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;10&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;initial_delay_max&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;100&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;repetitions_base_delay&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;200&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;repetitions_max&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;ttl&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;cyclic_offer_delay&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2000&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;request_response_delay&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1500&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>为了方便运行，可以参考如下写一个快速运行的脚本。<code>touch run_service.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># @file: run_service.sh</span><br><span class="hljs-comment"># run vsomeip service</span><br><span class="hljs-comment"># set multicast</span><br>sudo route add -nv 224.224.224.245 dev enxd03745a6a072<br><span class="hljs-built_in">export</span> VSOMEIP_CONFIGURATION=./service.json<br><span class="hljs-built_in">export</span> VSOMEIP_APPLICATION_NAME=World<br>./response-sample<br></code></pre></td></tr></table></figure><p>其中，第一行的作用为设置多播地址，enxd03745a6a072为设备网卡名称，通过ifconfig查看，并做对应修改。</p><h4 id="2-4-实例演示"><a href="#2-4-实例演示" class="headerlink" title="2.4 实例演示"></a>2.4 实例演示</h4><p>在服务端终端中输入 <code>sudo sh ./run_service.sh</code>启动vsomeip服务端程序。类似的在另一个设备中启动客户端程序。需要传输的数据自行在程序中设定，本程序运行结果如下。</p><img src="/2023/04/14/vsomeip%E4%B8%8EcommonAPI%E7%9A%84%E7%A7%BB%E6%A4%8D%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230414135716470.png" alt="image-20230414135716470" style="zoom:70%;"><p><em>图9 程序运行结果</em></p><h3 id="3-commonAPI交叉编译与安装"><a href="#3-commonAPI交叉编译与安装" class="headerlink" title="3. commonAPI交叉编译与安装"></a>3. commonAPI交叉编译与安装</h3><h4 id="3-1-说明"><a href="#3-1-说明" class="headerlink" title="3.1 说明"></a>3.1 说明</h4><p>CommonAPI是一个开源的RPC（远程过程调用）框架，其封装了底层通信协议，使得上层应用接口与底层通信协议解耦，具体原理可参考官方文档。目前底层可以支持SOME&#x2F;IP和D-Bus两种协议，本文进行底层为SOME&#x2F;IP协议的CommonAPI编译安装与演示。</p><p>整体编译安装过程如图10所示，首先通过官方提供的代码生成器commonapi_core_generator和commonapi_someip_generator将FDL接口描述文件转换为C++文件，此步在X86_64平台上完成；然后将boost、vsomeip、capicxx-core-runtime以及capicxx-someip-runtime交叉编译至ARM64平台上；最后借助ARM交叉编译工具链，即可编译出可在S32G开发板上运行的程序。</p><img src="/2023/04/14/vsomeip%E4%B8%8EcommonAPI%E7%9A%84%E7%A7%BB%E6%A4%8D%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230414135941356.png" alt="image-20230414135941356" style="zoom:50%;"><p><em>图10 交叉编译安装CommonAPI流程</em></p><h4 id="3-2-安装版本与资源下载"><a href="#3-2-安装版本与资源下载" class="headerlink" title="3.2 安装版本与资源下载"></a>3.2 安装版本与资源下载</h4><table><thead><tr><th>时间</th><th>2021-08-25</th></tr></thead><tbody><tr><td>安装软件版本</td><td>capicxx-core-runtime 版本 3.2.0<br>capicxx-someip-runtime 版本 3.2.0<br>commonapi_core_generator 版本 3.2.0.1<br>commonapi_someip_generator 版本 3.2.0.1<br>vsomeip 3.1.20.3</td></tr></tbody></table><p>下载地址：</p><ul><li><a href="https://github.com/GENIVI/capicxx-core-runtime">capicxx-core-runtime</a></li><li><a href="https://github.com/GENIVI/capicxx-someip-runtime">capicxx-someip-runtime</a></li><li><a href="https://github.com/GENIVI/capicxx-core-tools/releases/tag/3.2.0.1">capicxx-core-tools</a></li><li><a href="https://github.com/GENIVI/capicxx-someip-tools/releases">capicxx-someip-tools</a></li></ul><h4 id="3-3-交叉编译capicxx-core-runtime"><a href="#3-3-交叉编译capicxx-core-runtime" class="headerlink" title="3.3 交叉编译capicxx-core-runtime"></a>3.3 交叉编译capicxx-core-runtime</h4><p>首先需要设置交叉编译工具链，如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> CC=&lt;S32G编译器目录&gt;/gcc-arm-10.2-2020.11-x86_64-aarch64-none-linux-gnu/bin/aarch64-none-linux-gnu-gcc<br><span class="hljs-built_in">export</span> CXX=&lt;S32G编译器目录&gt;/gcc-arm-10.2-2020.11-x86_64-aarch64-none-linux-gnu/bin/aarch64-none-linux-gnu-g++<br></code></pre></td></tr></table></figure><p>然后进行构建，如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> build arm64_core_install<br><span class="hljs-built_in">cd</span> build<br>cmake -DCMAKE_INSTALL_PREFIX=../arm64_core_install ..<br>make<br>sudo make install<br></code></pre></td></tr></table></figure><p>编译完成后，使用tree指令查看arm64_core_install文件下，如下。</p><img src="/2023/04/14/vsomeip%E4%B8%8EcommonAPI%E7%9A%84%E7%A7%BB%E6%A4%8D%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230414140718046.png" class title="image-20230414140718046"><p><em>图11 install目录</em></p><h4 id="3-4-交叉编译capicxx-someip-runtime"><a href="#3-4-交叉编译capicxx-someip-runtime" class="headerlink" title="3.4 交叉编译capicxx-someip-runtime"></a>3.4 交叉编译capicxx-someip-runtime</h4><p>capicxx-someip-runtime依赖于boost库与vsomeip库，因此需要修改CMakeLists.txt文件，使之可以顺利找到交叉编译完成的boost和vsomeip库。参照1.3节及1.4节。</p><p>然后进行构建，如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> build arm64_someip_install<br><span class="hljs-built_in">cd</span> build<br>cmake -DCMAKE_INSTALL_PREFIX=../arm64_someip_install ..<br>make<br>sudo make install<br></code></pre></td></tr></table></figure><h4 id="3-5-安装Java环境"><a href="#3-5-安装Java环境" class="headerlink" title="3.5 安装Java环境"></a>3.5 安装Java环境</h4><p>commonapi_core_generator和commonapi_someip_generator代码生成器依赖于JAVA8环境，因此首先需要安装jdk，在终端中输入下述指令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install openjdk-8-jdk<br></code></pre></td></tr></table></figure><blockquote><p>使用 java -version可以查看当前安装的java版本，若已安装高版本java，请降级，高版本java会导致代码生成出错。仅针对目前安装版本</p></blockquote><h4 id="3-6-S32G开发板例程演示"><a href="#3-6-S32G开发板例程演示" class="headerlink" title="3.6 S32G开发板例程演示"></a>3.6 S32G开发板例程演示</h4><p>本例程为helloworld演示。建立helloworld例程目录如下，将代码生成器<code>commonapi_core_generator</code>和<code>commonapi_someip_generator</code>放置在cgen文件夹下，新建<code>HelloWorld.fidl</code>和<code>HelloWorld.fdel</code>文件并放置于fidl文件，src-gen文件夹在运行代码生成器后自动生成，相关信息参考图12。</p><img src="/2023/04/14/vsomeip%E4%B8%8EcommonAPI%E7%9A%84%E7%A7%BB%E6%A4%8D%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230414141549265.png" class title="image-20230414141549265"><p><em>图12 helloworld例程目录释义</em></p><ul><li>FDL文件代码生成</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># @file: HelloWorld.fidl</span><br>package commonapi<br>interface HelloWorld &#123;<br>  version &#123;major 1 minor 0&#125;<br>  method sayHello &#123;<br>    <span class="hljs-keyword">in</span> &#123;<br>      String name<br>    &#125;<br>    out &#123;<br>      String message<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># @file: HelloWorld.fdel</span><br>import <span class="hljs-string">&quot;platform:/plugin/org.genivi.commonapi.someip/deployment/CommonAPI-SOMEIP_deployment_spec.fdepl&quot;</span><br>import <span class="hljs-string">&quot;HelloWorld.fidl&quot;</span><br>define org.genivi.commonapi.someip.deployment <span class="hljs-keyword">for</span> interface commonapi.HelloWorld &#123;<br>SomeIpServiceID = 4660<br>method sayHello &#123;<br>SomeIpMethodID = 123<br>&#125;<br>&#125;<br><span class="hljs-comment"># 官方例程有误，按照如下修改</span><br>define org.genivi.commonapi.someip.deployment <span class="hljs-keyword">for</span> provider as MyService &#123;<br>instance commonapi.HelloWorld &#123;<br>InstanceId = <span class="hljs-string">&quot;test&quot;</span><br>SomeIpInstanceID = 22136<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>代码生成器commonapi_core_generator目录如图13所示，可根据平台选择对应的生成器，64位ubuntu选择commonapi-core-generator-linux-x86_64。然后运行如下指令，生成C++代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">./commonapi_core_generator/commonapi-core-generator-linux-x86_64 -sk ./fidl/HelloWorld.fidl<br>./commonapi_someip_generator/commonapi-someip-generator-linux-x86_64 ./fidl/HelloWorld.fdepl<br></code></pre></td></tr></table></figure><img src="/2023/04/14/vsomeip%E4%B8%8EcommonAPI%E7%9A%84%E7%A7%BB%E6%A4%8D%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230414142107302.png" class title="image-20230414142107302"><p><em>图13 commonapi_core_generator目录</em></p><ul><li>指定交叉编译工具链</li></ul><p>修改CMakeLists.txt，如图14所示。</p><img src="/2023/04/14/vsomeip%E4%B8%8EcommonAPI%E7%9A%84%E7%A7%BB%E6%A4%8D%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230414144023413.png" alt="image-20230414144023413" style="zoom:50%;"><p><em>图14 helloworld CMakeLists.txt文件</em></p><p>修改arm_linux_setup.cmake，ARM_DIR等针对修改。</p><img src="/2023/04/14/vsomeip%E4%B8%8EcommonAPI%E7%9A%84%E7%A7%BB%E6%A4%8D%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230414143909525.png" class title="image-20230414143909525"><p><em>图15 helloworld arm_linux_setup.cmake文件</em></p><ul><li>可执行文件生成及运行</li></ul><p>安装如下指令构建可执行文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> build<br>cmake -DCMAKE_TOOLCHAIN_FILE=../arm_linux_setup.cmake ..<br><span class="hljs-comment">#若上述指令提示无法找到boost库，可换用export C和CXX方式，然后再# 执行cmake</span><br>cmake..<br>make<br></code></pre></td></tr></table></figure><blockquote><p>可使用file指令查看可执行文件类型信息</p></blockquote><p>将文件传输至开发板中，并将编译好的库文件添加到开发板 &#x2F;usr&#x2F;lib文件夹中，然后分终端同时打开HelloWorldService和HelloWorldClient，运行结果如图14所示</p><img src="/2023/04/14/vsomeip%E4%B8%8EcommonAPI%E7%9A%84%E7%A7%BB%E6%A4%8D%E4%B8%8E%E5%BA%94%E7%94%A8/image-20230414142807201.png" alt="image-20230414142807201" style="zoom:50%;"><p><em>图14 helloworld运行结果</em></p><h3 id="4-附录1—问题及解决方案"><a href="#4-附录1—问题及解决方案" class="headerlink" title="4. 附录1—问题及解决方案"></a>4. 附录1—问题及解决方案</h3><p>本节将记录在vsomeip和commonAPI的安装编译过程中，碰到的一些问题及对应的解决方案，仅供参考。</p><ul><li><strong>可执行文件生成及运行X86-64环境下安装libboost库时的boost版本问题</strong></li></ul><p>vsomeip官方安装文档过旧，ubuntu20.04源中boost版本已经更新，不能直接使用文档中的指令。解决方案有两个，其一是在boost库中下载对应版本，编译运行；其二则是在终端中使用 <code>sudo apt-cache search libboost</code> 查找新版本并安装。 </p><ul><li><strong>在终端中 “ctrl+c” 停止vsomeip程序后，再次启动程序，提示vsomeip无法初始化成功</strong></li></ul><p>原因是在停止程序后，<code>/tmp/vsomeip.lck</code>没有被正确删除。解决方案有以下几种，其一是手动删除与&#x2F;tmp文件下与vsomeip相关的内容；其二是关闭shell，在重新打开；最后是在安装vsomeip时，cmake阶段使能<code>ENABLE_SIGNAL_HANDLING</code>，这一步在前述安装指南中已默认操作。</p><ul><li><strong>启动vsomeip，程序报 <code>configuration module could not be load</code> 错误</strong></li></ul><p>其原因是新安装vsomeip后 ，没有在动态链接库配置目录中创建连接及缓存文件，可以使用 <code>sudo ldconfig</code> 命令刷新库缓存。</p><ul><li><p><strong>CMakeList中 <code>find_package()</code> 提示找不到vsomeip包</strong></p><p>其原因是vsomeip3.x版本后，包名变更为vsomeip3，因此可使用 <code>find_package(vsomeip3 REQUIRED)</code></p></li><li><p><strong>CommonAPI中，使用代码生成器无法将FDL文件转换为C++代码，或者转换后，工程无法编译通过</strong></p></li></ul><p>其原因是CommonAPI C++代码生成器与CommonAPI runtime的版本不匹配，此原因非常隐蔽，程序不会给出任何关于此方面的提示。解决方案是不要在GENIVI官网下载，去github上均下载最新版本。</p><ul><li><strong>CommonAPI官方例程中，FDL接口描述文件出错，无法顺利生成C++代码</strong></li></ul><p>原因是例程FDL文件中语法有误，按照前述文档中红色标记代码修改。</p><ul><li><strong>CommonAPI Java版本问题</strong></li></ul><p>目前CommonAPI代码生成器只支持java8环境，若安装java高版本，则需要手动降级，相关教程可参考：</p><p><a href="https://docs.datastax.com/en/jdk-install/doc/jdkinstall/installOpenJdkDeb.html">请点击</a></p><ul><li><strong>CommonAPI 直接运行例程，无法通过cmake生成makefile</strong></li></ul><p>CMakeLists.txt附加了需要D-Bus相关内容，而系统中未安装，可以对应修改删减CMakeLists.txt，也可参考如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># @file: example_E2，Attributes，CMakeLists</span><br>cmake_minimum_required(VERSION 2.8)<br><span class="hljs-built_in">set</span>(PRJ_NAME E02Attributes)<br>project(PRJ_NAME)<br><span class="hljs-built_in">set</span>(CMAKE_CXX_FLAGS <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;CMAKE_CXX_FLAGS&#125;</span> -pthread -std=c++0x&quot;</span>)<br>include_directories(<br>  src-gen<br>  /usr/local/include/CommonAPI-3.2<br>  /usr/local/include/vsomeip<br>  <span class="hljs-variable">$&#123;COMMONAPI_INCLUDE_DIRS&#125;</span><br>  <span class="hljs-variable">$&#123;COMMONAPI_SOMEIP_INCLUDE_DIRS&#125;</span><br>  <span class="hljs-variable">$&#123;DBus_INCLUDE_DIRS&#125;</span><br>  <span class="hljs-variable">$&#123;VSOMEIP_INCLUDE_DIRS&#125;</span><br>)<br>link_directories(<br>  /usr/local/lib<br>)<br><span class="hljs-comment"># 找包</span><br>find_package(CommonAPI 3.2.0 REQUIRED CONFIG NO_CMAKE_PACKAGE_REGISTRY)<br>find_package(CommonAPI-SomeIP 3.2.0 REQUIRED)<br>find_package(vsomeip3 3.1.0 REQUIRED)<br><span class="hljs-comment"># Source Files </span><br><span class="hljs-built_in">set</span>(PRJ_SRC_PATH src)<br><span class="hljs-built_in">set</span>(PRJ_SRC_GEN_PATH src-gen)<br><span class="hljs-built_in">set</span>(PRJ_SRC_GEN_COMMONAPI_PATH <span class="hljs-variable">$&#123;PRJ_SRC_GEN_PATH&#125;</span>/v1/commonapi/examples) <br><span class="hljs-built_in">set</span>(PRJ_NAME_CLIENT <span class="hljs-variable">$&#123;PRJ_NAME&#125;</span>Client)<br><span class="hljs-built_in">set</span>(PRJ_NAME_SERVICE <span class="hljs-variable">$&#123;PRJ_NAME&#125;</span>Service)<br><span class="hljs-comment"># Application</span><br>FILE(GLOB PRJ_PROXY_GEN_SRCS <span class="hljs-variable">$&#123;PRJ_SRC_GEN_COMMONAPI_PATH&#125;</span>/*Proxy.cpp)<br>FILE(GLOB PRJ_STUB_GEN_SRCS <span class="hljs-variable">$&#123;PRJ_SRC_GEN_COMMONAPI_PATH&#125;</span>/*Stub*.cpp)<br>FILE(GLOB PRJ_STUB_IMPL_SRCS <span class="hljs-variable">$&#123;PRJ_SRC_PATH&#125;</span>/*Stub*.cpp)<br><span class="hljs-built_in">set</span>(PRJ_CLIENT_SRCS <span class="hljs-variable">$&#123;PRJ_SRC_PATH&#125;</span>/<span class="hljs-variable">$&#123;PRJ_NAME_CLIENT&#125;</span>.cpp <span class="hljs-variable">$&#123;PRJ_PROXY_GEN_SRCS&#125;</span>)<br><span class="hljs-built_in">set</span>(PRJ_SERVICE_SRCS <span class="hljs-variable">$&#123;PRJ_SRC_PATH&#125;</span>/<span class="hljs-variable">$&#123;PRJ_NAME_SERVICE&#125;</span>.cpp <span class="hljs-variable">$&#123;PRJ_SRC_PATH&#125;</span>/<span class="hljs-variable">$&#123;PRJ_NAME&#125;</span>StubImpl.cpp <span class="hljs-variable">$&#123;PRJ_STUB_GEN_SRCS&#125;</span> <span class="hljs-variable">$&#123;PRJ_STUB_IMPL_SRCS&#125;</span>)<br><span class="hljs-comment"># 链接库名</span><br><span class="hljs-built_in">set</span>(LINK_LIBRARIES CommonAPI CommonAPI-SomeIP vsomeip3)<br><span class="hljs-comment"># Build Client</span><br>add_executable(<span class="hljs-variable">$&#123;PRJ_NAME_CLIENT&#125;</span> <span class="hljs-variable">$&#123;PRJ_CLIENT_SRCS&#125;</span>)<br>target_link_libraries(<span class="hljs-variable">$&#123;PRJ_NAME_CLIENT&#125;</span> <span class="hljs-variable">$&#123;LINK_LIBRARIES&#125;</span>)<br><span class="hljs-comment"># Build service</span><br>add_executable(<span class="hljs-variable">$&#123;PRJ_NAME_SERVICE&#125;</span> <span class="hljs-variable">$&#123;PRJ_SERVICE_SRCS&#125;</span>)<br>target_link_libraries(<span class="hljs-variable">$&#123;PRJ_NAME_SERVICE&#125;</span> <span class="hljs-variable">$&#123;LINK_LIBRARIES&#125;</span>)<br></code></pre></td></tr></table></figure><ul><li><strong>可执行文件传输问题</strong></li></ul><p>如前所述，可执行文件通过filezilla直接传输文件时，会不明原因的将动态链接库转换为静态链接库，运行时提示“格式错误”。使用file指令查看时，可发现如下差异。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># A 使用压缩包传输</span><br>ELF 64-bit LSB executable, ARM aarch64, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux-aarch64.so.1, BuildID[sha1]=0c126f1b17601d33513b52c02a5e63358d912512, <span class="hljs-keyword">for</span> GNU/Linux 3.14.0, with debug_info, not stripped<br><span class="hljs-comment"># B 直接传输</span><br>ELF 64-bit LSB executable, ARM aarch64, version 1 (SYSV), statically linked, interpreter *empty*, stripped<br></code></pre></td></tr></table></figure><p>解决方案则是使用压缩包传输或者直接通过TF卡拷贝。</p><ul><li><strong>部分网络经验</strong></li></ul><p>在编写fdepl文件时，要先写attribute，在写method，再写broadcast，不能像fidl文件，穿插着写，否则编译不过。</p><p>在运行程序时，有时候会遇到无法连接的问题，需要把 <code>/tmp/vsomeip-0 </code>这一系列文件删除，否则无法连接。</p><h3 id="5-附录2—vsomeip与commonAPI的对比"><a href="#5-附录2—vsomeip与commonAPI的对比" class="headerlink" title="5. 附录2—vsomeip与commonAPI的对比"></a>5. 附录2—vsomeip与commonAPI的对比</h3><table><thead><tr><th align="center"></th><th align="left">commonAPI</th><th align="left">vsomeip</th></tr></thead><tbody><tr><td align="center">基本描述</td><td align="left">基于vsomeip（可选）实现的RPC框架（远程过程调用）<br>CommonAPI C++是用于开发分布式应用程序的标准C++ API规范，该分布式应用程序通过中间件进行进程间通信</td><td align="left">实现了SOME&#x2F;IP协议栈，构建了SOME&#x2F;IP的共享库（libvsomeip3.so）</td></tr><tr><td align="center">依赖项</td><td align="left">多，以vsomeip底层为例：<br>1. vsomeip<br>2. commonAPI runtime<br>3. commonAPI-SomeIP runtime<br>4. C++代码生成工具</td><td align="left">少<br>boost</td></tr><tr><td align="center">接口描述语言</td><td align="left">需要<br>FrancalDL接口描述语言</td><td align="left">不需要</td></tr><tr><td align="center">优劣势对比</td><td align="left">优点：<br>1. 接口使用IDL描述，基本通信不需要联调，主要开发工作是实现服务的接口，相当于填充业务逻辑，工作量小<br>2. 封装通信协议与中间件，使得应用程序的C++接口独立于底层IPC，也就是IP Common API允许针对开发的应用程序（即使用C++的客户端和服务器）可以与不同的IPC后端链接（someip，或D-Bus），而无需更改应用程序代码<br>3. 屏蔽了网络通信的实现，让客户端可以像调用本地接口一样调用服务端提供的接口<br>缺点：<br>依赖项多，自由度低</td><td align="left">优点：<br>依赖项少，自由度高<br>劣势：<br>1.  没有实现数据结构的序列化，仅仅涵盖了一些IP协议与服务发现，即Payload的打包与解析需要自己写，传递消息内容为复杂数据结构时，打包、解析和联调麻烦，且工作量大<br>2. 对于AUTOSAR系统，Payload要遵循AUTOSAR规范进行序列化，对于非AUTOSAR系统，可以遵循AUTOSAR规范进行序列化，也可以采用其他序列化方式如常用的Google Protocol Buffer、JSON等</td></tr></tbody></table><h3 id="6-附录3—如何写fidl和fdepl文件"><a href="#6-附录3—如何写fidl和fdepl文件" class="headerlink" title="6. 附录3—如何写fidl和fdepl文件"></a>6. 附录3—如何写fidl和fdepl文件</h3><p><strong>主要参考Franca语法以及官方提供的7个例程</strong></p><ul><li>写fidl和fdepl文件的最好方法是下载一个 Eclipse，并使用它的自动配置功能，它将插入所有必须的元素，剩下的自己填一下即可。</li><li>方法标识符：SomeIpMethodID，SomeIpGetterID，SomeIpSetterID 必须唯一，且在1~32767之间。</li><li>事件标识符：SomeIpEventID，SomeIpNotifierID，唯一，且在 32769~65534之间。</li><li>SomeIpEventGroups 至少为1</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>网络</tag>
      
      <tag>原创</tag>
      
      <tag>车载以太网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vsomeip如何进行跨网段通信</title>
    <link href="/2023/04/14/vsomeip%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E8%B7%A8%E7%BD%91%E6%AE%B5%E9%80%9A%E4%BF%A1/"/>
    <url>/2023/04/14/vsomeip%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E8%B7%A8%E7%BD%91%E6%AE%B5%E9%80%9A%E4%BF%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="vsomeip如何进行跨网段通信"><a href="#vsomeip如何进行跨网段通信" class="headerlink" title="vsomeip如何进行跨网段通信"></a>vsomeip如何进行跨网段通信</h1><h3 id="1-说明"><a href="#1-说明" class="headerlink" title="1. 说明"></a>1. 说明</h3><p>如图1所示，本次将演示vsomeip的跨设备跨网段实验。左边i.MX8M开发板将运行客户端程序，IP地址设置为<code>192.168.100.60</code>，子网掩码为<code>255.255.255.0</code>。相应的，右边开发板运行服务端程序，IP地址设置为<code>192.168.90.60</code>。使用一台搭载Ubuntu20.04系统的笔记本电脑作为网关，分别使用2个USB有线网卡连接开发板。众所周知，两个终端不在同一网段，无法直接通信，因此需要使用一台Linux系统作为网关，连接两台终端，借助网关的路由转发功能进行通信。笔记本电脑的eth0和eth1，IP地址分别为<code>192.168.100.50</code>和<code>192.168.90.10</code>。欲实现vsomeip跨设备跨网段通信，需要依次完成单播跨网段通信、多播转发等工作，以下将分步骤详细阐述。</p><img src="/2023/04/14/vsomeip%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E8%B7%A8%E7%BD%91%E6%AE%B5%E9%80%9A%E4%BF%A1/image-20230414101836940.png" class title="image-20230414101836940"><center>图1 设备连接图</center><h3 id="2-单播通信设置"><a href="#2-单播通信设置" class="headerlink" title="2. 单播通信设置"></a>2. 单播通信设置</h3><h4 id="2-1-打开网关单播转发功能"><a href="#2-1-打开网关单播转发功能" class="headerlink" title="2.1 打开网关单播转发功能"></a>2.1 打开网关单播转发功能</h4><p>出于安全考虑，Linux系统默认禁止数据包转发功能。所谓转发即根据数据包的IP地址将数据包从一块网卡发送到本机的另一块网卡的过程。打开Linux系统IP转发功能，需要配置Linux内核参数<code>net.ipv4.ip_forward</code>。该参数表征Linux系统当前对IP转发功能的支持情况，权限为可读可写，其值为0时表示禁止IP转发，其值为1则表示IP转发功能以打开，如图2所示。</p><img src="/2023/04/14/vsomeip%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E8%B7%A8%E7%BD%91%E6%AE%B5%E9%80%9A%E4%BF%A1/image-20230414101956914.png" class title="image-20230414101956914"><center>图2 查看Linux系统IP转发功能是否打开</center><p>配置Linux内核中的<code>net.ipv4.ip_forward</code>参数存在两种方式。其一为临时设置，系统重启或者对系统网络服务重启后均失效。通过修改内核参数的映射文件即可，对应的指令为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs BASH"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;1&#x27;</span> &gt; /proc/sys/net/ipv4/ip_forward<br></code></pre></td></tr></table></figure><p>其二为永久设置，使用vi打开<code>/etc/sysctl.conf</code>文件，并取消如图3所示的红色方框处注释，保存后，使用<code>sysctl -p</code>指令进行刷新即可。</p><p>为了防止网关拦截或丢弃数据包，设置rp_filter参数为0。rp_filter参数用于控制内核是否开启对数据包源地址校验。其值0为不开启源地址校验，1为严格反向路径校验，2为松散反向路径校验。**(这一步必须做)**</p><p>另外，ubuntu系统需要关闭防火墙，关闭的指令为 <code>sudo ufw disable</code>。</p><img src="/2023/04/14/vsomeip%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E8%B7%A8%E7%BD%91%E6%AE%B5%E9%80%9A%E4%BF%A1/image-20230414102259547.png" class title="image-20230414102259547"><center>图3 /etc/sysctl.conf文件</center><h4 id="2-2-配置静态路由"><a href="#2-2-配置静态路由" class="headerlink" title="2.2 配置静态路由"></a>2.2 配置静态路由</h4><p>配置静态路由需要用到route指令，常用的参数有add（增加路由）、del（删除路由）、-net（设置到某网段路由）、gw（出口网关IP地址）、dev（出口网关，物理设备名）等，不再赘述。分别在笔记本电脑和i.MX8M开发板上输入如下的指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#  i.MX8M开发板（192.168.100.60）</span><br>route add -net 192.168.90.0/24 gw 192.168.100.50<br><span class="hljs-comment"># i.MX8M开发板（192.168.90.60）</span><br>route add -net 192.168.100.0/24 gw 192.168.90.10<br></code></pre></td></tr></table></figure><p>配置完成后，可使用<code>route -n</code>指令查看，如图4和5所示。</p><img src="/2023/04/14/vsomeip%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E8%B7%A8%E7%BD%91%E6%AE%B5%E9%80%9A%E4%BF%A1/image-20230414103002068.png" class title="image-20230414103002068"><center>图4 i.MX8M开发板（192.168.100.60）</center><img src="/2023/04/14/vsomeip%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E8%B7%A8%E7%BD%91%E6%AE%B5%E9%80%9A%E4%BF%A1/image-20230414103432272.png" class title="image-20230414103432272"><center>图5 i.MX8M开发板（192.168.90.60）</center><h4 id="2-3单播跨网段通信测试"><a href="#2-3单播跨网段通信测试" class="headerlink" title="2.3单播跨网段通信测试"></a>2.3单播跨网段通信测试</h4><p>笔记本电脑的IP地址为<code>192.168.90.50</code>，i.MX8M开发板的IP地址为<code>192.168.100.60</code>，使用ping指令进行测试，如图6所示，结果表明，单播跨网段通信正常。</p><img src="/2023/04/14/vsomeip%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E8%B7%A8%E7%BD%91%E6%AE%B5%E9%80%9A%E4%BF%A1/image-20230414103235815.png" class title="image-20230414103235815"><center>图6 单播跨网段通信测试</center><h3 id="3-路由组播转发设置"><a href="#3-路由组播转发设置" class="headerlink" title="3. 路由组播转发设置"></a>3. 路由组播转发设置</h3><h4 id="3-1-组播转发说明"><a href="#3-1-组播转发说明" class="headerlink" title="3.1 组播转发说明"></a>3.1 组播转发说明</h4><p>vsomeip的服务发现需要使用到组播功能，而在跨网段通信过程中，如何通过S32G进行组播数据转发，是一个首先需要解决的问题。</p><p>查看Linux内核中的组播转发功能是否开启，可以使用指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /proc/sys/net/ipv4/conf/all/mc_forwarding<br></code></pre></td></tr></table></figure><p>需要注意的是，mc_forwarding为只读文件，因此无法使用上文中操作单播路由转发的方式。只有在通过配置，正确打开了Linux组播转发功能，该参数才能变为1。如图7。</p><img src="/2023/04/14/vsomeip%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E8%B7%A8%E7%BD%91%E6%AE%B5%E9%80%9A%E4%BF%A1/image-20230414103405136.png" class title="image-20230414103405136"><center>图7 mc_forwarding组播转发参数</center><p>IP组播模块提供了创建和删除转发缓存的基本功能，但只有通过组播路由协议守护进程（通常是mrouted），依靠路由协议（如静态路由、OSPF、RIP、PIM）来生成转发缓存，才能真正实现组播功能。组播较为复杂，具体实现原理等可自行查阅相关资料。具体到组播转发功能，简言之，需要具备的前提条件为组播转发缓存和组播路由协议守护进程。组播转发缓存（MFC）更新操作完全由与内核交互的外部用户模式进程提供服务。内核是否支持组播功能，可通过如图8和9所示的两种方式查看。本次测试使用PIM-SM协议，因此其对应的组播路由协议守护进程可为开源软件pimd。</p><img src="/2023/04/14/vsomeip%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E8%B7%A8%E7%BD%91%E6%AE%B5%E9%80%9A%E4%BF%A1/image-20230414103542718.png" class title="image-20230414103542718"> <center>图8 查看内核是否支持组播（方式一）</center><img src="/2023/04/14/vsomeip%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E8%B7%A8%E7%BD%91%E6%AE%B5%E9%80%9A%E4%BF%A1/image-20230414103610810.png" class title="image-20230414103610810"> <center>图9 查看内核是否支持组播（方式二）</center><h4 id="3-2-pimd的交叉编译及应用"><a href="#3-2-pimd的交叉编译及应用" class="headerlink" title="3.2 pimd的交叉编译及应用"></a>3.2 pimd的交叉编译及应用</h4><p><a href="https://github.com/troglobit/pimd">pimd</a>是一个轻量级、独立的PIM-SM&#x2F;SSM组播路由守护进程，该程序起源于mrouted。设置好交叉编译工具链后，参照如下指令进行交叉编译，编译好的程序如图10所示。若在ubuntu环境中，可直接 apt 安装pimd。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">./configure --prefix=&lt;.../your_install_dir&gt;<br>make<br>sudo make install<br></code></pre></td></tr></table></figure><p>注意事项：</p><p>在编译过程中，若提示找不到libite目录下的一些cpp文件，可下载<a href="https://github.com/troglobit/libite">libite</a>，然后将<code>libite/src</code>文件放置到<code>/pimd/libite</code>。</p><img src="/2023/04/14/vsomeip%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E8%B7%A8%E7%BD%91%E6%AE%B5%E9%80%9A%E4%BF%A1/image-20230414104731824.png" class title="image-20230414104731824"><center>图10 交叉编译成功的pimd程序</center><p>通过<code>pimd -d</code>可查看pimd运行信息，<code>pimd -q</code>停止pimd程序，整个通信过程，pimd持续运行。更多指令可通过<code>pimd -h</code>查看。</p><h4 id="3-3-Linux组播相关指令"><a href="#3-3-Linux组播相关指令" class="headerlink" title="3.3 Linux组播相关指令"></a>3.3 Linux组播相关指令</h4><ul><li>ip_mr_vif</li></ul><p>ip_mr_vif中列出了组播路由中涉及的两个网络接口（eth0和eth1），pimreg为组播管理代码注册的虚拟设备。指令：<code>more /proc/net/ip_mr_vif</code></p><img src="/2023/04/14/vsomeip%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E8%B7%A8%E7%BD%91%E6%AE%B5%E9%80%9A%E4%BF%A1/image-20230414104944885.png" class title="image-20230414104944885"><center>图11 PC ip_mr_vif参数</center><ul><li>ip mroute show</li></ul><img src="/2023/04/14/vsomeip%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E8%B7%A8%E7%BD%91%E6%AE%B5%E9%80%9A%E4%BF%A1/image-20230414105017715.png" class title="image-20230414105017715"><center>图12 PC 查看组播路由表</center> <h3 id="4-vsomeip源码修改与运行配置"><a href="#4-vsomeip源码修改与运行配置" class="headerlink" title="4. vsomeip源码修改与运行配置"></a>4. vsomeip源码修改与运行配置</h3><h4 id="4-1-vsomeip源码修改"><a href="#4-1-vsomeip源码修改" class="headerlink" title="4.1 vsomeip源码修改"></a>4.1 vsomeip源码修改</h4><p>vsomeip中没有对多播的生存时间（TTL,Time To Live）进行设置，跨网段通信中需要进行补充，参照图13修改vsomeip源代码，需修改源码的文件为:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;vsomeip_Dir&gt;/implementation/endpoints/src/udp_server_endpoint_impl.cpp<br></code></pre></td></tr></table></figure><img src="/2023/04/14/vsomeip%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E8%B7%A8%E7%BD%91%E6%AE%B5%E9%80%9A%E4%BF%A1/image-20230414105156783.png" class title="image-20230414105156783"><center>图13 vsomeip源码修改</center><h4 id="4-2启动pimd守护进程"><a href="#4-2启动pimd守护进程" class="headerlink" title="4.2启动pimd守护进程"></a>4.2启动pimd守护进程</h4><p>在笔记本电脑（充当网关）上运行pimd守护进程，运行指令为：<code>sudo pimd -d</code>。运行成功后可通过指令：<code>sudo pimd -r</code>查看路由表，如图14所示。通过图15中的mc_forward参数可以看出，linux内核中的多播转发功能已启动。</p><img src="/2023/04/14/vsomeip%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E8%B7%A8%E7%BD%91%E6%AE%B5%E9%80%9A%E4%BF%A1/image-20230414105320342.png" class title="image-20230414105320342"><center>图14 pimd路由表</center><img src="/2023/04/14/vsomeip%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E8%B7%A8%E7%BD%91%E6%AE%B5%E9%80%9A%E4%BF%A1/image-20230414105356338.png" class title="image-20230414105356338"><center>图15 mc_forward参数</center><h4 id="4-3-vsomeip运行配置"><a href="#4-3-vsomeip运行配置" class="headerlink" title="4.3 vsomeip运行配置"></a>4.3 vsomeip运行配置</h4><p>跨设备运行vsomeip程序需要修改配置文件以及在路由表中添加多播地址，以客户端为例，可参照下图进行设置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 运行, 自行修改</span><br>sudo sh ./run_client_request_fu.sh<br></code></pre></td></tr></table></figure><img src="/2023/04/14/vsomeip%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E8%B7%A8%E7%BD%91%E6%AE%B5%E9%80%9A%E4%BF%A1/image-20230414105517643.png" class title="image-20230414105517643"><center>图16 client.json配置文件</center><img src="/2023/04/14/vsomeip%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E8%B7%A8%E7%BD%91%E6%AE%B5%E9%80%9A%E4%BF%A1/image-20230414105559835.png" class title="image-20230414105559835"><center>图17 run_client_request_fu.sh脚本文件</center><h3 id="5-vsomeip跨网段实验结果"><a href="#5-vsomeip跨网段实验结果" class="headerlink" title="5. vsomeip跨网段实验结果"></a>5. vsomeip跨网段实验结果</h3><p>vsomeip跨网段跨设备运行结果如图18所示，由图可知，服务端与客户端已经成功建立通信。真实实验环境如图19，至此，实验结束。 </p><img src="/2023/04/14/vsomeip%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E8%B7%A8%E7%BD%91%E6%AE%B5%E9%80%9A%E4%BF%A1/image-20230414105917589.png" class title="image-20230414105917589"><center>图18 vsomeip跨网段跨设备运行结果</center><img src="/2023/04/14/vsomeip%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E8%B7%A8%E7%BD%91%E6%AE%B5%E9%80%9A%E4%BF%A1/image-20230414110043768.png" alt="image-20230414110043768" style="zoom:50%;"><center>图19 真实实验设备</center><h3 id="6-vsomeip跨网段通信问题分析与解决思路"><a href="#6-vsomeip跨网段通信问题分析与解决思路" class="headerlink" title="6. vsomeip跨网段通信问题分析与解决思路"></a>6. vsomeip跨网段通信问题分析与解决思路</h3><h4 id="6-1-网络TTL与vsomeip-TTL区分"><a href="#6-1-网络TTL与vsomeip-TTL区分" class="headerlink" title="6.1 网络TTL与vsomeip TTL区分"></a>6.1 网络TTL与vsomeip TTL区分</h4><p>关于网络概念中的TTL，首先需要做出解释，并与vsomeip中的TTL区分。计算机网络概念中的TTL是指IP包被路由器丢弃之前允许通过的最大网段数量（跨路由器数量）。数据包经过一次路由器，其值减一，当值减至0时，路由器将取消该数据包的转发。其单位可以理解为“跳”。</p><p>而vsomeip中的TTL，值得是服务发现的生存时间，其单位为秒。其值一般在配置文件中赋值，如图20所示。</p><img src="/2023/04/14/vsomeip%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E8%B7%A8%E7%BD%91%E6%AE%B5%E9%80%9A%E4%BF%A1/image-20230414110243879.png" class title="image-20230414110243879"><center>图20 vsomeip 服务发现TTL</center><h4 id="6-2-问题分析与解决思路"><a href="#6-2-问题分析与解决思路" class="headerlink" title="6.2 问题分析与解决思路"></a>6.2 问题分析与解决思路</h4><p>分析过程分为两个阶段，第一阶段的分析过程参照图21所示的系统设备连接图进行。其结论为：网关组播转发不成功。第二阶段继续探究组播转发不成功原因，并成功定位问题，其设备连接图参照图1。</p><img src="/2023/04/14/vsomeip%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E8%B7%A8%E7%BD%91%E6%AE%B5%E9%80%9A%E4%BF%A1/image-20230414110329676.png" class title="image-20230414110329676"><center>图21 系统设备连接图</center><p>单播通信成功后，首先在服务端设置组播，命令为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bas">sudo route add 224.224.224.245 dev &lt;网卡名称&gt;<br></code></pre></td></tr></table></figure><p>然后在S32G上运行pimd程序，笔记本电脑与i.MX8M开发板分别运行vsomeip服务端与客户端程序。如图21所示。由图22可知，vsomeip服务端与客户端没有通信成功。预期的结果应如图23所示。</p><img src="/2023/04/14/vsomeip%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E8%B7%A8%E7%BD%91%E6%AE%B5%E9%80%9A%E4%BF%A1/image-20230414110603874.png" class title="image-20230414110603874"><center>图22 当前vsomeip跨网段通信实验结果</center><img src="/2023/04/14/vsomeip%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E8%B7%A8%E7%BD%91%E6%AE%B5%E9%80%9A%E4%BF%A1/image-20230414110714487.png" class title="image-20230414110714487"><center>图23 预期vsomeip通信实验结果</center><p>由图24可知，S32G开发板内核的组播转发参数mc_forwarding已经置为1，说明内核组播转发已经打开。图25为组播路由协议守护进程pimd运行log，由图可知，pimd选择IP地址<code>192.168.100.90</code>作为组播汇聚点，并且客户端<code>192.168.90.50</code>（PC）已经加入组播组。不过，通过 ip_mr_vif已知，终端数据可以进入，但无法转发，如图26。查看组播路由表，如图27，可以看出Iif存在而Oifs未找到。目前可以得出的结论为<strong>S32G组播转发不成功</strong>。</p><img src="/2023/04/14/vsomeip%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E8%B7%A8%E7%BD%91%E6%AE%B5%E9%80%9A%E4%BF%A1/image-20230414110922415.png" class title="image-20230414110922415"><center>图24 mc_forwarding组播转发参数</center><img src="/2023/04/14/vsomeip%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E8%B7%A8%E7%BD%91%E6%AE%B5%E9%80%9A%E4%BF%A1/image-20230414111417871.png" class title="image-20230414111417871"><center>图25 pimd程序运行log</center><img src="/2023/04/14/vsomeip%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E8%B7%A8%E7%BD%91%E6%AE%B5%E9%80%9A%E4%BF%A1/image-20230414111425305.png" alt="image-20230414111425305" style="zoom:100%;"><center>图26 ip_mr_vif结果</center><img src="/2023/04/14/vsomeip%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E8%B7%A8%E7%BD%91%E6%AE%B5%E9%80%9A%E4%BF%A1/image-20230414111506102.png" class title="image-20230414111506102"><center>图27 ip mroute show结果</center><p>第二阶段继续探索组播转发不成功问题。首先使用wireshark工具进行网络抓包，抓取点如图28所示。如图29与30所示，由图可知，客户端的消息可以成功进入网关，而进一步分析其UDP包可知，其数据包的TTL为1。结合前文说明可知，数据包经过网关，TTL减至0，系统将数据丢弃。因此路由器另一端的开发板无法收到信息。 </p><img src="/2023/04/14/vsomeip%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E8%B7%A8%E7%BD%91%E6%AE%B5%E9%80%9A%E4%BF%A1/image-20230414111659474.png" class title="image-20230414111659474"><center>图28 wireshark进行网络抓包</center> <img src="/2023/04/14/vsomeip%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E8%B7%A8%E7%BD%91%E6%AE%B5%E9%80%9A%E4%BF%A1/image-20230414111745918.png" class title="image-20230414111745918"><center>图29 分析UDP数据包</center><img src="/2023/04/14/vsomeip%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E8%B7%A8%E7%BD%91%E6%AE%B5%E9%80%9A%E4%BF%A1/image-20230414111752680.png" class title="image-20230414111752680"><center>图30 分析UDP数据包</center><p>在进行源码修改后，跨网段通信成功。从图31处进行抓包，并进行分析，如图32所示，其TTL值从5减到4。其结果表明确实是TTL的问题。</p><img src="/2023/04/14/vsomeip%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E8%B7%A8%E7%BD%91%E6%AE%B5%E9%80%9A%E4%BF%A1/image-20230414111837212.png" class title="image-20230414111837212"><center>图31 wireshark进行网络抓包</center> <img src="/2023/04/14/vsomeip%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E8%B7%A8%E7%BD%91%E6%AE%B5%E9%80%9A%E4%BF%A1/image-20230414111844938.png" class title="image-20230414111844938"><center>图32 UDP数据包分析</center><h4 id="6-3-错误排查思路"><a href="#6-3-错误排查思路" class="headerlink" title="6.3 错误排查思路"></a>6.3 错误排查思路</h4><ul><li>单播通信问题（这是前提）</li><li>多播TTL问题</li><li>系统防火墙问题</li><li>linux rp_filter 网络包校验过滤问题</li><li>PIMD RP（汇聚点）问题</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>网络</tag>
      
      <tag>原创</tag>
      
      <tag>车载以太网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>可执行文件SCP传输时，可能导致库丢失原因探讨</title>
    <link href="/2023/04/13/%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6SCP%E4%BC%A0%E8%BE%93%E6%97%B6%EF%BC%8C%E5%8F%AF%E8%83%BD%E5%AF%BC%E8%87%B4%E5%BA%93%E4%B8%A2%E5%A4%B1%E5%8E%9F%E5%9B%A0%E6%8E%A2%E8%AE%A8/"/>
    <url>/2023/04/13/%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6SCP%E4%BC%A0%E8%BE%93%E6%97%B6%EF%BC%8C%E5%8F%AF%E8%83%BD%E5%AF%BC%E8%87%B4%E5%BA%93%E4%B8%A2%E5%A4%B1%E5%8E%9F%E5%9B%A0%E6%8E%A2%E8%AE%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="可执行文件SCP传输时，可能导致库丢失原因探讨"><a href="#可执行文件SCP传输时，可能导致库丢失原因探讨" class="headerlink" title="可执行文件SCP传输时，可能导致库丢失原因探讨"></a>可执行文件SCP传输时，可能导致库丢失原因探讨</h3><hr><h4 id="0-问题分析"><a href="#0-问题分析" class="headerlink" title="0. 问题分析"></a>0. 问题分析</h4><p>从PC传输文件到嵌入式平台有以下集中方式，当使用SSH传输文件时，发现传输可执行文件压缩包时程序解压都可以正确执行，而直接传输可执行文件后，会出现<strong>程序链接库丢失</strong>问题。</p><img src="/2023/04/13/%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6SCP%E4%BC%A0%E8%BE%93%E6%97%B6%EF%BC%8C%E5%8F%AF%E8%83%BD%E5%AF%BC%E8%87%B4%E5%BA%93%E4%B8%A2%E5%A4%B1%E5%8E%9F%E5%9B%A0%E6%8E%A2%E8%AE%A8/image-20230413170145453.png" alt="image-20230413170145453" style="zoom:50%;"><h4 id="1-简述"><a href="#1-简述" class="headerlink" title="1. 简述"></a>1. 简述</h4><p>通过压缩包与直接传输方式，传输可执行文件 tree，比较他们的异同，压缩包方式为 A，直传为 B</p><h4 id="2-file指令查看基本信息"><a href="#2-file指令查看基本信息" class="headerlink" title="2. file指令查看基本信息"></a>2. file指令查看基本信息</h4><p>注意，此时<code>dynamically linked</code>转变为<code>statically linked</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># A</span><br>ELF 64-bit LSB executable, ARM aarch64, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux-aarch64.so.1, BuildID[sha1]=0c126f1b17601d33513b52c02a5e63358d912512, <span class="hljs-keyword">for</span> GNU/Linux 3.14.0, with debug_info, not stripped<br><br><span class="hljs-comment"># B</span><br>ELF 64-bit LSB executable, ARM aarch64, version 1 (SYSV), statically linked, interpreter *empty*, stripped<br></code></pre></td></tr></table></figure><h4 id="3-ldd指令查看动态链接库连接情况"><a href="#3-ldd指令查看动态链接库连接情况" class="headerlink" title="3. ldd指令查看动态链接库连接情况"></a>3. ldd指令查看动态链接库连接情况</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># A</span><br>linux-vdso.so.1 (0x0000ffff8a54f000)<br>libc.so.6 =&gt; /lib/libc.so.6 (0x0000ffff8a3b7000)<br>/lib/ld-linux-aarch64.so.1 (0x0000ffff8a521000)<br><span class="hljs-comment"># B</span><br>not a dynamic executable<br></code></pre></td></tr></table></figure><h4 id="4-nm指令查看符号信息"><a href="#4-nm指令查看符号信息" class="headerlink" title="4. nm指令查看符号信息"></a>4. nm指令查看符号信息</h4><blockquote><p>nm可以列出二进制可执行文件，动态库，静态库中的符号信息，包括符号的类型，符号名称，比如函数名，全局变量等。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># A</span><br>000000000424b24 B Dflag<br>0000000000424b0c B Fflag<br>0000000000406d04 T Ftype<br>0000000000424b38 B Hflag<br>0000000000424b28 B Jflag<br>0000000000424af4 B Level<br>0000000000424b5c B Nflag<br>0000000000424b30 B Qflag<br>0000000000424af8 B Rflag<br>0000000000424b74 B Xflag<br>0000000000423e08 d _DYNAMIC<br>0000000000423fd8 d _GLOBAL_OFFSET_TABLE_<br>000000000040fcb0 R _IO_stdin_used<br>0000000000413d7c r __FRAME_END__<br>00000000004132f8 r __GNU_EH_FRAME_HDR<br>0000000000424890 D __TMC_END__<br>0000000000426508 B __bss_end__<br>0000000000424890 B __bss_start<br><span class="hljs-comment"># B</span><br>nm: warning: ./tree001 has a corrupt section with a size (6d616e656c696674) larger than the file size<br></code></pre></td></tr></table></figure><h4 id="5-readelf指令分析可执行文件结构"><a href="#5-readelf指令分析可执行文件结构" class="headerlink" title="5. readelf指令分析可执行文件结构"></a>5. readelf指令分析可执行文件结构</h4><p>如果二进制文件是ELF格式的，通过<code>file</code>文件可以查看文件格式.使用<code>readelf</code>指令可以方便分析ELF文件的结构，比如节信息，elf头文件信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># A</span><br>ELF Header:<br>Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 <br>  Class:                             ELF64<br>  Data:                              2<span class="hljs-string">&#x27;s complement, little endian</span><br><span class="hljs-string">  Version:                           1 (current)</span><br><span class="hljs-string">  OS/ABI:                            UNIX - System V</span><br><span class="hljs-string">  ABI Version:                       0</span><br><span class="hljs-string">  Type:                              EXEC (Executable file)</span><br><span class="hljs-string">  Machine:                           AArch64</span><br><span class="hljs-string">  Version:                           0x1</span><br><span class="hljs-string">  Entry point address:               0x401410</span><br><span class="hljs-string">  Start of program headers:          64 (bytes into file)</span><br><span class="hljs-string">  Start of section headers:          174024 (bytes into file)</span><br><span class="hljs-string">  Flags:                             0x0</span><br><span class="hljs-string">  Size of this header:               64 (bytes)</span><br><span class="hljs-string">  Size of program headers:           56 (bytes)</span><br><span class="hljs-string">  Number of program headers:         9</span><br><span class="hljs-string">  Size of section headers:           64 (bytes)</span><br><span class="hljs-string">  Number of section headers:         36</span><br><span class="hljs-string">  Section header string table index: 35</span><br><span class="hljs-string"> </span><br><span class="hljs-string"> # B</span><br><span class="hljs-string">  ELF Header:</span><br><span class="hljs-string">  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 </span><br><span class="hljs-string">  Class:                             ELF64</span><br><span class="hljs-string">  Data:                              2&#x27;</span>s complement, little endian<br>  Version:                           1 (current)<br>  OS/ABI:                            UNIX - System V<br>  ABI Version:                       0<br>  Type:                              EXEC (Executable file)<br>  Machine:                           AArch64<br>  Version:                           0x1<br>  Entry point address:               0x401410<br>  Start of program headers:          64 (bytes into file)<br>  Start of section headers:          174024 (bytes into file)<br>  Flags:                             0x0<br>  Size of this header:               64 (bytes)<br>  Size of program headers:           56 (bytes)<br>  Number of program headers:         9<br>  Size of section headers:           64 (bytes)<br>  Number of section headers:         36<br>  Section header string table index: 35<br>readelf: Warning: Section 0 has an out of range sh_link value of 1282605157<br>readelf: Warning: Section 0 has an out of range sh_info value of 1818588773<br>readelf: Warning: Section 1 has an out of range sh_link value of 1702064737<br></code></pre></td></tr></table></figure><h4 id="6-结论"><a href="#6-结论" class="headerlink" title="6.结论"></a>6.结论</h4><p>传输可执行文件时，将文件压缩后再传输。</p>]]></content>
    
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux网络子系统性能观测研究报告</title>
    <link href="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/"/>
    <url>/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<h2 id="网络子系统性能观测研究报告"><a href="#网络子系统性能观测研究报告" class="headerlink" title="网络子系统性能观测研究报告"></a>网络子系统性能观测研究报告</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h3><p>随着智能网联汽车的发展，对车辆内、外通信的需求越来越高，也推动汽车网络技术的发展。车内应用进行网络通信，离不开内核的网络协议栈以及相应驱动程序的支持，所以观测网络性能， 就需要从内核中提取相关数据进行分析处理。</p><h3 id="2-网络子系统背景介绍"><a href="#2-网络子系统背景介绍" class="headerlink" title="2.网络子系统背景介绍"></a>2.网络子系统背景介绍</h3><h4 id="2-1-协议栈"><a href="#2-1-协议栈" class="headerlink" title="2.1 协议栈"></a>2.1 协议栈</h4><p>Linux内核网络协议栈由多种协议分层组成，如图1所示， 协议栈中每一层都有自己的职责。例如，IP协议允许通过多个路由器和网络发送数据报，可以重新组合数据包，但不能保证某些数据丢失时的可靠性，这需要在更高一层的如TCP协议中实现。</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/1.png" alt="图1"><p>用户态应用程序通过socket接口与内核网络协议栈进行交互，协议栈又通过网卡驱动程序与网卡硬件进行交互，从而实现网络通信。</p><h4 id="2-2-关键数据结构"><a href="#2-2-关键数据结构" class="headerlink" title="2.2 关键数据结构"></a>2.2 关键数据结构</h4><p>纵观整个网络子系统，有几个关键的数据结构贯彻其中，如<code>sk_buff</code>、<code>net_device</code>、<code>socket</code>、<code>sock</code>等，他们之间的关系如图2所示。</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/2.png" alt="img"><h5 id="2-2-1-struct-sk-buff"><a href="#2-2-1-struct-sk-buff" class="headerlink" title="2.2.1 struct sk_buff"></a>2.2.1 struct sk_buff</h5><p>所有网络分层都会使用<code>sk_buff</code>结构来储存其报头、有关用户数据的信息，以及协调其工作的其他内部信息。从第二层到第四层都会使用这个数据结构。</p><p>内核使用一个双向链表来维护<code>sk_buff</code>结构，<code>next</code>指针指向下一个<code>sk_buff</code>结构，如图3所示。</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/skb_none_line_mode3.png" alt="sk_buff insight – WHYFI" style="zoom:50%;"><p><code>sk_buff</code>结构体中重要字段描述：</p><table><thead><tr><th align="left">字段</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">head</td><td align="left">The start of the packet</td></tr><tr><td align="left">data</td><td align="left">The start of the packet payload</td></tr><tr><td align="left">tail</td><td align="left">The end of the packet payload</td></tr><tr><td align="left">end</td><td align="left">The end of the packet</td></tr><tr><td align="left">len</td><td align="left">The amount of data of the packet</td></tr></tbody></table><p>指针指向区域描述：</p><table><thead><tr><th>区域名称</th><th>描述</th></tr></thead><tbody><tr><td>head room</td><td>位于head至data之间的空间，用于存储protocol header，如：TCP header, IP header, Ethernet header .etc</td></tr><tr><td>user data</td><td>位于data至tail之间的空间，用于存储应用层数据，一般系统调用时会使用到。</td></tr><tr><td>tail room</td><td>位于tail至end之间的空间，用于填充用户数据未使用完的空间。</td></tr><tr><td>skb_shared_info</td><td>位于end之后，用于存储特殊数据结构skb_shared_info，该结构用于描述分片信息。</td></tr></tbody></table><h5 id="2-2-2-struct-net-device"><a href="#2-2-2-struct-net-device" class="headerlink" title="2.2.2 struct net_device"></a>2.2.2 struct net_device</h5><p>在内核中，网络设备被抽象为<code>struct net_device</code>结构，它是网络设备硬件与上层协议之间联系的接口，该结构包括网卡硬件类信息、统计类信息、上层协议处理接口、流控接口等。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">net_device</span> &#123;</span><br>    <span class="hljs-type">int</span>         irq;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span>    <span class="hljs-title">ptype_all</span>;</span>   <span class="hljs-comment">//监听此设备上所有报文的处理函数链表</span><br>    <span class="hljs-type">int</span>         ifindex;             <span class="hljs-comment">//接口索引值</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">net_device_stats</span> <span class="hljs-title">stats</span>;</span>   <span class="hljs-comment">//收发报文的统计信息</span><br>    <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">net_device_ops</span> *<span class="hljs-title">netdev_ops</span>;</span><br>    <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ethtool_ops</span> *<span class="hljs-title">ethtool_ops</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">in_device</span> __<span class="hljs-title">rcu</span>  *<span class="hljs-title">ip_ptr</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inet6_dev</span> __<span class="hljs-title">rcu</span>  *<span class="hljs-title">ip6_ptr</span>;</span><br>    <span class="hljs-type">rx_handler_func_t</span> __rcu *rx_handler;<br>    <span class="hljs-type">void</span> __rcu      *rx_handler_data; <br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">netdev_queue</span> __<span class="hljs-title">rcu</span> *<span class="hljs-title">ingress_queue</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Qdisc</span>        *<span class="hljs-title">qdisc</span>;</span>  <span class="hljs-comment">//流控</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>2.2.3 struct sock</p><p>内核中网络相关的很多函数，参数往往都是<code>struct sock</code>，函数内部依照不同的逻辑，将<code>struct sock</code>转换为不同的结构。<code>struct sock *sk</code>是贯穿并连接于L2～L5各层之间的纽带，也是网络中最核心的结构体。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* include/net/sock.h */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sock</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sock_common</span>__<span class="hljs-title">sk_common</span>;</span> <span class="hljs-comment">// sock通用结构体</span><br>    <br>    <span class="hljs-type">socket_lock_t</span>sk_lock; <span class="hljs-comment">// 套接字同步锁</span><br><span class="hljs-type">atomic_t</span>sk_drops; <span class="hljs-comment">// IP/UDP包丢包统计</span><br><span class="hljs-type">int</span>    sk_rcvlowat; <span class="hljs-comment">// SO_SO_RCVLOSO_RCVLOWAT标记位</span><br>    <br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sk_buff_head</span><span class="hljs-title">sk_error_queue</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sk_buff</span>*<span class="hljs-title">sk_rx_skb_cache</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sk_buff_head</span><span class="hljs-title">sk_receive_queue</span>;</span> <span class="hljs-comment">//接收数据包队列</span><br>    <br>    <span class="hljs-type">int</span> sk_forward_alloc;<br>    <span class="hljs-type">int</span> sk_rcvbuf; <span class="hljs-comment">//接收缓存大小</span><br>    <span class="hljs-type">int</span> sk_sndbuf; <span class="hljs-comment">//发送缓存大小</span><br><br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">socket_wq</span> __<span class="hljs-title">rcu</span>*<span class="hljs-title">sk_wq</span>;</span> <span class="hljs-comment">// 等待队列</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">socket_wq</span>*<span class="hljs-title">sk_wq_raw</span>;</span><br>&#125;;<br><br>    <span class="hljs-comment">/* ===== cache line for TX ===== */</span><br><span class="hljs-type">int</span>sk_wmem_queued; <span class="hljs-comment">//传输队列大小</span><br><span class="hljs-type">refcount_t</span> sk_wmem_alloc; <span class="hljs-comment">//已确认的传输字节数</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> sk_tsq_flags; <span class="hljs-comment">//TCP Small Queue标记位</span><br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sk_buff</span>*<span class="hljs-title">sk_send_head</span>;</span> <span class="hljs-comment">//发送队列队首</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rb_root</span><span class="hljs-title">tcp_rtx_queue</span>;</span><br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sk_buff_head</span><span class="hljs-title">sk_write_queue</span>;</span> <span class="hljs-comment">//发送队列</span><br>    <br>u32sk_pacing_status; <span class="hljs-comment">/* see enum sk_pacing */</span><br><span class="hljs-type">long</span>sk_sndtimeo; <span class="hljs-comment">//SO_SNDTIMEO标记位</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timer_list</span><span class="hljs-title">sk_timer</span>;</span> <span class="hljs-comment">//套接字清空计时器</span><br>__u32sk_priority; <span class="hljs-comment">//SO_PRIORITY标记位</span><br>   <br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>sk_pacing_rate; <span class="hljs-comment">/* bytes per second */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>sk_max_pacing_rate; <span class="hljs-comment">//最大发包速率</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page_frag</span><span class="hljs-title">sk_frag</span>;</span> <span class="hljs-comment">//缓存页帧</span><br><br>    <span class="hljs-type">int</span>sk_err, <span class="hljs-comment">//上次错误</span><br>sk_err_soft; <br>u32sk_ack_backlog; <span class="hljs-comment">//ack队列长度</span><br>u32sk_max_ack_backlog; <span class="hljs-comment">//最大ack队列长度</span><br><span class="hljs-type">kuid_t</span>sk_uid; <span class="hljs-comment">//user id</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pid</span>*<span class="hljs-title">sk_peer_pid</span>;</span> <span class="hljs-comment">//套接字对应peer id</span><br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cred</span>*<span class="hljs-title">sk_peer_cred</span>;</span><br><span class="hljs-type">long</span>sk_rcvtimeo; <span class="hljs-comment">//接收超时</span><br><span class="hljs-type">ktime_t</span>sk_stamp; <span class="hljs-comment">//时间戳</span><br>&#125;; <br></code></pre></td></tr></table></figure><h5 id="2-2-4-struct-socket"><a href="#2-2-4-struct-socket" class="headerlink" title="2.2.4 struct socket"></a>2.2.4 struct socket</h5><p>内核中的进程通过文件描述符<code>fd</code>中的<code>struct socket</code>结构体与内核网络协议栈进行沟通，如图4所示。</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/4.png" alt="img"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">socket</span></span><br><span class="hljs-class">&#123;</span><br>     socket_state  state; <span class="hljs-comment">// socket state</span><br>     <span class="hljs-type">short</span>   type ; <span class="hljs-comment">// socket type</span><br>     <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>  flags; <span class="hljs-comment">// socket flags</span><br>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fasync_struct</span>  *<span class="hljs-title">fasync_list</span>;</span><br>     <span class="hljs-type">wait_queue_head_t</span> wait;<br>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> *<span class="hljs-title">file</span>;</span><br>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sock</span> *<span class="hljs-title">sock</span>;</span>  <span class="hljs-comment">// socket在网络层的表示；</span><br>     <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proto_ops</span> *<span class="hljs-title">ops</span>;</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-3-内核收包过程"><a href="#2-3-内核收包过程" class="headerlink" title="2.3 内核收包过程"></a>2.3 内核收包过程</h4><p>收包过程大致可分为网卡初始化、网卡收包、DMA将包复制到RX队列、触发硬件中断IRQ、内核调度到ksoftirqd线程、软中断处理从ringbuffer取数据送到协议栈、协议栈L2处理、协议栈L3处理、协议栈L4处理这9个过程，如图5所示。</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/5.png" alt="image-20230207192247422"><ul><li>网卡收包触发硬中断</li></ul><p>数据从网线进入网卡，通过DMA写到ringbuffer，然后就该内核来收包了。由于硬中断期间可能会导致事件丢失，所以在硬中断处理期间不能有耗时操作，只是完成了将数据包放入EQ（Event Queue），之后执行<code>napi_schedule()</code>调度NAPI去处理。在<code>napi_schedule()</code>中，会调用<code>__raise_softirq_irqoff()</code>触发一个<code>NET_RX_SOFTIRQ</code>类型软中断，并触发执行软中断处理函数<code>net_rx_action()</code>。NAPI方式结合了轮询和中段两种方式。每次执行到NAPI<code>poll()</code>方法时，会批量从ringbuffer收包，并且会尽量把所有待收的包都收完。</p><ul><li>软中断处理</li></ul><p><code>net_rx_action</code>从处理ringbuffer开始，遍历当前CPU队列的NAPI变量队列，依次执行其<code>poll</code>方法，如mlx5e网卡驱动的<code>mlx5e_napi_poll()</code>。在该函数中，会依次处理TX和RX队列，包含<strong>XDP程序</strong>（Driver模式）也是在这里执行。之后，从ringbuffer中初始化一个<code>struct sk_buff *skb</code>结构体变量，也就是常说的skb数据包。然后调用<code>napi_gro_receive()</code>执行GRO，GRO的功能是对分片的包进行重组然后交给更上层，以提高吞吐。最后，调用<code>netif_receive_skb_list_internal()</code>进入内核协议栈处理。</p><ul><li>协议栈L2处理</li></ul><p>在<code>netif_receive_skb_list_internal()</code>中，会根据是否开启RPS执行不同逻辑。在未开启RPS时，会通过<code>__netif_receive_skb_core</code>完成将数据送到协议栈处理。在该函数中，会依次进行以下操作：(1)处理skb时间戳。（2）执行<strong>Generic XDP</strong>程序。（3）处理VLAN header。（4）TAP处理，如<strong>tcpdump</strong>抓包、流量过滤。（5）流量控制TC，包括TC规则和<strong>TC BPF</strong>程序。（6）Netfilter，处理iptables规则。最后通过<code>skb-&gt;dev-&gt;rx_handler(&amp;skb)</code>进入L3 ingress处理，如IPv4处理。</p><ul><li>协议栈L3处理（以IPv4为例）</li></ul><p>IP层在函数<code>inet_init</code>中将自身注册到了<code>ptype_base</code>哈希表中。在<code>deliver_skb()</code>中会调用注册的<code>.func</code>方法，对应IPv4的<code>ip_rcv()</code>函数。<code>ip_rcv()</code>中进行了数据合法性验证、统计计数器更新等，在最后会以netfilter hook的方式调用<code>ip_rcv_finish</code>方法。处理结束的时候，调用<code>ip_local_deliver_finish()</code>，通过寻找注册在这个协议上的<code>struct net_protocol</code>变量，将数据包送到协议栈更上层。如TCP协议对应的<code>tcp_v4_rcv</code>、UDP协议对应的<code>udp_v4_rcv</code>。</p><ul><li>协议栈L4处理（以UDP为例）</li></ul><p>在<code>inet_init()</code>中，通过<code>inet_add_protocol()</code>注册了<code>udp_protocol</code>，其中<code>.handler</code>方法指向了<code>udp_rcv</code>函数。这是从IP层进入UDP层的入口。在该函数中，调用了<code>__udp4_lib_rcv()</code>接收UDP报文。在<code>__udp4_lib_rcv</code>中，首先进行合法性检查，获取UDP头、UDP数据报长度、源地址、目标地址等信息，然后进行一些完整性检测和checksum验证。在IP层中，送到更上面一层协议前，会将一个<code>dst_entry</code>关联到skb，如果对应的<code>dst_entry</code>找到了，并且有对应的socket，<code>udp4_lib_rcv</code> 会将 packet 放到 <code>socket</code> 的接收队列。网络数据通过<code>__skb_queue_tail()</code>进入socket接收队列，并且会在之前进行一些检查和更新计数，并通过<code>sk_filter</code>执行<strong>socket BPF</strong>程序。</p><h3 id="3-网络性能观测方法"><a href="#3-网络性能观测方法" class="headerlink" title="3.网络性能观测方法"></a>3.网络性能观测方法</h3><h4 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h4><p>网络性能包括链路上的包转发时延、吞吐量、带宽等指标，也包括主机侧的实时网络状况，传统工具包括：ss、ip、nstat、netstat、sar、nicstat、ethtool、tcpdump等，BPF工具包括：netsize、nettxlat、superping、tcpconnect、tcplife、tcptop、udpconnect、sockstat等，这些工具包含了网络子系统的各个层面，如图所示，可以对系统网络状况进行较为全面的了解，从而进一步去分析可能存在的问题与瓶颈，提升网络性能。</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/bpftools.png" alt="bpftools" style="zoom:80%;"><h4 id="3-2-链路层与网络层"><a href="#3-2-链路层与网络层" class="headerlink" title="3.2 链路层与网络层"></a>3.2 链路层与网络层</h4><h5 id="（1）-传统工具"><a href="#（1）-传统工具" class="headerlink" title="（1） 传统工具"></a>（1） 传统工具</h5><ul><li>ethtool</li></ul><p>ethtool可以利用<code>-i</code>和<code>-k</code>选项检查网络接口的静态配置信息，也可利用<code>-S</code>选项打印驱动程序统计信息。如图所示。</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/image-20230211122851629.png" alt="image-20230211122851629" style="zoom:50%;"><p>这行命令从内核中的ethtool框架中获取统计信息，大部分网络设备驱动程序都支持该框架。网络设备驱动程序也可定义自己的ethtool指标。</p><p>使用<code>-i</code>选项可展示驱动细节信息，使用<code>-k</code> 可展示网络接口的可调节项，如图所示。</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/image-20230211123322383.png" alt="image-20230211123322383" style="zoom: 50%;"><ul><li>nicstat</li></ul><p>nicstat可以打印网络接口的统计信息，如图所示。</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/image-20230211124725911.png" alt="image-20230211124725911" style="zoom: 50%;"><p>这个输出中包括了一些饱和度统计信息，可以用来识别网络接口的饱和程度。</p><ul><li>netstat</li></ul><p>netstat是一个用来汇报各种类型的网络统计信息的传统工具，包括以下命令：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>(default)</td><td>列出所有处于打开状态的套接字</td></tr><tr><td>-a</td><td>列出所有套接字的信息</td></tr><tr><td>-s</td><td>网络软件栈统计信息</td></tr><tr><td>-i</td><td>网络接口统计信息</td></tr><tr><td>-r</td><td>列出路由表</td></tr></tbody></table><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/image-20230211154338651.png" alt="image-20230211154338651" style="zoom: 50%;"><ul><li>ip</li></ul><p>ip是一个管理路由、网络设备、接口以及隧道的工具，可用来打印各种对象的统计信息，如link、address、route等。如图为使用<code>ip -s link</code>打印link的统计信息。</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/image-20230211154647754.png" alt="image-20230211154647754" style="zoom:50%;"><ul><li>sar</li></ul><p>系统报表活动工具sar可以打印出各种网络统计信息表。</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-n DEV</td><td>网络接口统计信息</td></tr><tr><td>-n EDEV</td><td>网络接口错误统计信息</td></tr><tr><td>-n IP,IP6</td><td>IPv4、IPv6数据包统计信息</td></tr><tr><td>-n EIP,EIP6</td><td>IPv4、IPv6错误统计信息</td></tr><tr><td>-n ICMP,ICMP6</td><td>IPv4、IPv6 ICMP统计信息</td></tr><tr><td>-n EICMP,EICMP6</td><td>IPv4、IPv6 ICMP错误统计信息</td></tr><tr><td>-n TCP</td><td>TCP统计信息</td></tr><tr><td>-n ETCP</td><td>TCP错误统计信息</td></tr><tr><td>-n SOCK,SOCK6</td><td>IPv4、IPv6 套接字用量</td></tr></tbody></table><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/image-20230211152114811.png" alt="image-20230211152114811" style="zoom:50%;"><p>上图为<code>sar -n DEV,IP</code>运行结果，可以看到关于网络设备和IPv4统计信息</p><h5 id="（2）-BPF工具"><a href="#（2）-BPF工具" class="headerlink" title="（2） BPF工具"></a>（2） BPF工具</h5><ul><li>netsize（<a href="https://github.com/brendangregg/bpf-perf-tools-book/blob/master/originals/Ch10_Networking/netsize.bt%EF%BC%89">https://github.com/brendangregg/bpf-perf-tools-book/blob/master/originals/Ch10_Networking/netsize.bt）</a></li></ul><p>netsize从网络设备层展示发送和接收的包的大小，可以同时显示软件分段托管之前和之后的大小（GSO和GRO）。该输出可以用来调查发送之前的碎片化情况。</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/image-20230211151345524.png" alt="image-20230211151345524" style="zoom:50%;"><ul><li>netqtop</li></ul><p>netqtop对指定网络接口的每个队列的传输和接收的数据包进行统计，帮助开发者检查其流量负载是否平衡。 结果显示为一个表格，列有PPS、BPS、平均大小和数据包计数。每隔给定的时间间隔以秒为单位进行打印，如图所示。</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/image-20230211133203018.png" alt="image-20230211133203018" style="zoom:80%;"><p>该工具使用<code>net:net_dev_start_xmit</code>和<code>net:netif_receive_skb</code>内核追踪点。 由于它使用tracepoint，该工具只在Linux 4.7以上版本上工作。 netqtop在网络流量大的时候会引入大量的开销。</p><h4 id="3-3-传输层"><a href="#3-3-传输层" class="headerlink" title="3.3 传输层"></a>3.3 传输层</h4><h5 id="（1）-传统工具-1"><a href="#（1）-传统工具-1" class="headerlink" title="（1） 传统工具"></a>（1） 传统工具</h5><ul><li>tcpdump</li></ul><p>tcpdump可以用来抓取网络包进行分析。借助Wireshark GUI工具，可以利用tcpdump的输出文件来检查包头、跟踪某个TCP连接、进行包重组以及其他操作，如图所示。</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/image-20230212115923283.png" alt="image-20230212115923283" style="zoom:80%;"><ul><li>sar</li></ul><p>通过sar获取TCP统计信息<code>sar -n TCP,ETCP</code></p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/image-20230212094305723.png" alt="image-20230212094305723" style="zoom:50%;"><h5 id="（2）-BPF工具-1"><a href="#（2）-BPF工具-1" class="headerlink" title="（2） BPF工具"></a>（2） BPF工具</h5><ul><li>tcptop</li></ul><p>tcptop是一个BCC工具，可以展示使用TCP的进程，如图所示。该工具跟踪TCP发送和接收的代码路径，包括<code>tcp_sendmsg</code>、<code>tcp_cleanup_rbuff</code>，并将数据记录在BPF Map中。通过参数<code>-p</code>可以指定仅跟踪的进程PID。</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/image-20230212111446136.png" alt="image-20230212111446136" style="zoom:80%;"><ul><li>tcpwin</li></ul><p>tcpwin跟踪TCP发送拥塞窗口的尺寸，以及其他的内核参数，以便分析拥塞控制算法的性能，如图所示。</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/image-20230212111812047.png" alt="image-20230212111812047" style="zoom:50%;"><ul><li>udpconnect</li></ul><p>udpconnect跟踪本机通过<code>connect</code>系统调用发起的UDP连接（不包括无连接的UDP通信），如图所示。该工具跟踪内核中的UDP连接函数，并且由于该函数调用频率较低，所以该工具的额外开销很低。</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/image-20230212112132666.png" alt="image-20230212112132666" style="zoom:80%;"><h4 id="3-4-套接字"><a href="#3-4-套接字" class="headerlink" title="3.4 套接字"></a>3.4 套接字</h4><h5 id="（1）-传统工具-2"><a href="#（1）-传统工具-2" class="headerlink" title="（1） 传统工具"></a>（1） 传统工具</h5><ul><li>ss</li></ul><p>ss是一个套接字统计工具，可以简要输出当前打开的套接字信息。默认的输出提供了网络套接字的高层信息，可以使用以下选项显示更多信息：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>-a,–all</td><td>显示所有套接字</td></tr><tr><td>-m,–memory</td><td>显示套接字内存使用情况</td></tr><tr><td>-i,–info</td><td>显示内部TCP信息</td></tr><tr><td>-t,–tcp</td><td>仅显示TCP套接字</td></tr><tr><td>-u,–udp</td><td>仅显示UDP套接字</td></tr></tbody></table><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/image-20230211161523945.png" alt="image-20230211161523945" style="zoom:50%;"><p>通过<code>-ti</code>参数可以显示更多tcp内部信息，包括以下信息：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>cong_alg</td><td>拥塞算法名称，默认为”cubic”</td></tr><tr><td>wscale</td><td>窗口放大倍数</td></tr><tr><td>rto</td><td>TCP重传超时值，毫秒</td></tr><tr><td>backoff</td><td>用于指数回退重传</td></tr><tr><td>rtt</td><td>RTT（平均往返时间）</td></tr><tr><td>mss</td><td>MSS（最大数据分段长度）</td></tr><tr><td>cwnd</td><td>拥塞窗口大小</td></tr><tr><td>pmtu</td><td>路径MTU</td></tr><tr><td>ssthresh</td><td>TCP拥塞窗口慢启动阈值</td></tr><tr><td>bytes_acked&#x2F;bytes_received</td><td>ack&#x2F;rcv的字节数</td></tr><tr><td>segs_out&#x2F;segs_in</td><td>发出和接收的分段数</td></tr><tr><td>lastsnd&#x2F;lastrcv&#x2F;lastack</td><td>距离最后一个send&#x2F;rcv&#x2F;ack的包的时间，毫秒</td></tr></tbody></table><p>通过<code>-as</code>显示套接字概况</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/image-20230212120220554.png" alt="image-20230212120220554" style="zoom:50%;"><h5 id="（2）-BPF工具-2"><a href="#（2）-BPF工具-2" class="headerlink" title="（2） BPF工具"></a>（2） BPF工具</h5><ul><li>soprotocol</li></ul><p>soprotocol按进程名和传输协议来跟踪新套接字连接的建立，如图所示。</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/image-20230212123557846.png" alt="image-20230212123557846" style="zoom:80%;"><ul><li>socketio</li></ul><p>socketio按进程、方向、协议和端口来展示套接字的I&#x2F;O统计信息，如图所示。</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/image-20230212124407482.png" alt="image-20230212124407482" style="zoom:50%;"><h3 id="4-eBPF网络性能数据提取方法"><a href="#4-eBPF网络性能数据提取方法" class="headerlink" title="4.eBPF网络性能数据提取方法"></a>4.eBPF网络性能数据提取方法</h3><h4 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h4><p>nic_throughput是LMP下观测网络性能的eBPF工具，其可以每秒输出指定网卡发送与接收的字节数、包数与包平均大小。（BPS：每秒多少字节     PPS：每秒多少包）</p><p>命令行参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">-n，--name<br>    [必选] 网卡名称<br>-i, --interval<br>    [可选] 输出时间间隔，默认为1s<br>-c, --count<br>    [可选] 输出条数，默认为99999999<br>--<span class="hljs-built_in">print</span><br>    [可选] 在命令行打印结果<br>--visual<br>    [可选] 将结果通过influxdb-grafana可视化<br></code></pre></td></tr></table></figure><h4 id="4-2-原理"><a href="#4-2-原理" class="headerlink" title="4.2 原理"></a>4.2 原理</h4><p>nic_throughput使用了两个tracepoint跟踪点，分别是：<code>net_dev_start_xmit</code>和<code>netif_receive_skb</code>，分别对应TX和RX路径。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* TX路径 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">xmit_one</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> sk_buff *skb, <span class="hljs-keyword">struct</span> net_device *dev,</span><br><span class="hljs-params">    <span class="hljs-keyword">struct</span> netdev_queue *txq, <span class="hljs-type">bool</span> more)</span><br>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> len;<br><span class="hljs-type">int</span> rc;<br><br><span class="hljs-keyword">if</span> (dev_nit_active(dev))<br>dev_queue_xmit_nit(skb, dev);<br><br>len = skb-&gt;len;<br>PRANDOM_ADD_NOISE(skb, dev, txq, len + jiffies);<br>trace_net_dev_start_xmit(skb, dev);         <span class="hljs-comment">//! tracepoint 挂载点</span><br>rc = netdev_start_xmit(skb, dev, txq, more);<br>trace_net_dev_xmit(skb, rc, dev, len);<br><br><span class="hljs-keyword">return</span> rc;<br>&#125;<br><br><span class="hljs-comment">/* RX路径 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> __netif_receive_skb_core(<span class="hljs-keyword">struct</span> sk_buff **pskb, <span class="hljs-type">bool</span> pfmemalloc,<br>    <span class="hljs-keyword">struct</span> packet_type **ppt_prev)<br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">packet_type</span> *<span class="hljs-title">ptype</span>, *<span class="hljs-title">pt_prev</span>;</span><br><span class="hljs-type">rx_handler_func_t</span> *rx_handler;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sk_buff</span> *<span class="hljs-title">skb</span> =</span> *pskb;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">net_device</span> *<span class="hljs-title">orig_dev</span>;</span><br><span class="hljs-type">bool</span> deliver_exact = <span class="hljs-literal">false</span>;<br><span class="hljs-type">int</span> ret = NET_RX_DROP;<br>__be16 type;<br><br>net_timestamp_check(!netdev_tstamp_prequeue, skb);<br><br>trace_netif_receive_skb(skb);   <span class="hljs-comment">//! tracepoint 挂载点</span><br><br>orig_dev = skb-&gt;dev;<br><br>skb_reset_network_header(skb);<br><span class="hljs-keyword">if</span> (!skb_transport_header_was_set(skb))<br>skb_reset_transport_header(skb);<br>skb_reset_mac_len(skb);<br><br>pt_prev = <span class="hljs-literal">NULL</span>;<br>    ...<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>通过编写eBPF程序，得到<code>sk_buff</code>结构中字段<code>len</code>的长度，得到包的大小，并且记录次数作为包的数量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* TRACEPOINT部分 */</span><br>TRACEPOINT_PROBE(net, net_dev_start_xmit)&#123;<br>    <span class="hljs-comment">/* read device name */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sk_buff</span>* <span class="hljs-title">skb</span> =</span> (<span class="hljs-keyword">struct</span> sk_buff*)args-&gt;skbaddr;<br>    ...<br>    updata_data(data, skb-&gt;len);<br>&#125;<br><br>TRACEPOINT_PROBE(net, netif_receive_skb)&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sk_buff</span> <span class="hljs-title">skb</span>;</span><br><br>    bpf_probe_read(&amp;skb, <span class="hljs-keyword">sizeof</span>(skb), args-&gt;skbaddr);<br>    ...<br>    updata_data(data, skb.len);<br>&#125;<br><br><span class="hljs-comment">/* MAP部分 */</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">queue_data</span>&#123;</span><br>    u64 total_pkt_len;<br>    u32 num_pkt;<br>&#125;;<br><br>BPF_HASH(tx_q, u16, <span class="hljs-keyword">struct</span> queue_data, MAX_QUEUE_NUM);<br>BPF_HASH(rx_q, u16, <span class="hljs-keyword">struct</span> queue_data, MAX_QUEUE_NUM);<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">updata_data</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> queue_data *data, u64 len)</span>&#123;<br>    data-&gt;total_pkt_len += len;<br>    data-&gt;num_pkt ++;<br>&#125;<br></code></pre></td></tr></table></figure><p>在用户态程序，通过读取<code>tx_q</code>和<code>rx_q</code>这两个map，得到单位时间内的总的字节数和包数，与该时间进行除法运算得到BPS和PPS</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">table = b[<span class="hljs-string">&#x27;tx_q&#x27;</span>] <span class="hljs-comment">#或b[&#x27;rx_q&#x27;]</span><br><br><span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> table.items():<br>qids += [k.value]<br>tlen += v.total_pkt_len<br>tpkt += v.num_pkt<br><br>tBPS = tlen / print_interval<br>tPPS = tpkt / print_interval<br></code></pre></td></tr></table></figure><h4 id="4-3-结果展示与分析"><a href="#4-3-结果展示与分析" class="headerlink" title="4.3 结果展示与分析"></a>4.3 结果展示与分析</h4><p>nic_throughput与sar同时进行输出，如图所示。在同一时间点上，对比nic_throughput的数据和sar的数据输出是不同的，尤其是BPS。</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/image-6197078.png" alt="image" style="zoom:80%;"><p>结果的不同是由于数据来源的不同。sar工具的数据来源（DEV参数）是<code>/proc/net/dev</code>，如图所示。</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E8%A7%82%E6%B5%8B%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/image-20230212144030451.png" alt="image-20230212144030451" style="zoom:80%;"><p>从内核中寻找数据来源</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* net/core/net-procfs.c */</span><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seq_operations</span> <span class="hljs-title">dev_seq_ops</span> =</span> &#123;<br>.start = dev_seq_start,<br>.next  = dev_seq_next,<br>.stop  = dev_seq_stop,<br>.show  = dev_seq_show, <span class="hljs-comment">//show方法</span><br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">dev_seq_show</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> seq_file *seq, <span class="hljs-type">void</span> *v)</span><br>&#123;<br><span class="hljs-keyword">if</span> (v == SEQ_START_TOKEN)<br>seq_puts(seq, <span class="hljs-string">&quot;Inter-|   Receive                            &quot;</span><br>      <span class="hljs-string">&quot;                    |  Transmit\n&quot;</span><br>      <span class="hljs-string">&quot; face |bytes    packets errs drop fifo frame &quot;</span><br>      <span class="hljs-string">&quot;compressed multicast|bytes    packets errs &quot;</span><br>      <span class="hljs-string">&quot;drop fifo colls carrier compressed\n&quot;</span>); <span class="hljs-comment">//表头</span><br><span class="hljs-keyword">else</span><br>dev_seq_printf_stats(seq, v); <span class="hljs-comment">//数据从此打印</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">dev_seq_printf_stats</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> seq_file *seq, <span class="hljs-keyword">struct</span> net_device *dev)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rtnl_link_stats64</span> <span class="hljs-title">temp</span>;</span><br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rtnl_link_stats64</span> *<span class="hljs-title">stats</span> =</span> dev_get_stats(dev, &amp;temp); <span class="hljs-comment">//数据来源</span><br><br>seq_printf(seq, <span class="hljs-string">&quot;%6s: %7llu %7llu %4llu %4llu %4llu %5llu %10llu %9llu &quot;</span><br>   <span class="hljs-string">&quot;%8llu %7llu %4llu %4llu %4llu %5llu %7llu %10llu\n&quot;</span>,<br>   dev-&gt;name, stats-&gt;rx_bytes, stats-&gt;rx_packets,<br>   stats-&gt;tx_bytes, stats-&gt;tx_packets,<br>   stats-&gt;tx_errors, stats-&gt;tx_dropped,<br>   ...<br>&#125;<br><br><span class="hljs-comment">/* net/core/dev.c */</span><br><br><span class="hljs-keyword">struct</span> rtnl_link_stats64 *dev_get_stats(<span class="hljs-keyword">struct</span> net_device *dev,<br><span class="hljs-keyword">struct</span> rtnl_link_stats64 *storage)<br>&#123;<br><span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> net_device_ops *ops = dev-&gt;netdev_ops;<br><br><span class="hljs-keyword">if</span> (ops-&gt;ndo_get_stats64) &#123; <span class="hljs-comment">//数据来源</span><br><span class="hljs-built_in">memset</span>(storage, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(*storage));<br>ops-&gt;ndo_get_stats64(dev, storage);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ops-&gt;ndo_get_stats) &#123;<br>netdev_stats_to_stats64(storage, ops-&gt;ndo_get_stats(dev));<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>netdev_stats_to_stats64(storage, &amp;dev-&gt;stats);<br>&#125;<br>storage-&gt;rx_dropped += (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)atomic_long_read(&amp;dev-&gt;rx_dropped);<br>storage-&gt;tx_dropped += (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)atomic_long_read(&amp;dev-&gt;tx_dropped);<br>storage-&gt;rx_nohandler += (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)atomic_long_read(&amp;dev-&gt;rx_nohandler);<br><span class="hljs-keyword">return</span> storage;<br>&#125;<br>EXPORT_SYMBOL(dev_get_stats);<br></code></pre></td></tr></table></figure><p>这里<code>ndo_get_stats</code>和<code>ndo_get_stats64</code>需要网卡驱动程序实现，以ixgbe网卡驱动为例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* drivers/net/ethernet/intel/ixgbe/ixgbe_main.c */</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">net_device_ops</span> <span class="hljs-title">ixgbe_netdev_ops</span> =</span> &#123;<br>.ndo_open= ixgbe_open,<br>.ndo_stop= ixgbe_close,<br>.ndo_start_xmit= ixgbe_xmit_frame,<br>...<br>.ndo_get_stats64= ixgbe_get_stats64, <span class="hljs-comment">//数据来源</span><br>...<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> ixgbe_get_stats64(<span class="hljs-keyword">struct</span> net_device *netdev,<br>      <span class="hljs-keyword">struct</span> rtnl_link_stats64 *stats)<br>&#123;<br><span class="hljs-keyword">struct</span> ixgbe_adapter *adapter = netdev_priv(netdev);<br><span class="hljs-type">int</span> i;<br><br>rcu_read_lock();<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; adapter-&gt;num_rx_queues; i++) &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ixgbe_ring</span> *<span class="hljs-title">ring</span> =</span> READ_ONCE(adapter-&gt;rx_ring[i]);<br>u64 bytes, packets;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> start;<br><br><span class="hljs-keyword">if</span> (ring) &#123;<br><span class="hljs-keyword">do</span> &#123;<br>start = u64_stats_fetch_begin_irq(&amp;ring-&gt;syncp);<br>packets = ring-&gt;stats.packets;<br>bytes   = ring-&gt;stats.bytes; <span class="hljs-comment">//从ixgbe网卡的ixgbe_ring结构中取得</span><br>&#125; <span class="hljs-keyword">while</span> (u64_stats_fetch_retry_irq(&amp;ring-&gt;syncp, start));<br>stats-&gt;rx_packets += packets;<br>stats-&gt;rx_bytes   += bytes;<br>&#125;<br>&#125;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看出，在ixgbe网卡的最终数据是从<code>ixgbe_ring</code>结构中得到的，而写这个数据的是<code>ixgbe_clean_tx_irq</code>、<code>ixgbe_clean_rx_irq</code>两个函数，而这两个函数正是<code>ixgbe_poll</code>TX和RX队列处理函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* drivers/net/ethernet/intel/ixgbe/ixgbe_main.c */</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title function_">ixgbe_clean_tx_irq</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ixgbe_q_vector *q_vector,</span><br><span class="hljs-params">       <span class="hljs-keyword">struct</span> ixgbe_ring *tx_ring, <span class="hljs-type">int</span> napi_budget)</span><br>&#123;<br>  ...<br>tx_ring-&gt;stats.bytes += total_bytes;<br>tx_ring-&gt;stats.packets += total_packets;<br>  ...<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ixgbe_clean_rx_irq</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ixgbe_q_vector *q_vector,</span><br><span class="hljs-params">       <span class="hljs-keyword">struct</span> ixgbe_ring *rx_ring,</span><br><span class="hljs-params">       <span class="hljs-type">const</span> <span class="hljs-type">int</span> budget)</span><br>&#123;<br>  ...<br>  rx_ring-&gt;stats.packets += total_rx_packets;<br>rx_ring-&gt;stats.bytes += total_rx_bytes;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><p>所以，可以看出，二者数据不同的原因是数据源不同。eBPF程序使用tracepoint静态跟踪点统计<code>sk_buff</code>结构中的<code>len</code>字段，而通过sar等传统工具利用的proc文件系统下的<code>net/dev</code>文件数据来源于设备驱动，而这个数据是网卡设备统计的，与tracepoint跟踪点不在一个层面，所以数据值不同。</p>]]></content>
    
    
    
    <tags>
      
      <tag>网络</tag>
      
      <tag>合作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux网络延迟诊断工具</title>
    <link href="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%BB%B6%E8%BF%9F%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7/"/>
    <url>/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%BB%B6%E8%BF%9F%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h2 id="网络延迟工具"><a href="#网络延迟工具" class="headerlink" title="网络延迟工具"></a>网络延迟工具</h2><blockquote><p>整理目前通用的以太网延迟诊断工具，及简述实现原理。</p></blockquote><h3 id="1-ping"><a href="#1-ping" class="headerlink" title="1. ping"></a>1. ping</h3><p>最常用的网络工具之一，用于测试主机与目标主机之间的网络连接是否正常，以及网络延迟。</p><p>测量原理：发送ICMP报文来测试网络连接与延迟，并能够显示每个ICMP报文的往返时间（RTT）</p><ol><li>客户端发送一个ICMP Echo Request消息到目标主机。</li><li>目标主机收到ICMP Echo Request消息后，返回一个ICMP Echo Reply消息。</li><li>客户端收到ICMP Echo Reply消息后，计算出往返时间（RTT），并显示出来</li></ol><p>优势：简单易用，通用性强</p><p>局限性：</p><ol><li>只能获得RTT时间，粒度较粗</li><li>延迟时间为测试主机IP层到目标主机IP层时间（ICMP – ICMP）</li><li>可以很好的测试物理网络连通性与网络状态，但不能跟踪实际数据包的时间延迟，也无法获取TCP层、应用层乃至应用的时延。</li></ol><blockquote><ol><li>局域网的连通性测试工具还有 arping，其原理是通过发送ARP请求来获得目标设备的MAC地址，并测试网络的连通性</li><li>追踪网络数据包的路由路径可以使用 traceroute</li></ol></blockquote><h3 id="2-wireshark"><a href="#2-wireshark" class="headerlink" title="2. wireshark"></a>2. wireshark</h3><p>侧重于流量分析</p><h3 id="3-iperf"><a href="#3-iperf" class="headerlink" title="3. iperf"></a>3. <a href="https://linux.die.net/man/1/iperf">iperf</a></h3><blockquote><p><a href="https://blog.51cto.com/u_15127599/4202824">iperf网络性能测试工具</a></p></blockquote><p>iperf是一个网络性能测试工具。Iperf可以测试TCP和UDP带宽质量。iperf可以测量最大TCP带宽，具有多种参数和UDP特性。 iperf可以报告带宽，延迟抖动和数据包丢失。</p><p>抖动和丢包率适应于UDP测试，带宽测试适用与TCP与UDP。</p><p>需要服务端与客户端同时开启 iperf 程序。</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%BB%B6%E8%BF%9F%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7/image-20230329104110311.png" class title="image1"><p>​带宽测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># UDP测试 带宽  Jitter抖动  丢包率</span><br>[ 3] <span class="hljs-built_in">local</span> 192.168.1.1 port 2152 connected with 192.168.101.2 port 56768<br>[ ID] Interval      Transfer    Bandwidth       Jitter  Lost/Total Datagrams<br>[ 3] 0.0- 1.0 sec 1.40 MBytes 11.7 Mbits/sec  0.069 ms   0/14671 (0%)<br>[ 3] 1.0- 2.0 sec 1.40 MBytes 11.8 Mbits/sec  0.050 ms   0/14703 (0%)<br>[ 3] 2.0- 3.0 sec 1.40 MBytes 11.8 Mbits/sec  0.052 ms   0/14708 (0%)<br>[ 3] 3.0- 4.0 sec 1.40 MBytes 11.8 Mbits/sec  0.057 ms   0/14704 (0%)<br>[ 3] 4.0- 5.0 sec 1.40 MBytes 11.8 Mbits/sec  0.072 ms   0/14706 (0%)<br>[ 3] 5.0- 6.0 sec 1.40 MBytes 11.8 Mbits/sec  0.075 ms   0/14705 (0%)<br>[ 3] 6.0- 7.0 sec 1.40 MBytes 11.8 Mbits/sec  0.060 ms   0/14707 (0%)<br>[ 3] 7.0- 8.0 sec 1.40 MBytes 11.8 Mbits/sec  0.073 ms   0/14703 (0%)<br>[ 3] 8.0- 9.0 sec 1.40 MBytes 11.8 Mbits/sec  0.073 ms   0/14706 (0%)<br>[ 3] 0.0-10.0 sec 14.0 MBytes 11.8 Mbits/sec  0.064 ms   0/147020 (0%)<br></code></pre></td></tr></table></figure><h3 id="4-netperf"><a href="#4-netperf" class="headerlink" title="4. netperf"></a>4. <a href="https://github.com/HewlettPackard/netperf">netperf</a></h3><p>Netperf 是一个基准，可用于衡量许多不同类型网络的性能。它为单向吞吐量和端到端延迟提供测试。</p><p>原理：TCP_RR（TCP Request-Response）测试模式来测量端到端的时间延迟</p><p>需要服务端与客户端同时开启 iperf 程序。</p><h3 id="5-qperf"><a href="#5-qperf" class="headerlink" title="5. qperf"></a>5. <a href="https://github.com/linux-rdma/qperf">qperf</a></h3><blockquote><p><a href="https://blog.csdn.net/notbaron/article/details/75949630">网络性能测试工具qperf使用</a></p></blockquote><p>测量网络带宽与时延，亮点在于可以测 RDMA。</p><p>需要服务端与客户端同时开启 qperf 程序。</p><p>原理：pingpong测试</p><p>tcp_lat：TCP单向延迟</p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%BB%B6%E8%BF%9F%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7/image-20230329131135507.png" class title="image2"><p>​获取网络的带宽和延时性能曲线（消息大小 1byte -&gt; 64K， 每次翻倍，循环获取延迟与带宽）</p><h3 id="6-nmap"><a href="#6-nmap" class="headerlink" title="6. nmap"></a>6. <a href="https://github.com/nmap/nmap">nmap</a></h3><p>四层主机发现工具</p><p>Nmap是一款广泛使用的网络扫描和安全评估工具，它可以帮助用户识别和探测目标网络上的主机和服务，从而帮助用户评估网络的安全性。Nmap支持多种扫描技术，如TCP、UDP、ICMP等协议的扫描，可以通过不同的选项和参数来灵活地控制扫描的范围和方式。</p><h3 id="7-hping3"><a href="#7-hping3" class="headerlink" title="7. hping3"></a>7. <a href="https://wangchujiang.com/linux-command/c/hping3.html">hping3</a></h3><p>四层主机发现工具</p><p>hping3是一款基于TCP&#x2F;IP协议栈的网络安全工具，可以对TCP、UDP、ICMP等协议进行探测和攻击。</p><p>其原理是构造控制报文，向目标主机发送探测包，根据目标主机返回的响应信息进行分析和判断。hping3可以自定义TCP、UDP、ICMP等协议的报文头和数据，以实现不同的攻击和探测。</p><h3 id="8-应用层RTT测量"><a href="#8-应用层RTT测量" class="headerlink" title="8. 应用层RTT测量"></a>8. 应用层RTT测量</h3><p>如http的RTT测量等</p><p>商业工具</p><h3 id="9-albedo-xGenius以太网测试仪"><a href="#9-albedo-xGenius以太网测试仪" class="headerlink" title="9. albedo xGenius以太网测试仪"></a>9. albedo xGenius以太网测试仪</h3><p><a href="https://www.coolshark.com/products/albedo.html">https://www.coolshark.com/products/albedo.html</a></p><img src="/2023/04/13/Linux%E7%BD%91%E7%BB%9C%E5%BB%B6%E8%BF%9F%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7/image-20230328100238890.png" class title="image3"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以太网延迟测量主要分为2种方式，分别为RTDP与OWDP。</p><ul><li>RTDP网络测试方式应用最为广泛，其原理是RTT往返时间测量，网络上存在大量的类似工具。另外通过RTT也可以简单估计单向延迟。</li><li>OWDP（One way delay and package loss protocol）是一种单向延迟测量方法，由于其局限性较高，因此网络上的可用工具非常少。</li></ul><p>OWDP缺点：</p><ol><li>需要精确时钟同步，测量精度与时钟同步精度有关。</li><li>需要多终端同时安装与运行程序，高复杂网络下实现代价太高。</li></ol><p>OWDP优点：</p><ol><li>测量精度高，适用于进行精度要求很高的实时性检测。</li></ol><p>车载以太网自身的特点：</p><p>针对缺点1：TSN时间敏感网络实际解决了时钟同步问题（精度250 us）</p><p>针对缺点2：车载以太网趋近于一个简单静态网络，网络拓扑简单。</p><p>针对优点1：车载网络针对实时性，具有很高的要求。</p>]]></content>
    
    
    
    <tags>
      
      <tag>网络</tag>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
